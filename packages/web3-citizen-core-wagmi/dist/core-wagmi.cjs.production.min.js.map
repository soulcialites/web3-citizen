{"version":3,"file":"core-wagmi.cjs.production.min.js","sources":["../../../node_modules/.pnpm/style-inject@0.3.0/node_modules/style-inject/dist/style-inject.es.js","../src/constants.ts","../src/hooks/useCitizenAlphaRead.tsx","../src/InputWithLabel.tsx","../src/hooks/useNotaryWrite.tsx","../src/hooks/useLogError.tsx","../src/hooks/useLogTransactionWrite.tsx","../src/Citizen/FormCitizenIssue.tsx","../src/hooks/useNationWrite.tsx","../src/Nation/NationFormDisableRole.tsx","../src/Nation/NationFormEnableRole.tsx","../src/InputWithSideLabel.tsx","../src/Nation/NationFormHasRole.tsx","../src/Nation/NationFormRoleGrant.tsx","../src/Nation/NationFormRoleRevoke.tsx","../src/hooks/useNationRead.tsx","../src/Nation/NationRoleAdminRole.tsx","../src/Nation/NationFormIsFounder.tsx","../src/Nation/NationRoleStatus.tsx","../src/Nation/NationIsFounder.tsx","../src/hooks/useNotaryRead.tsx","../src/Notary/NotaryIsNotary.tsx","../src/Notary/NotaryFormIsNotary.tsx","../src/Notary/NotaryFormGrantPermissions.tsx","../src/Notary/NotaryFormRevokePermissions.tsx","../src/hooks/useNotaryServiceDelegatableWrite.tsx","../src/NotaryServiceDelegatable/NotaryServiceDelegatableFormClaim.tsx","../src/hooks/useNotaryServiceDelegatableContract.tsx","../src/utils/types.ts","../src/utils/createDelegation.ts","../src/utils/createIntention.ts","../src/NotaryServiceDelegatable/NotaryServiceDelegatableFormClaimDelegate.tsx","../src/NotaryServiceDelegatable/NotaryServiceDelegatableFormClaimInvocation.tsx","../src/hooks/useTrustTokenWrite.tsx","../src/Citizen/CitizenLink.tsx","../src/Citizen/FormCitizenEnsUpdate.tsx","../src/Citizen/FormCitizenRevoke.tsx","../src/Nation/NationHasRole.tsx","../src/experiments/TrustTokenClaim.tsx","../src/hooks/useCitizenAlphaWrite.tsx","../src/hooks/useCitizenGetMetadata.tsx","../src/hooks/useNationContract.tsx","../src/hooks/useNotaryContract.tsx","../src/hooks/useNotaryServiceDelegatableRead.tsx","../src/hooks/useTrustTokenContract.tsx","../src/hooks/useTrustTokenRead.tsx"],"sourcesContent":["function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","import { utils } from 'ethers';\n\nexport const NOTARY = utils.keccak256(utils.toUtf8Bytes('NOTARY'));\nexport const FOUNDER = utils.keccak256(utils.toUtf8Bytes('FOUNDER'));\nexport const TREASURY = utils.keccak256(utils.toUtf8Bytes('TREASURY'));\nexport const LABS = utils.keccak256(utils.toUtf8Bytes('LABS'));\n\nexport const lookup = {\n  NOTARY: NOTARY,\n  FOUNDER: FOUNDER,\n  TREASURY: TREASURY,\n  LABS: LABS,\n};\n\nexport const reverseLookup = {\n  '0x0000000000000000000000000000000000000000000000000000000000000000': 'ADMIN',\n  [NOTARY]: 'NOTARY',\n  [FOUNDER]: 'FOUNDER',\n  [TREASURY]: 'TREASURY',\n  [LABS]: 'LABS',\n};\n\nconst constants = {\n  NOTARY,\n  FOUNDER,\n};\n\nexport default constants;\n","import { useContractRead } from 'wagmi';\nimport CitizenAlpha from '@web3-citizen/core-sol/abis/contracts/CitizenAlpha.sol/CitizenAlpha.json';\n\nexport function useCitizenAlphaRead(\n  address: string,\n  method: string,\n  args: any[]\n): any {\n  return useContractRead(\n    {\n      addressOrName: address,\n      contractInterface: CitizenAlpha,\n    },\n    method,\n    {\n      args: args,\n    }\n  );\n}\n\nexport default useCitizenAlphaRead;\n","import * as React from 'react';\nimport classNames from 'classnames';\n\ninterface InputWithLabelProps {\n  className?: string;\n  label?: string;\n  register: Function;\n  required?: boolean;\n  name?: string;\n  placeholder?: string;\n  type?: string;\n}\n\nexport const InputWithLabel = ({\n  className,\n  name,\n  label,\n  register,\n  required = false,\n  placeholder,\n  type,\n}: InputWithLabelProps) => {\n  const containerClassName = classNames(className, 'InputWithLabel');\n  return (\n    <div className={containerClassName}>\n      <label>\n        <span className=\"text-sm font-semibold\">{label}</span>\n      </label>\n      <input\n        className=\"input\"\n        type={type}\n        placeholder={placeholder}\n        {...register(name, { required })}\n      />\n    </div>\n  );\n};\n\nexport default InputWithLabel;\n","import { useContractWrite } from 'wagmi';\nimport Notary from '@web3-citizen/core-sol/abis/contracts/Notary/Notary.sol/Notary.json';\n\nexport function useNotaryWrite(\n  address: string,\n  method: string,\n  args: any[]\n): any {\n  return useContractWrite(\n    {\n      addressOrName: address,\n      contractInterface: Notary,\n    },\n    method,\n    {\n      args: args,\n    }\n  );\n}\n\nexport default useNotaryWrite;\n","import { useEffect } from 'react';\n\nexport function useLogError(error: string): any {\n  useEffect(() => {\n    // console.log(error);\n  }, [error]);\n}\n\nexport default useLogError;\n","import { useEffect } from 'react';\n\nexport function useLogTransactionWrite(data: string): any {\n  useEffect(() => {\n    // console.log(data);\n  }, [data]);\n}\n\nexport default useLogTransactionWrite;\n","import * as React from 'react';\nimport { useForm } from 'react-hook-form';\nimport classNames from 'classnames';\nimport { useNotaryWrite } from '../hooks/useNotaryWrite';\nimport InputWithLabel from '../InputWithLabel';\nimport { useLogError } from '../hooks';\n\ninterface FormCitizenIssueProps {\n  className?: string;\n  label: string;\n  onUpdate?: Function;\n  defaults?: any;\n  contractAddress: string;\n}\n\nexport const FormCitizenIssue = ({\n  className,\n  label,\n  onUpdate,\n  contractAddress,\n}: FormCitizenIssueProps) => {\n  const styleForm = classNames(className, 'FormCitizenIssue');\n\n  const {\n    register,\n    handleSubmit,\n    watch,\n    formState: {},\n  } = useForm({\n    defaultValues: {\n      to: '',\n    },\n  });\n  const watchAllFields = watch();\n  const { write, error } = useNotaryWrite(contractAddress, 'issue', [\n    watchAllFields?.to,\n  ]);\n  const onSubmit = (_data: any) => {\n    write();\n    if (onUpdate) onUpdate(_data);\n  };\n  useLogError(error);\n\n  return (\n    <div className={styleForm}>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <div className=\"mt-4\">\n          <InputWithLabel\n            name=\"to\"\n            label=\"Citizen\"\n            placeholder=\"vitalik.eth\"\n            register={register}\n          />\n        </div>\n        <button className=\"btn btn-default my-3 w-full\" type=\"submit\">\n          {label}\n        </button>\n      </form>\n    </div>\n  );\n};\nFormCitizenIssue.defaultProps = {\n  label: 'Issue Citizenship',\n};\nexport default FormCitizenIssue;\n","import { useContractWrite } from 'wagmi';\nimport Nation from '@web3-citizen/core-sol/abis/contracts/Nation/Nation.sol/Nation.json';\n\nexport function useNationWrite(\n  address: string,\n  method: string,\n  args: any[]\n): any {\n  return useContractWrite(\n    {\n      addressOrName: address,\n      contractInterface: Nation,\n    },\n    method,\n    {\n      args: args,\n    }\n  );\n}\n\nexport default useNationWrite;\n","import * as React from 'react';\nimport { useForm } from 'react-hook-form';\nimport classNames from 'classnames';\nimport { useNationWrite } from '../hooks/useNationWrite';\nimport { useLogError, useLogTransactionWrite } from '../hooks';\nimport { utils } from 'ethers';\n\ninterface NationFormDisableRoleProps {\n  className?: string;\n  label: string;\n  onUpdate?: Function;\n  defaults?: any;\n  contractAddress: string;\n}\n\nexport const NationFormDisableRole = ({\n  className,\n  label,\n  onUpdate,\n  contractAddress,\n}: NationFormDisableRoleProps) => {\n  const classes_ = classNames(className, 'NationFormDisableRole');\n\n  const {\n    register,\n    handleSubmit,\n    watch,\n    formState: {},\n  } = useForm({\n    defaultValues: {\n      role: '',\n    },\n  });\n  const watchAllFields = watch();\n  const { write, error, data } = useNationWrite(\n    contractAddress,\n    'disableRole',\n    [utils.keccak256(utils.toUtf8Bytes(watchAllFields.role))]\n  );\n  useLogError(error);\n  useLogTransactionWrite(data);\n  const onSubmit = (_data: any) => {\n    write();\n    if (onUpdate) onUpdate(_data);\n  };\n\n  return (\n    <div className={classes_}>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <label className=\"label my-2 block\">Role</label>\n        <input\n          className=\"input\"\n          placeholder=\"LABS\"\n          {...register('role', { required: true })}\n        />\n        <button className=\"btn btn-default my-3 w-full\" type=\"submit\">\n          {label}\n        </button>\n      </form>\n    </div>\n  );\n};\n\nNationFormDisableRole.defaultProps = {\n  label: 'Disable Role',\n};\n\nexport default NationFormDisableRole;\n","import * as React from 'react';\nimport { useForm } from 'react-hook-form';\nimport classNames from 'classnames';\nimport { useNationWrite } from '../hooks/useNationWrite';\nimport { useLogError, useLogTransactionWrite } from '../hooks';\nimport { utils } from 'ethers';\n\ninterface NationFormEnableRoleProps {\n  className?: string;\n  label: string;\n  onUpdate?: Function;\n  defaults?: any;\n  contractAddress: string;\n}\n\nexport const NationFormEnableRole = ({\n  className,\n  label,\n  onUpdate,\n  contractAddress,\n}: NationFormEnableRoleProps) => {\n  const classes_ = classNames(className, 'NationFormEnableRole');\n\n  const {\n    register,\n    handleSubmit,\n    watch,\n    formState: {},\n  } = useForm({\n    defaultValues: {\n      role: '',\n      adminRole: '',\n    },\n  });\n  const watchAllFields = watch();\n  const { write, error, data } = useNationWrite(contractAddress, 'enableRole', [\n    utils.keccak256(utils.toUtf8Bytes(watchAllFields.role)),\n    utils.keccak256(utils.toUtf8Bytes(watchAllFields.adminRole)),\n  ]);\n  useLogError(error);\n  useLogTransactionWrite(data);\n  const onSubmit = (_data: any) => {\n    write();\n    if (onUpdate) onUpdate(_data);\n  };\n\n  return (\n    <div className={classes_}>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <label className=\"label my-2 block\">Role</label>\n        <input\n          className=\"input\"\n          placeholder=\"TREASURY\"\n          {...register('role', { required: true })}\n        />\n        <label className=\"label my-2 block\">Admin Role</label>\n        <input\n          className=\"input\"\n          placeholder=\"FOUNDER\"\n          {...register('adminRole', { required: true })}\n        />\n        <button className=\"btn btn-default my-3 w-full\" type=\"submit\">\n          {label}\n        </button>\n      </form>\n    </div>\n  );\n};\n\nNationFormEnableRole.defaultProps = {\n  label: 'Enable Role',\n};\n\nexport default NationFormEnableRole;\n","import * as React from 'react';\nimport classNames from 'classnames';\n\ninterface InputWithSideLabelProps {\n  className?: string;\n  label?: string;\n  register: Function;\n  required?: boolean;\n  name?: string;\n  placeholder?: string;\n  type?: string;\n}\n\nexport const InputWithSideLabel = ({\n  className,\n  name,\n  label,\n  register,\n  required = false,\n  placeholder,\n  type,\n}: InputWithSideLabelProps) => {\n  const containerClassName = classNames(\n    className,\n    'InputWithSideLabel flex items-center justify-center'\n  );\n  return (\n    <div className={containerClassName}>\n      <input\n        className=\"input col-span-8\"\n        type={type}\n        placeholder={placeholder}\n        {...register(name, { required })}\n      />\n      <label className=\"bg-neutral-300 px-4 rounded-r-lg text-white dark:text-neutral-100 dark:bg-slate-800 self-stretch flex items-center justify-center\">\n        <span className=\"text-sm font-semibold p-2\">{label}</span>\n      </label>\n    </div>\n  );\n};\n\nexport default InputWithSideLabel;\n","import * as React from 'react';\nimport { useForm } from 'react-hook-form';\nimport classNames from 'classnames';\nimport { InputWithSideLabel } from '../InputWithSideLabel';\nimport { useNationWrite } from '../hooks/useNationWrite';\nimport { useLogError } from '../hooks';\nimport { utils } from 'ethers';\n\ninterface NationFormHasRoleProps {\n  className?: string;\n  label: string;\n  onUpdate?: Function;\n  defaults?: any;\n  contractAddress: string;\n}\n\nexport const NationFormHasRole = ({\n  className,\n  label,\n  onUpdate,\n  contractAddress,\n}: NationFormHasRoleProps) => {\n  const classes_ = classNames(className, 'NationFormHasRole');\n\n  const {\n    register,\n    handleSubmit,\n    watch,\n    formState: {},\n  } = useForm({\n    defaultValues: {\n      citizen: '',\n      role: '',\n    },\n  });\n  const watchAllFields = watch();\n  const { write, error, data } = useNationWrite(contractAddress, 'hasRole', [\n    utils.keccak256(utils.toUtf8Bytes(watchAllFields.role)),\n    watchAllFields?.citizen,\n  ]);\n  useLogError(error);\n  const onSubmit = (_data: any) => {\n    write();\n    if (onUpdate) onUpdate(_data);\n  };\n\n  return (\n    <div className={classes_}>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <div className=\"grid grid-cols-12 gap-x-4 w-full\">\n          <div className=\"col-span-8\">\n            <InputWithSideLabel\n              name=\"role\"\n              placeholder=\"FOUNDER\"\n              label=\"Role\"\n              register={register}\n            />\n            <InputWithSideLabel\n              name=\"citizen\"\n              className=\"mt-3\"\n              placeholder=\"vitalik.eth\"\n              label=\"Citizen\"\n              register={register}\n            />\n          </div>\n          <div className=\"col-span-4 bg-slate-700 rounded-md text-white flex items-center justify-center p-2\">\n            <span className=\"\">\n              <span className=\"font-semibold\">Status:</span>{' '}\n              {data ? 'Yes' : 'No'}\n            </span>\n          </div>\n        </div>\n        <button className=\"btn btn-default my-3 w-full\" type=\"submit\">\n          {label}\n        </button>\n      </form>\n    </div>\n  );\n};\n\nNationFormHasRole.defaultProps = {\n  label: 'Check Status',\n};\n\nexport default NationFormHasRole;\n","import * as React from 'react';\nimport { useForm } from 'react-hook-form';\nimport classNames from 'classnames';\nimport { useNationWrite } from '../hooks/useNationWrite';\nimport { useLogError, useLogTransactionWrite } from '../hooks';\nimport { utils } from 'ethers';\n\ninterface NationFormRoleGrantProps {\n  className?: string;\n  label: string;\n  onUpdate?: Function;\n  defaults?: any;\n  contractAddress: string;\n}\n\nexport const NationFormRoleGrant = ({\n  className,\n  label,\n  onUpdate,\n  contractAddress,\n}: NationFormRoleGrantProps) => {\n  const classes_ = classNames(className, 'NationFormRoleGrant');\n\n  const {\n    register,\n    handleSubmit,\n    watch,\n    formState: {},\n  } = useForm({\n    defaultValues: {\n      citizen: '',\n      role: '',\n    },\n  });\n  const watchAllFields = watch();\n  const { write, error, data } = useNationWrite(contractAddress, 'grantRole', [\n    utils.keccak256(utils.toUtf8Bytes(watchAllFields.role)),\n    watchAllFields.citizen,\n  ]);\n  useLogError(error);\n  useLogTransactionWrite(data);\n  const onSubmit = (_data: any) => {\n    write();\n    if (onUpdate) onUpdate(_data);\n  };\n\n  return (\n    <div className={classes_}>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <input\n          className=\"input\"\n          placeholder=\"Nation\"\n          {...register('role', { required: true })}\n        />\n        <input\n          className=\"input mt-2\"\n          placeholder=\"web3oftrust.eth\"\n          {...register('citizen', { required: true })}\n        />\n        <button className=\"btn btn-default my-3 w-full\" type=\"submit\">\n          {label}\n        </button>\n      </form>\n    </div>\n  );\n};\n\nNationFormRoleGrant.defaultProps = {\n  label: 'Grant Role',\n};\n\nexport default NationFormRoleGrant;\n","import * as React from 'react';\nimport { useForm } from 'react-hook-form';\nimport classNames from 'classnames';\nimport { useNationWrite } from '../hooks/useNationWrite';\nimport { useLogError, useLogTransactionWrite } from '../hooks';\nimport { utils } from 'ethers';\n\ninterface NationFormRoleRevokeProps {\n  className?: string;\n  label: string;\n  onUpdate?: Function;\n  defaults?: any;\n  contractAddress: string;\n}\n\nexport const NationFormRoleRevoke = ({\n  className,\n  label,\n  onUpdate,\n  contractAddress,\n}: NationFormRoleRevokeProps) => {\n  const classes_ = classNames(className, 'NationFormRoleRevoke');\n\n  const {\n    register,\n    handleSubmit,\n    watch,\n    formState: {},\n  } = useForm({\n    defaultValues: {\n      citizen: '',\n      role: '',\n    },\n  });\n  const watchAllFields = watch();\n  const { write, error, data } = useNationWrite(contractAddress, 'revokeRole', [\n    utils.keccak256(utils.toUtf8Bytes(watchAllFields.role)),\n    watchAllFields.citizen,\n  ]);\n  useLogError(error);\n  useLogTransactionWrite(data);\n  const onSubmit = (_data: any) => {\n    write();\n    if (onUpdate) onUpdate(_data);\n  };\n\n  return (\n    <div className={classes_}>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <input\n          className=\"input\"\n          placeholder=\"Nation\"\n          {...register('role', { required: true })}\n        />\n        <input\n          className=\"input mt-2\"\n          placeholder=\"web3oftrust.eth\"\n          {...register('citizen', { required: true })}\n        />\n        <button className=\"btn btn-default my-3 w-full\" type=\"submit\">\n          {label}\n        </button>\n      </form>\n    </div>\n  );\n};\n\nNationFormRoleRevoke.defaultProps = {\n  label: 'Revoke Role',\n};\n\nexport default NationFormRoleRevoke;\n","import { useContractRead } from 'wagmi';\nimport Nation from '@web3-citizen/core-sol/abis/contracts/Nation/Nation.sol/Nation.json';\n\nexport function useNationRead(\n  address: string,\n  method: string,\n  args: any[]\n): any {\n  return useContractRead(\n    {\n      addressOrName: address,\n      contractInterface: Nation,\n    },\n    method,\n    {\n      args: args,\n    }\n  );\n}\n\nexport default useNationRead;\n","import React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { useNationRead } from '../hooks/useNationRead';\nimport { utils } from 'ethers';\nimport { useLogError } from '../hooks';\nimport { reverseLookup } from '../constants';\n\ninterface NationRoleAdminRoleProps {\n  className?: string;\n  classNameLabel?: string;\n  label: string;\n  labelActive: boolean;\n  contractAddress?: string;\n  role: string;\n}\n\nexport const NationRoleAdminRole = ({\n  className,\n  contractAddress,\n  role,\n  classNameLabel,\n  label,\n  labelActive,\n}: NationRoleAdminRoleProps) => {\n  const classes_ = classNames(className, 'NationRoleAdminRole');\n\n  const { data, isError, error } = useNationRead(\n    contractAddress || '',\n    'getRoleAdmin',\n    [utils.keccak256(utils.toUtf8Bytes(role))]\n  );\n  useLogError(error);\n  const [roleReverseLookup, setRoleReverseLookup] = useState<string>('');\n  useEffect(() => {\n    // @ts-ignore\n    setRoleReverseLookup(reverseLookup[data || '']);\n  }, [data]);\n  if (isError) return null;\n\n  return (\n    <span className={classes_}>\n      <span className=\"\">\n        {labelActive && <span className={classNameLabel}>{label}</span>}\n        <span className=\"\">{roleReverseLookup}</span>\n      </span>\n    </span>\n  );\n};\n\nNationRoleAdminRole.defaultProps = {\n  labelActive: false,\n  label: 'AdminRole: ',\n};\n\nexport default NationRoleAdminRole;\n","import * as React from 'react';\nimport { useForm } from 'react-hook-form';\nimport classNames from 'classnames';\nimport { useNationWrite } from '../hooks/useNationWrite';\nimport { FOUNDER } from '../constants';\nimport { useLogError } from '../hooks';\nimport InputWithSideLabel from '../InputWithSideLabel';\n\ninterface NationFormIsFounderProps {\n  className?: string;\n  label: string;\n  onUpdate?: Function;\n  defaults?: any;\n  contractAddress: string;\n}\n\nexport const NationFormIsFounder = ({\n  className,\n  label,\n  onUpdate,\n  contractAddress,\n}: NationFormIsFounderProps) => {\n  const classes_ = classNames(className, 'NationFormIsFounder');\n\n  const {\n    register,\n    handleSubmit,\n    watch,\n    formState: {},\n  } = useForm({\n    defaultValues: {\n      citizen: '',\n    },\n  });\n  const watchAllFields = watch();\n  const { write, error, data } = useNationWrite(contractAddress, 'hasRole', [\n    FOUNDER,\n    watchAllFields?.citizen,\n  ]);\n  useLogError(error);\n  const onSubmit = (_data: any) => {\n    write();\n    if (onUpdate) onUpdate(_data);\n  };\n\n  return (\n    <div className={classes_}>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <div className=\"grid grid-cols-12 gap-x-4 w-full\">\n          <div className=\"col-span-8\">\n            <InputWithSideLabel\n              name=\"citizen\"\n              placeholder=\"vitalik.eth\"\n              label=\"Citizen\"\n              register={register}\n            />\n          </div>\n          <div className=\"col-span-4 bg-slate-800 rounded-md text-white flex items-center justify-center p-2\">\n            <span className=\"\">\n              <span className=\"font-semibold\">Status:</span>{' '}\n              {data ? 'Yes' : 'No'}\n            </span>\n          </div>\n        </div>\n        <button className=\"btn btn-default my-3 w-full\" type=\"submit\">\n          {label}\n        </button>\n      </form>\n    </div>\n  );\n};\n\nNationFormIsFounder.defaultProps = {\n  label: 'Check Status',\n};\n\nexport default NationFormIsFounder;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { useNationRead } from '../hooks/useNationRead';\nimport { utils } from 'ethers';\n\ninterface NationRoleStatusProps {\n  className?: string;\n  classNameLabel?: string;\n  roleActive?: boolean;\n  label: string;\n  labelActive: boolean;\n  labelTrue: string;\n  labelFalse: string;\n  contractAddress?: string;\n  role?: string;\n}\n\nexport const NationRoleStatus = ({\n  className,\n  contractAddress,\n  role,\n  classNameLabel,\n  roleActive,\n  label,\n  labelActive,\n  labelTrue,\n  labelFalse,\n}: NationRoleStatusProps) => {\n  const classes_ = classNames(className, 'NationRoleStatus');\n\n  const { data, isError } = useNationRead(contractAddress || '', 'roleStatus', [\n    utils.keccak256(utils.toUtf8Bytes(role || '')),\n  ]);\n\n  if (isError) return null;\n\n  return (\n    <span className={classes_}>\n      <span className=\"\">\n        {roleActive && <span className=\"\">role</span>}{' '}\n        {labelActive && <span className={classNameLabel}>{label}</span>}{' '}\n      </span>\n      {data ? labelTrue : labelFalse}\n    </span>\n  );\n};\n\nNationRoleStatus.defaultProps = {\n  labelActive: false,\n  label: 'Status: ',\n  labelTrue: 'Enabled',\n  labelFalse: 'Disabled',\n};\n\nexport default NationRoleStatus;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { useNationRead } from '../hooks/useNationRead';\nimport { FOUNDER } from '../constants';\n\ninterface NationIsFounderProps {\n  className?: string;\n  classNameLabel?: string;\n  label: string;\n  labelActive: boolean;\n  labelTrue: string;\n  labelFalse: string;\n  contractAddress?: string;\n  userAddress?: string;\n}\n\nexport const NationIsFounder = ({\n  className,\n  classNameLabel,\n  contractAddress,\n  userAddress,\n  label,\n  labelActive,\n  labelTrue,\n  labelFalse,\n}: NationIsFounderProps) => {\n  const classes_ = classNames(className, 'NationIsFounder');\n\n  const { data, isError } = useNationRead(contractAddress || '', 'hasRole', [\n    FOUNDER,\n    userAddress,\n  ]);\n\n  if (isError) return null;\n\n  return (\n    <span className={classes_}>\n      {labelActive && <span className={classNameLabel}>{label}</span>}{' '}\n      {data ? labelTrue : labelFalse}\n    </span>\n  );\n};\n\nNationIsFounder.defaultProps = {\n  labelActive: false,\n  label: 'Founder: ',\n  labelTrue: 'true',\n  labelFalse: 'false',\n};\n\nexport default NationIsFounder;\n","import { useContractRead } from 'wagmi';\nimport Notary from '@web3-citizen/core-sol/abis/contracts/Notary/Notary.sol/Notary.json';\n\nexport function useNotaryRead(\n  address: string,\n  method: string,\n  args: any[]\n): any {\n  return useContractRead(\n    {\n      addressOrName: address,\n      contractInterface: Notary,\n    },\n    method,\n    {\n      args: args,\n    }\n  );\n}\n\nexport default useNotaryRead;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { useNotaryRead } from '../hooks/useNotaryRead';\nimport { NOTARY } from '../constants';\n\ninterface NotaryIsNotaryProps {\n  className?: string;\n  labelTrue: string;\n  labelFalse: string;\n  contractAddress?: string;\n  userAddress?: string;\n}\n\nexport const NotaryIsNotary = ({\n  className,\n  contractAddress,\n  userAddress,\n  labelTrue,\n  labelFalse,\n}: NotaryIsNotaryProps) => {\n  const containerClassName = classNames(className, 'NotaryHasRole');\n\n  const { data, isError } = useNotaryRead(contractAddress || '', 'hasRole', [\n    NOTARY,\n    userAddress,\n  ]);\n\n  if (isError) return null;\n\n  return (\n    <div className={containerClassName}>\n      Notary: {data ? labelTrue : labelFalse}\n    </div>\n  );\n};\n\nNotaryIsNotary.defaultProps = {\n  labelTrue: 'Yes',\n  labelFalse: 'No',\n};\n\nexport default NotaryIsNotary;\n","import * as React from 'react';\nimport { useForm } from 'react-hook-form';\nimport classNames from 'classnames';\nimport { useNationWrite } from '../hooks/useNationWrite';\nimport { NOTARY } from '../constants';\nimport { useLogError } from '../hooks';\n\ninterface NotaryFormIsNotaryProps {\n  className?: string;\n  label: string;\n  onUpdate?: Function;\n  defaults?: any;\n  contractAddress: string;\n}\n\nexport const NotaryFormIsNotary = ({\n  className,\n  label,\n  onUpdate,\n  contractAddress,\n}: NotaryFormIsNotaryProps) => {\n  const classes_ = classNames(className, 'NotaryFormIsNotary');\n\n  const {\n    register,\n    handleSubmit,\n    watch,\n    formState: {},\n  } = useForm({\n    defaultValues: {\n      citizen: '',\n    },\n  });\n  const watchAllFields = watch();\n  const { write, error, data } = useNationWrite(contractAddress, 'hasRole', [\n    NOTARY,\n    watchAllFields?.citizen,\n  ]);\n  useLogError(error);\n  const onSubmit = (_data: any) => {\n    write();\n    if (onUpdate) onUpdate(_data);\n  };\n\n  return (\n    <div className={classes_}>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <div className=\"grid grid-cols-12 gap-x-4 w-full\">\n          <div className=\"col-span-8\">\n            <input\n              className=\"input\"\n              placeholder=\"weboftrust.eth\"\n              {...register('citizen', { required: true })}\n            />\n          </div>\n          <div className=\"col-span-4 bg-neutral-900 flex items-center justify-center p-2\">\n            <span className=\"\">\n              <span className=\"font-semibold\">Status:</span>{' '}\n              {data ? 'Yes' : 'No'}\n            </span>\n          </div>\n        </div>\n        <button className=\"btn btn-default my-3 w-full\" type=\"submit\">\n          {label}\n        </button>\n      </form>\n    </div>\n  );\n};\n\nNotaryFormIsNotary.defaultProps = {\n  label: 'Check Status',\n};\n\nexport default NotaryFormIsNotary;\n","import * as React from 'react';\nimport { useForm } from 'react-hook-form';\nimport classNames from 'classnames';\nimport { useNationWrite } from '../hooks/useNationWrite';\nimport { NOTARY } from '../constants';\nimport { useLogError } from '../hooks';\n\ninterface NotaryFormGrantPermissionsProps {\n  className?: string;\n  label: string;\n  onUpdate?: Function;\n  defaults?: any;\n  contractAddress: string;\n}\n\nexport const NotaryFormGrantPermissions = ({\n  className,\n  label,\n  onUpdate,\n  contractAddress,\n}: NotaryFormGrantPermissionsProps) => {\n  const classes_ = classNames(className, 'NotaryFormGrantPermissions');\n\n  const {\n    register,\n    handleSubmit,\n    watch,\n    formState: {},\n  } = useForm({\n    defaultValues: {\n      citizen: '',\n    },\n  });\n  const watchAllFields = watch();\n  const { write, error } = useNationWrite(contractAddress, 'grantRole', [\n    NOTARY,\n    watchAllFields?.citizen,\n  ]);\n  useLogError(error);\n  const onSubmit = (_data: any) => {\n    write();\n    if (onUpdate) onUpdate(_data);\n  };\n\n  return (\n    <div className={classes_}>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <input\n          className=\"input\"\n          placeholder=\"weboftrust.eth\"\n          {...register('citizen', { required: true })}\n        />\n        <button className=\"btn btn-default my-3 w-full\" type=\"submit\">\n          {label}\n        </button>\n      </form>\n    </div>\n  );\n};\n\nNotaryFormGrantPermissions.defaultProps = {\n  label: 'Grant Notary Status',\n};\n\nexport default NotaryFormGrantPermissions;\n","import * as React from 'react';\nimport { useForm } from 'react-hook-form';\nimport classNames from 'classnames';\nimport { useNationWrite } from '../hooks/useNationWrite';\nimport { NOTARY } from '../constants';\nimport { useLogError } from '../hooks';\n\ninterface NotaryFormRevokePermissionsProps {\n  className?: string;\n  label: string;\n  onUpdate?: Function;\n  defaults?: any;\n  contractAddress: string;\n}\n\nexport const NotaryFormRevokePermissions = ({\n  className,\n  label,\n  onUpdate,\n  contractAddress,\n}: NotaryFormRevokePermissionsProps) => {\n  const classes_ = classNames(className, 'NotaryFormRevokePermissions');\n\n  const {\n    register,\n    handleSubmit,\n    watch,\n    formState: {},\n  } = useForm({\n    defaultValues: {\n      citizen: '',\n    },\n  });\n  const watchAllFields = watch();\n  const { write, error } = useNationWrite(contractAddress, 'revokeRole', [\n    NOTARY,\n    watchAllFields?.citizen,\n  ]);\n  useLogError(error);\n  const onSubmit = (_data: any) => {\n    write();\n    if (onUpdate) onUpdate(_data);\n  };\n\n  return (\n    <div className={classes_}>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <input\n          className=\"input\"\n          placeholder=\"weboftrust.eth\"\n          {...register('citizen', { required: true })}\n        />\n        <button className=\"btn btn-default my-3 w-full\" type=\"submit\">\n          {label}\n        </button>\n      </form>\n    </div>\n  );\n};\n\nNotaryFormRevokePermissions.defaultProps = {\n  label: 'Revoke Notary Status',\n};\n\nexport default NotaryFormRevokePermissions;\n","import { useContractWrite } from 'wagmi';\nimport NotaryServiceDelegatable from '@web3-citizen/core-sol/abis/contracts/Notary/NotaryServiceDelegatable.sol/NotaryServiceDelegatable.json';\n\nexport function useNotaryServiceDelegatableWrite(\n  address: string,\n  method: string,\n  args: any[]\n): any {\n  return useContractWrite(\n    {\n      addressOrName: address,\n      contractInterface: NotaryServiceDelegatable,\n    },\n    method,\n    {\n      args: args,\n    }\n  );\n}\n\nexport default useNotaryServiceDelegatableWrite;\n","import * as React from 'react';\nimport { useForm } from 'react-hook-form';\nimport classNames from 'classnames';\nimport useNotaryServiceDelegatableWrite from '../hooks/useNotaryServiceDelegatableWrite';\n\ninterface NotaryServiceDelegatableFormClaimProps {\n  className?: string;\n  label: string;\n  onUpdate?: Function;\n  defaults?: any;\n  contractAddress: string;\n}\nexport const NotaryServiceDelegatableFormClaim = ({\n  className,\n  label,\n  onUpdate,\n  contractAddress,\n}: NotaryServiceDelegatableFormClaimProps) => {\n  const classes_ = classNames(className, 'NotaryServiceDelegatableFormClaim');\n  const {\n    watch,\n    register,\n    handleSubmit,\n    formState: {},\n  } = useForm({\n    defaultValues: {\n      to: '',\n    },\n  });\n  const watchAllFields = watch();\n  const { write } = useNotaryServiceDelegatableWrite(contractAddress, 'claim', [\n    watchAllFields.to,\n  ]);\n\n  const onSubmit = (_data: any) => {\n    write();\n    if (onUpdate) onUpdate(_data);\n  };\n\n  return (\n    <div className={classes_}>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <input\n          className=\"input\"\n          placeholder=\"0x0\"\n          {...register('to', { required: true })}\n        />\n        <button className=\"btn btn-default my-3 w-full\" type=\"submit\">\n          {label}\n        </button>\n      </form>\n    </div>\n  );\n};\n\nNotaryServiceDelegatableFormClaim.defaultProps = {\n  label: 'Issue Claim',\n};\n\nexport default NotaryServiceDelegatableFormClaim;\n","import { useContract } from 'wagmi';\nimport NotaryServiceDelegatable from '@web3-citizen/core-sol/abis/contracts/Notary/NotaryServiceDelegatable.sol/NotaryServiceDelegatable.json';\n\nexport function useNotaryServiceDelegatableContract(address: string): any {\n  return useContract({\n    addressOrName: address,\n    contractInterface: NotaryServiceDelegatable,\n  });\n}\n\nexport default useNotaryServiceDelegatableContract;\n","export const domain = {\n  name: 'NotaryServiceDelegatable',\n  version: '1',\n  chainId: 1,\n};\n\nexport const types = {\n  EIP712Domain: [\n    { name: 'name', type: 'string' },\n    { name: 'version', type: 'string' },\n    { name: 'chainId', type: 'uint256' },\n    { name: 'verifyingContract', type: 'address' },\n  ],\n  Invocation: [\n    { name: 'transaction', type: 'Transaction' },\n    { name: 'authority', type: 'SignedDelegation[]' },\n  ],\n  Invocations: [\n    { name: 'batch', type: 'Invocation[]' },\n    { name: 'replayProtection', type: 'ReplayProtection' },\n  ],\n  SignedInvocation: [\n    { name: 'invocations', type: 'Invocations' },\n    { name: 'signature', type: 'bytes' },\n  ],\n  Transaction: [\n    { name: 'to', type: 'address' },\n    { name: 'gasLimit', type: 'uint256' },\n    { name: 'data', type: 'bytes' },\n  ],\n  ReplayProtection: [\n    { name: 'nonce', type: 'uint' },\n    { name: 'queue', type: 'uint' },\n  ],\n  Delegation: [\n    { name: 'delegate', type: 'address' },\n    { name: 'authority', type: 'bytes32' },\n    { name: 'caveats', type: 'Caveat[]' },\n  ],\n  Caveat: [\n    { name: 'enforcer', type: 'address' },\n    { name: 'terms', type: 'bytes' },\n  ],\n  SignedDelegation: [\n    { name: 'delegation', type: 'Delegation' },\n    { name: 'signature', type: 'bytes' },\n  ],\n  IntentionToRevoke: [{ name: 'delegationHash', type: 'bytes32' }],\n  SignedIntentionToRevoke: [\n    { name: 'signature', type: 'bytes' },\n    { name: 'intentionToRevoke', type: 'IntentionToRevoke' },\n  ],\n};\n\nexport const typedMessage = {\n  primaryType: 'Delegation',\n  domain: {\n    name: 'NotaryServiceDelegatable',\n    version: '1',\n  },\n\n  entries: {\n    delegate: 'address',\n    caveat: 'Caveat',\n    authority: 'SignedDelegation',\n  },\n};\n\nexport default {\n  domain,\n  types,\n  typedMessage,\n};\n","import { domain, types } from './types';\n\nexport function createDelegation(to: string, verifyingContract: string) {\n  const delegation = {\n    delegate: to,\n    authority:\n      '0x0000000000000000000000000000000000000000000000000000000000000000',\n    caveats: [],\n  };\n\n  const delegationString = JSON.stringify({\n    domain: { ...domain, verifyingContract: verifyingContract },\n    message: delegation,\n    primaryType: 'Delegation',\n    types: types,\n  });\n  return {\n    delegation,\n    string: delegationString,\n  };\n}\n","import { domain, types } from './types';\n\nexport function createIntention(\n  delegation: any,\n  signedDelegation: any,\n  verifyingContract: string,\n  tx: string\n) {\n  const intention = {\n    replayProtection: {\n      nonce: '0x01',\n      queue: '0x00',\n    },\n    batch: [\n      {\n        authority: [\n          {\n            delegation: delegation,\n            signature: signedDelegation,\n          },\n        ],\n        transaction: {\n          to: verifyingContract,\n          gasLimit: '10000000000000000',\n          data: tx,\n        },\n      },\n    ],\n  };\n\n  const intentionString = JSON.stringify({\n    domain: { ...domain, verifyingContract: verifyingContract },\n    message: intention,\n    primaryType: 'Invocations',\n    types: types,\n  });\n\n  return {\n    intention: intention,\n    string: intentionString,\n  };\n}\n","import * as React from 'react';\nimport { useForm } from 'react-hook-form';\nimport classNames from 'classnames';\nimport { useNotaryServiceDelegatableContract } from '../hooks/useNotaryServiceDelegatableContract';\nimport { useSigner } from 'wagmi';\nimport { createDelegation } from '../utils/createDelegation';\nimport { createIntention } from '../utils/createIntention';\n// @ts-ignore\nconst { recoverDelegationSigner } = require('eth-delegatable-utils');\n\ninterface NotaryServiceDelegatableFormClaimDelegateProps {\n  className?: string;\n  label: string;\n  onUpdate?: Function;\n  defaults?: any;\n  contractAddress: string;\n}\nexport const NotaryServiceDelegatableFormClaimDelegate = ({\n  className,\n  label,\n  onUpdate,\n  contractAddress,\n}: NotaryServiceDelegatableFormClaimDelegateProps) => {\n  const classes_ = classNames(\n    className,\n    'NotaryServiceDelegatableFormClaimDelegate'\n  );\n  const signer = useSigner();\n  const {\n    register,\n    handleSubmit,\n    formState: {},\n  } = useForm({\n    defaultValues: {\n      to: '',\n    },\n  });\n  //   const watchAllFields = watch();\n  const contract = useNotaryServiceDelegatableContract(contractAddress);\n\n  //   useLogError(error);\n  const [signatures, setSignatures] = React.useState<any>();\n  const onSubmit = (_data: any) => {\n    (async () => {\n      const method = 'eth_signTypedData_v4';\n      const txPopulated = await contract.populateTransaction.issue(_data.to);\n      const me = await signer.data?.getAddress();\n      const delegation = createDelegation(_data.to, contractAddress);\n      // @ts-ignore\n      const signedDelegation1 = await signer.data?.provider?.send(method, [\n        me,\n        delegation.string,\n      ]);\n      const intention = createIntention(\n        delegation.delegation,\n        signedDelegation1,\n        contractAddress,\n        txPopulated.data\n      );\n      // @ts-ignore\n      const signedDelegation2 = await signer.data?.provider.send(method, [\n        me,\n        intention.string,\n      ]);\n      setSignatures({\n        delegation: signedDelegation1,\n        invocation: signedDelegation2,\n      });\n    })();\n    if (onUpdate) onUpdate(_data);\n  };\n\n  return (\n    <div className={classes_}>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <input\n          className=\"input\"\n          placeholder=\"weboftrust.eth\"\n          {...register('to', { required: true })}\n        />\n        <button className=\"btn btn-default my-3 w-full\" type=\"submit\">\n          {label}\n        </button>\n      </form>\n      {signatures && (\n        <div className=\"text-sm\">\n          <span className=\"block break-all\">\n            Delegation: <br /> {signatures.delegation}\n          </span>\n          <span className=\"block break-all\">\n            Invocation: <br /> {signatures.invocation}\n          </span>\n        </div>\n      )}\n    </div>\n  );\n};\n\nNotaryServiceDelegatableFormClaimDelegate.defaultProps = {\n  label: 'Sign Delegation & Invocations',\n};\n\nexport default NotaryServiceDelegatableFormClaimDelegate;\n","import * as React from 'react';\nimport { useForm } from 'react-hook-form';\nimport classNames from 'classnames';\nimport useNotaryServiceDelegatableWrite from '../hooks/useNotaryServiceDelegatableWrite';\nimport { useAccount } from 'wagmi';\n\ninterface NotaryServiceDelegatableFormClaimInvocationProps {\n  className?: string;\n  label: string;\n  onUpdate?: Function;\n  defaults?: any;\n  contractAddress: string;\n}\nexport const NotaryServiceDelegatableFormClaimInvocation = ({\n  className,\n  label,\n  onUpdate,\n  contractAddress,\n}: NotaryServiceDelegatableFormClaimInvocationProps) => {\n  const classes_ = classNames(\n    className,\n    'NotaryServiceDelegatableFormClaimInvocation'\n  );\n\n  const account = useAccount();\n\n  const {\n    watch,\n    register,\n    handleSubmit,\n    formState: {},\n  } = useForm({\n    defaultValues: {\n      delegation: '',\n      invocation: '',\n    },\n  });\n  const watchAllFields = watch();\n  const { write } = useNotaryServiceDelegatableWrite(\n    contractAddress,\n    'invoke',\n    [\n      [\n        {\n          invocations: {\n            replayProtection: {\n              nonce: '0x01',\n              queue: '0x00',\n            },\n            batch: [\n              {\n                authority: [\n                  {\n                    delegation: {\n                      delegate: account.data?.address,\n                      authority:\n                        '0x0000000000000000000000000000000000000000000000000000000000000000',\n                      caveats: [],\n                    },\n                    signature: watchAllFields.delegation,\n                  },\n                ],\n                transaction: {\n                  to: contractAddress,\n                  gasLimit: '10000000000000000',\n                  data: `0x71e928af000000000000000000000000${account.data?.address?.substring(\n                    2\n                  )}`,\n                },\n              },\n            ],\n          },\n          signature: watchAllFields?.invocation,\n        },\n      ],\n    ]\n  );\n\n  const onSubmit = (_data: any) => {\n    write();\n    if (onUpdate) onUpdate(_data);\n  };\n\n  return (\n    <div className={classes_}>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <label className=\"text-sm font-semibold my-2\">Delegation</label>\n        <input\n          className=\"input\"\n          placeholder=\"0x0\"\n          {...register('delegation', { required: true })}\n        />\n        <label className=\"text-sm font-semibold my-2\">Invocation</label>\n        <input\n          className=\"input\"\n          placeholder=\"0x0\"\n          {...register('invocation', { required: true })}\n        />\n        <button className=\"btn btn-default my-3 w-full\" type=\"submit\">\n          {label}\n        </button>\n      </form>\n    </div>\n  );\n};\n\nNotaryServiceDelegatableFormClaimInvocation.defaultProps = {\n  label: 'Claim Citizenship',\n};\n\nexport default NotaryServiceDelegatableFormClaimInvocation;\n","import { useContractWrite } from 'wagmi';\nimport TrustToken from '@web3-citizen/core-sol/abis/contracts/experiments/TrustToken.sol/TrustToken.json';\n\nexport function useTrustTokenWrite(\n  address: string,\n  method: string,\n  args: any[]\n): any {\n  return useContractWrite(\n    {\n      addressOrName: address,\n      contractInterface: TrustToken,\n    },\n    method,\n    {\n      args: args,\n    }\n  );\n}\n\nexport default useTrustTokenWrite;\n","import * as React from 'react';\nimport classNames from 'classnames';\nimport useCitizenAlphaContractRead from '../hooks/useCitizenAlphaRead';\nimport { Address } from '@turbo-eth/core-wagmi';\ninterface CitizenLinkProps {\n  className?: string;\n  contractAddress: string;\n  address?: string;\n}\n\nexport const CitizenLink = ({\n  className,\n  contractAddress,\n  address,\n}: CitizenLinkProps) => {\n  const classes = classNames(className, 'CitizenLink');\n  const { data, isError, isLoading } = useCitizenAlphaContractRead(\n    contractAddress,\n    'getLink',\n    [address]\n  );\n  if (isError || isLoading) return null;\n  return <Address className={classes} address={data} truncate />;\n};\n\nexport default CitizenLink;\n","import * as React from 'react';\nimport { useForm } from 'react-hook-form';\nimport classNames from 'classnames';\nimport InputWithLabel from '../InputWithLabel';\nimport {\n  useResolverContractWrite,\n  useResolverContract,\n} from '@turbo-eth/ens-wagmi';\n// import { useEnsResolver } from 'wagmi'\ninterface FormCitizenEnsUpdateProps {\n  className?: string;\n  onUpdate?: Function;\n  defaults?: any;\n  contractAddress: string;\n  ensNode: string;\n  defaultValues?: any;\n}\n\nexport const FormCitizenEnsUpdate = ({\n  className,\n  onUpdate,\n  contractAddress,\n  ensNode,\n  defaultValues = {\n    url: '',\n    description: '',\n    did: '',\n    ['com.twitter']: '',\n    ['com.github']: '',\n  },\n}: FormCitizenEnsUpdateProps) => {\n  const styleForm = classNames(className, 'FormCitizenEnsUpdate');\n\n  const {\n    register,\n    handleSubmit,\n    watch,\n    formState: {},\n  } = useForm({\n    defaultValues: defaultValues,\n  });\n  const watchAllFields = watch();\n  const contractResolver = useResolverContract(contractAddress);\n  const [inputs, setInputs] = React.useState<any>();\n  const { write } = useResolverContractWrite(contractAddress, 'multicall', [\n    inputs,\n  ]);\n\n  const onSubmit = async (_data: any) => {\n    const url_ = await contractResolver.populateTransaction.setText(\n      ensNode,\n      'url',\n      watchAllFields.description\n    );\n    const avatar_ = await contractResolver.populateTransaction.setText(\n      ensNode,\n      'avatar',\n      watchAllFields.description\n    );\n    const did_ = await contractResolver.populateTransaction.setText(\n      ensNode,\n      'did',\n      watchAllFields.description\n    );\n    const description_ = await contractResolver.populateTransaction.setText(\n      ensNode,\n      'description',\n      watchAllFields.description\n    );\n    setInputs([url_.data, avatar_.data, did_.data, description_.data]);\n    if (onUpdate) onUpdate(_data);\n  };\n\n  React.useEffect(() => {\n    if (inputs) {\n      write();\n    }\n  }, [inputs]);\n\n  return (\n    <div className={styleForm}>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <div className=\"mb-4\">\n          <InputWithLabel\n            name=\"url\"\n            label=\"URL\"\n            placeholder=\"www.site.me\"\n            register={register}\n          />\n          <InputWithLabel\n            name=\"avatar\"\n            label=\"Avatar\"\n            placeholder=\"ipfs://\"\n            register={register}\n          />\n          <InputWithLabel\n            name=\"did\"\n            label=\"Decentralized Identifier (DID)\"\n            placeholder=\"did:eth:0x000...000\"\n            register={register}\n          />\n          <InputWithLabel\n            name=\"description\"\n            label=\"Description\"\n            placeholder=\"I am...\"\n            register={register}\n          />\n          <InputWithLabel\n            name=\"com.twitter\"\n            label=\"Twitter\"\n            placeholder=\"\"\n            register={register}\n          />\n          <InputWithLabel\n            name=\"com.github\"\n            label=\"Github\"\n            placeholder=\"\"\n            register={register}\n          />\n          <InputWithLabel\n            name=\"notice\"\n            label=\"Notice\"\n            placeholder=\"\"\n            register={register}\n          />\n        </div>\n        <button className=\"btn btn-blue btn-sm w-full mt-6\" type=\"submit\">\n          Update\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default FormCitizenEnsUpdate;\n","import * as React from 'react';\nimport { useForm } from 'react-hook-form';\nimport classNames from 'classnames';\nimport { useNationWrite } from '../hooks/useNationWrite';\nimport InputWithLabel from '../InputWithLabel';\n\ninterface FormCitizenRevokeProps {\n  className?: string;\n  onUpdate?: Function;\n  defaults?: any;\n  contractAddress: string;\n}\n\nexport const FormCitizenRevoke = ({\n  className,\n  onUpdate,\n  contractAddress,\n}: FormCitizenRevokeProps) => {\n  const styleForm = classNames(className, 'FormCitizenRevoke');\n\n  const {\n    register,\n    handleSubmit,\n    watch,\n    formState: {},\n  } = useForm({\n    defaultValues: {\n      from: '',\n    },\n  });\n  const watchAllFields = watch();\n  const { write } = useNationWrite(contractAddress, 'revoke', [\n    watchAllFields?.from,\n  ]);\n  const onSubmit = (_data: any) => {\n    write();\n    if (onUpdate) onUpdate(_data);\n  };\n\n  return (\n    <div className={styleForm}>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <div className=\"mt-4\">\n          <InputWithLabel\n            name=\"from\"\n            label=\"Citizen\"\n            placeholder=\"vitalik.eth\"\n            register={register}\n          />\n        </div>\n        <button className=\"btn btn-default my-3 w-full\" type=\"submit\">\n          Revoke Citizenship\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default FormCitizenRevoke;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { useNationRead } from '../hooks/useNationRead';\n\ninterface NationHasRoleProps {\n  className?: string;\n  contractAddress?: string;\n  userAddress?: string;\n  role?: string;\n}\n\nexport const NationHasRole = ({\n  className,\n  contractAddress,\n  userAddress,\n  role,\n}: NationHasRoleProps) => {\n  const containerClassName = classNames(className, 'NationHasRole');\n\n  const { data, isError } = useNationRead(contractAddress || '', 'hasRole', [\n    role,\n    userAddress,\n  ]);\n\n  if (isError) return null;\n\n  return <div className={containerClassName}>{data}</div>;\n};\n\nexport default NationHasRole;\n","import * as React from 'react';\nimport classNames from 'classnames';\nimport useTrustTokenContractWrite from '../hooks/useTrustTokenWrite';\n\ninterface TrustTokenClaimProps {\n  className?: string;\n  contractAddress: string;\n  address?: string;\n}\n\nexport const TrustTokenClaim = ({\n  className,\n  contractAddress,\n}: TrustTokenClaimProps) => {\n  const classes = classNames(className, 'TrustTokenClaim');\n  const { write } = useTrustTokenContractWrite(contractAddress, 'claim', []);\n  return (\n    <span onClick={write} className={classes}>\n      Claim PGP.alpha\n    </span>\n  );\n};\n\nexport default TrustTokenClaim;\n","import { useContractWrite } from 'wagmi';\nimport CitizenAlpha from '@web3-citizen/core-sol/abis/contracts/CitizenAlpha.sol/CitizenAlpha.json';\n\nexport function useCitizenAlphaWrite(\n  address: string,\n  method: string,\n  args: any[]\n): any {\n  return useContractWrite(\n    {\n      addressOrName: address,\n      contractInterface: CitizenAlpha,\n    },\n    method,\n    {\n      args: args,\n    }\n  );\n}\n\nexport default useCitizenAlphaWrite;\n","import { useContractRead, useProvider } from 'wagmi';\nimport CitizenAlpha from '@web3-citizen/core-sol/abis/contracts/CitizenAlpha.sol/CitizenAlpha.json';\nimport { useEffect, useState } from 'react';\nimport { parseAvatarString } from '@turbo-eth/ens-wagmi';\n\nexport function useCitizenGetMetadata(\n  address: string,\n  walletAddress: string,\n  tokenId: string | number\n): any {\n  const provider = useProvider();\n  const { data } = useContractRead(\n    {\n      addressOrName: address,\n      contractInterface: CitizenAlpha,\n    },\n    'tokenURI',\n    {\n      args: [tokenId],\n    }\n  );\n\n  const [citizenData, setCitizenData] = useState<{\n    image: string;\n    name: string;\n    description: string;\n    traits: {\n      [key: string]: string;\n    };\n    attributes: Array<{\n      value: string;\n    }>;\n  }>();\n\n  useEffect(() => {\n    if (data) {\n      (async () => {\n        const json = Buffer.from(data.substring(29), 'base64').toString();\n        const result = JSON.parse(json);\n        if (result.image) {\n          result.img = await parseAvatarString(\n            walletAddress,\n            result.image,\n            provider\n          );\n        }\n        result.traits = {};\n        result.attributes.forEach((element: any) => {\n          result.traits = {\n            ...result.traits,\n            [element.trait_type]: element.value,\n          };\n        });\n        setCitizenData(result);\n      })();\n    }\n  }, [data]);\n\n  return citizenData;\n}\n\nexport default useCitizenGetMetadata;\n","import { useContract } from 'wagmi';\nimport Nation from '@web3-citizen/core-sol/abis/contracts/Nation/Nation.sol/Nation.json';\n\nexport function useNationContract(address: string): any {\n  return useContract({\n    addressOrName: address,\n    contractInterface: Nation,\n  });\n}\n\nexport default useNationContract;\n","import { useContract } from 'wagmi';\nimport Notary from '@web3-citizen/core-sol/abis/contracts/Notary/Notary.sol/Notary.json';\n\nexport function useNotaryContract(address: string): any {\n  return useContract({\n    addressOrName: address,\n    contractInterface: Notary,\n  });\n}\n\nexport default useNotaryContract;\n","import { useContractRead } from 'wagmi';\nimport NotaryServiceDelegatable from '@web3-citizen/core-sol/abis/contracts/Notary/NotaryServiceDelegatable.sol/NotaryServiceDelegatable.json';\n\nexport function useNotaryServiceDelegatableRead(\n  address: string,\n  method: string,\n  args: any[]\n): any {\n  return useContractRead(\n    {\n      addressOrName: address,\n      contractInterface: NotaryServiceDelegatable,\n    },\n    method,\n    {\n      args: args,\n    }\n  );\n}\n\nexport default useNotaryServiceDelegatableRead;\n","import { useContract } from 'wagmi';\nimport TrustToken from '@web3-citizen/core-sol/abis/contracts/experiments/TrustToken.sol/TrustToken.json';\n\nexport function useTrustTokenContract(address: string): any {\n  return useContract({\n    addressOrName: address,\n    contractInterface: TrustToken,\n  });\n}\n\nexport default useTrustTokenContract;\n","import { useContractRead } from 'wagmi';\nimport TrustToken from '@web3-citizen/core-sol/abis/contracts/experiments/TrustToken.sol/TrustToken.json';\n\nexport function useTrustTokenRead(\n  address: string,\n  method: string,\n  args: any[]\n): any {\n  return useContractRead(\n    {\n      addressOrName: address,\n      contractInterface: TrustToken,\n    },\n    method,\n    {\n      args: args,\n    }\n  );\n}\n\nexport default useTrustTokenRead;\n"],"names":["css","ref","insertAt","document","head","getElementsByTagName","style","createElement","type","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","NOTARY","utils","keccak256","toUtf8Bytes","FOUNDER","TREASURY","LABS","lookup","reverseLookup","0x0000000000000000000000000000000000000000000000000000000000000000","constants","useCitizenAlphaRead","address","method","args","useContractRead","addressOrName","contractInterface","CitizenAlpha","InputWithLabel","name","label","register","required","placeholder","containerClassName","classNames","className","React","useNotaryWrite","useContractWrite","Notary","useLogError","error","useEffect","useLogTransactionWrite","data","FormCitizenIssue","onUpdate","contractAddress","styleForm","useForm","defaultValues","to","handleSubmit","watch","_objectDestructuringEmpty","formState","watchAllFields","write","onSubmit","_data","useNationWrite","Nation","defaultProps","NationFormDisableRole","classes_","role","NationFormEnableRole","adminRole","InputWithSideLabel","NationFormHasRole","citizen","NationFormRoleGrant","NationFormRoleRevoke","useNationRead","NationRoleAdminRole","classNameLabel","labelActive","isError","useState","roleReverseLookup","setRoleReverseLookup","NationFormIsFounder","NationRoleStatus","roleActive","labelTrue","labelFalse","NationIsFounder","userAddress","useNotaryRead","NotaryIsNotary","NotaryFormIsNotary","NotaryFormGrantPermissions","NotaryFormRevokePermissions","useNotaryServiceDelegatableWrite","NotaryServiceDelegatable","NotaryServiceDelegatableFormClaim","useNotaryServiceDelegatableContract","useContract","domain","version","chainId","types","EIP712Domain","Invocation","Invocations","SignedInvocation","Transaction","ReplayProtection","Delegation","Caveat","SignedDelegation","IntentionToRevoke","SignedIntentionToRevoke","createDelegation","verifyingContract","delegation","delegate","authority","caveats","string","JSON","stringify","message","primaryType","createIntention","signedDelegation","tx","intention","replayProtection","nonce","queue","batch","signature","transaction","gasLimit","NotaryServiceDelegatableFormClaimDelegate","signer","useSigner","contract","signatures","setSignatures","_asyncToGenerator","_context","populateTransaction","issue","txPopulated","_signer$data","getAddress","me","_signer$data2","provider","_signer$data2$provide","send","signedDelegation1","_signer$data3","invocation","NotaryServiceDelegatableFormClaimInvocation","account","useAccount","invocations","_account$data","_account$data2","_account$data2$addres","substring","useTrustTokenWrite","TrustToken","classes","useCitizenAlphaContractRead","isLoading","Address","truncate","ensNode","url","description","did","contractResolver","useResolverContract","inputs","setInputs","useResolverContractWrite","setText","url_","avatar_","did_","from","useTrustTokenContractWrite","onClick","walletAddress","tokenId","useProvider","citizenData","setCitizenData","json","Buffer","toString","result","parse","image","parseAvatarString","img","traits","attributes","forEach","element","trait_type","value"],"mappings":"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"}