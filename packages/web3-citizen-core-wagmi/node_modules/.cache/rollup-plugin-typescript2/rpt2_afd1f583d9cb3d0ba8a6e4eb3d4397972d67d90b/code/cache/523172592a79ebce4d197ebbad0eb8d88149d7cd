{"code":"import * as React from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport classNames from 'classnames';\r\nimport useNotaryServiceDelegatableWrite from '../hooks/useNotaryServiceDelegatableWrite';\r\nimport { useAccount } from 'wagmi';\r\nexport const NotaryServiceDelegatableFormClaimInvocation = ({ className, label, onUpdate, contractAddress, }) => {\r\n    const classes_ = classNames(className, 'NotaryServiceDelegatableFormClaimInvocation');\r\n    const account = useAccount();\r\n    const { watch, register, handleSubmit, formState: {}, } = useForm({\r\n        defaultValues: {\r\n            delegation: '',\r\n            invocation: '',\r\n        },\r\n    });\r\n    const watchAllFields = watch();\r\n    const { data, error, write } = useNotaryServiceDelegatableWrite(contractAddress, 'invoke', [\r\n        [\r\n            {\r\n                invocations: {\r\n                    replayProtection: {\r\n                        nonce: '0x01',\r\n                        queue: '0x00',\r\n                    },\r\n                    batch: [\r\n                        {\r\n                            authority: [\r\n                                {\r\n                                    delegation: {\r\n                                        delegate: account.data?.address,\r\n                                        authority: '0x0000000000000000000000000000000000000000000000000000000000000000',\r\n                                        caveats: [],\r\n                                    },\r\n                                    signature: watchAllFields.delegation\r\n                                },\r\n                            ],\r\n                            transaction: {\r\n                                to: contractAddress,\r\n                                gasLimit: '10000000000000000',\r\n                                data: `0x71e928af000000000000000000000000${account.data?.address?.substring(2)}`,\r\n                            },\r\n                        },\r\n                    ],\r\n                },\r\n                signature: watchAllFields?.invocation,\r\n            },\r\n        ],\r\n    ]);\r\n    React.useEffect(() => {\r\n        console.log({\r\n            invocations: {\r\n                replayProtection: {\r\n                    nonce: '0x01',\r\n                    queue: '0x00',\r\n                },\r\n                batch: [\r\n                    {\r\n                        authority: [\r\n                            {\r\n                                delegation: {\r\n                                    delegate: account.data?.address,\r\n                                    authority: '0x0000000000000000000000000000000000000000000000000000000000000000',\r\n                                    caveats: [],\r\n                                },\r\n                                signature: watchAllFields.delegation\r\n                            },\r\n                        ],\r\n                        transaction: {\r\n                            to: contractAddress,\r\n                            gasLimit: '10000000000000000',\r\n                            data: `0x71e928af000000000000000000000000${account.data?.address?.substring(2)}`,\r\n                        },\r\n                    },\r\n                ],\r\n            },\r\n            signature: watchAllFields?.invocation,\r\n        });\r\n    }, [data, error]);\r\n    const onSubmit = (_data) => {\r\n        write();\r\n        if (onUpdate)\r\n            onUpdate(_data);\r\n    };\r\n    return (React.createElement(\"div\", { className: classes_ },\r\n        React.createElement(\"form\", { onSubmit: handleSubmit(onSubmit) },\r\n            React.createElement(\"label\", { className: 'text-sm font-semibold my-2' }, \"Delegation\"),\r\n            React.createElement(\"input\", Object.assign({ className: \"input\", placeholder: \"0x0\" }, register('delegation', { required: true }))),\r\n            React.createElement(\"label\", { className: 'text-sm font-semibold my-2' }, \"Invocation\"),\r\n            React.createElement(\"input\", Object.assign({ className: \"input\", placeholder: \"0x0\" }, register('invocation', { required: true }))),\r\n            React.createElement(\"button\", { className: \"btn btn-default my-3 w-full\", type: \"submit\" }, label))));\r\n};\r\nNotaryServiceDelegatableFormClaimInvocation.defaultProps = {\r\n    label: 'Claim Citizenship',\r\n};\r\nexport default NotaryServiceDelegatableFormClaimInvocation;\r\n//# sourceMappingURL=NotaryServiceDelegatableFormClaimInvocation.js.map","references":["/Users/kames/workspace/soulcialites/web3-citizen/node_modules/.pnpm/@types+react@18.0.14/node_modules/@types/react/index.d.ts","/Users/kames/workspace/soulcialites/web3-citizen/node_modules/.pnpm/react-hook-form@7.32.2_react@18.2.0/node_modules/react-hook-form/dist/index.d.ts","/Users/kames/workspace/soulcialites/web3-citizen/node_modules/.pnpm/classnames@2.3.1/node_modules/classnames/index.d.ts","/Users/kames/workspace/soulcialites/web3-citizen/packages/web3-citizen-core-wagmi/src/hooks/useNotaryServiceDelegatableWrite.tsx","/Users/kames/workspace/soulcialites/web3-citizen/node_modules/.pnpm/wagmi@0.4.12_2pvqx3wni2imkaucnfdtyrjuiq/node_modules/wagmi/dist/wagmi.cjs.d.ts"],"map":"{\"version\":3,\"file\":\"NotaryServiceDelegatableFormClaimInvocation.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/NotaryServiceDelegatable/NotaryServiceDelegatableFormClaimInvocation.tsx\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/kames/workspace/soulcialites/web3-citizen/packages/web3-citizen-core-wagmi/NotaryServiceDelegatable/NotaryServiceDelegatableFormClaimInvocation.d.ts","writeByteOrderMark":false,"text":"/// <reference types=\"react\" />\r\ninterface NotaryServiceDelegatableFormClaimInvocationProps {\r\n    className?: string;\r\n    label: string;\r\n    onUpdate?: Function;\r\n    defaults?: any;\r\n    contractAddress: string;\r\n}\r\nexport declare const NotaryServiceDelegatableFormClaimInvocation: {\r\n    ({ className, label, onUpdate, contractAddress, }: NotaryServiceDelegatableFormClaimInvocationProps): JSX.Element;\r\n    defaultProps: {\r\n        label: string;\r\n    };\r\n};\r\nexport default NotaryServiceDelegatableFormClaimInvocation;\r\n"}}
