{"version":3,"file":"core-wagmi.cjs.production.min.js","sources":["../src/utils/truncateAddress.ts","../src/Address.tsx","../src/IsWalletConnected.tsx","../src/Balance.tsx","../src/BlockNumber.tsx","../src/EnsAddress.tsx","../src/EnsName.tsx","../src/IpfsUriImageBackgroundRender.tsx","../src/IpfsUriImageRender.tsx","../src/WalletAddress.tsx","../src/WalletBalance.tsx","../src/WalletEnsAddress.tsx","../src/WalletEnsName.tsx","../src/WalletNonce.tsx"],"sourcesContent":["// Captures 0x + 4 characters, then the last 4 characters.\nconst truncateRegex = /^(0x[a-zA-Z0-9]{4})[a-zA-Z0-9]+([a-zA-Z0-9]{4})$/;\n\n/**\n * Truncates an ethereum address to the format 0x0000…0000\n * @param address Full address to truncate\n * @returns Truncated address\n */\nconst truncateAddress = (address: string) => {\n  const match = address.match(truncateRegex);\n  if (!match) return address;\n  return `${match[1]}…${match[2]}`;\n};\n\nexport default truncateAddress;\n","import * as React from 'react';\nimport classNames from 'classnames';\nimport truncateAddress from './utils/truncateAddress';\n\ninterface AddressProps {\n  className?: string;\n  address?: string;\n  truncate?: boolean;\n  length?: number;\n}\n\nexport const Address = ({\n  className,\n  truncate,\n  address = '0x00',\n}: AddressProps) => {\n  const classes = classNames(className, 'Address');\n\n  if (truncate) {\n    return <span className={classes}>{truncateAddress(address)}</span>;\n  }\n\n  return <span className={classes}>{address}</span>;\n};\n\nexport default Address;\n","import * as React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { useConnect } from 'wagmi';\n\ninterface IsWalletConnectedProps {\n  children: React.ReactNode;\n  loading: React.ReactNode;\n  enableButton: boolean;\n}\n\nexport const IsWalletConnected = ({\n  children,\n  loading,\n}: IsWalletConnectedProps) => {\n  const { isConnected } = useConnect();\n  if (!isConnected) return loading;\n  return children;\n};\n\nIsWalletConnected.defaultProps = {\n  loading: null,\n};\n\nIsWalletConnected.propTypes = {\n  loading: PropTypes.func,\n};\n\nexport default IsWalletConnected;\n","import * as React from 'react';\nimport classNames from 'classnames';\nimport { useBalance } from 'wagmi';\n\ninterface BalanceProps {\n  className?: string;\n  address?: string;\n}\n\nexport const Balance = ({ className, address }: BalanceProps) => {\n  const classes = classNames(className, 'Balance');\n  const {\n    data: dataBalance,\n    isLoading,\n    isError,\n  } = useBalance({\n    addressOrName: address,\n  });\n\n  if (isLoading || isError) return null;\n  return (\n    <div className={classes}>\n      {dataBalance?.formatted} {dataBalance?.symbol}\n    </div>\n  );\n};\n\nexport default Balance;\n","import * as React from 'react';\nimport classNames from 'classnames';\nimport { useBlockNumber } from 'wagmi';\n\ninterface BlockNumberProps {\n  className?: string;\n}\n\nexport const BlockNumber = ({ className }: BlockNumberProps) => {\n  const classes = classNames(className, 'BlockNumber');\n  const { data, isError, isLoading } = useBlockNumber();\n\n  if (isLoading || isError) return null;\n  return <div className={classes}>{data}</div>;\n};\n\nexport default BlockNumber;\n","import * as React from 'react';\nimport classNames from 'classnames';\nimport { useEnsAddress } from 'wagmi';\n\ninterface EnsAddressProps {\n  className?: string;\n  name?: string;\n}\n\nexport const EnsAddress = ({ className, name }: EnsAddressProps) => {\n  const classes = classNames(className, 'EnsAddress');\n  const { data, isError, isLoading } = useEnsAddress({\n    name: name,\n  });\n\n  if (isLoading || isError) return null;\n  return <div className={classes}>{data}</div>;\n};\n\nexport default EnsAddress;\n","import * as React from 'react';\nimport classNames from 'classnames';\nimport { useEnsName } from 'wagmi';\nimport Address from './Address';\n\ninterface EnsNameProps {\n  className?: string;\n  address?: string;\n}\n\nexport const EnsName = ({ className, address }: EnsNameProps) => {\n  const classes = classNames(className, 'EnsName');\n  const { data, error, isError, isLoading } = useEnsName({\n    address: address,\n  });\n\n  console.log(data, error, isLoading, isError);\n\n  if (isLoading) return null;\n  if (isError || !isLoading)\n    return <Address truncate address={address} className={classes} />;\n  return <div className={classes}>{data}</div>;\n};\n\nexport default EnsName;\n","/* eslint-disable @next/next/no-img-element */\n//@ts-nocheck\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { toLink, toURL } from 'to-ipfs-url';\n\ninterface IpfsUriImageBackgroundRenderProps {\n  className?: string;\n  uri: string;\n  alt?: string;\n}\n\nexport const IpfsUriImageBackgroundRender = ({\n  className,\n  uri,\n  alt = '',\n}: IpfsUriImageBackgroundRenderProps) => {\n  const classes = classNames(className, 'IpfsUriImageBackgroundRender');\n\n  const [imgSrc, setImageSrc] = React.useState<any>('');\n  React.useEffect(() => {\n    if (uri) {\n      setImageSrc(uri.replace('ipfs://', 'https://ipfs.io/ipfs/'));\n    }\n  }, [uri]);\n  return (\n    <div className={classes} style={{ position: 'relative' }}>\n      <div\n        style={{\n          backgroundImage: `url(${imgSrc})`,\n          backgroundPosition: 'center center',\n          backgroundSize: 'cover',\n          position: 'absolute',\n          top: 0,\n          bottom: 0,\n          width: '100%',\n        }}\n      />\n    </div>\n  );\n};\n\nexport default IpfsUriImageBackgroundRender;\n","//@ts-nocheck\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { toLink, toURL } from 'to-ipfs-url';\n\ninterface IpfsUriImageRenderProps {\n  className?: string;\n  uri: string;\n  alt?: string;\n}\n\nexport const IpfsUriImageRender = ({\n  className,\n  uri,\n  alt = '',\n}: IpfsUriImageRenderProps) => {\n  const classes = classNames(className, 'IpfsUriImageRender');\n\n  const [imgSrc, setImageSrc] = React.useState<any>('');\n  React.useEffect(() => {\n    if (uri) {\n      setImageSrc(uri.replace('ipfs://', 'https://ipfs.io/ipfs/'));\n    }\n  }, [uri]);\n  return (\n    // eslint-disable-next-line @next/next/no-img-element\n    <img className={classes} src={imgSrc} alt={alt} />\n  );\n};\n\nexport default IpfsUriImageRender;\n","import * as React from 'react';\nimport classNames from 'classnames';\nimport { useAccount } from 'wagmi';\n\ninterface WalletAddressProps {\n  className?: string;\n}\n\nexport const WalletAddress = ({ className }: WalletAddressProps) => {\n  const classes = classNames(className, 'WalletAddress');\n  const { data, isError, isLoading } = useAccount();\n\n  if (isLoading || isError) return null;\n  return <div className={classes}>{data?.address}</div>;\n};\n\nexport default WalletAddress;\n","import * as React from 'react';\nimport classNames from 'classnames';\nimport { useAccount, useBalance } from 'wagmi';\n\ninterface WalletBalanceProps {\n  className?: string;\n}\n\nexport const WalletBalance = ({ className }: WalletBalanceProps) => {\n  const classes = classNames(className, 'WalletBalance');\n  const { data, isError, isLoading } = useAccount();\n  const { data: dataBalance } = useBalance({\n    addressOrName: data?.address,\n  });\n\n  if (isLoading || isError) return null;\n  return (\n    <div className={classes}>\n      {dataBalance?.formatted} {dataBalance?.symbol}\n    </div>\n  );\n};\n\nexport default WalletBalance;\n","import * as React from 'react';\nimport classNames from 'classnames';\nimport { useAccount, useEnsName } from 'wagmi';\n\ninterface WalletEnsAddressProps {\n  className?: string;\n}\n\nexport const WalletEnsAddress = ({ className }: WalletEnsAddressProps) => {\n  const classes = classNames(className, 'WalletEnsAddress');\n  const { data, isError, isLoading } = useAccount();\n  const { data: dataEnsAddress } = useEnsName({\n    address: data?.address,\n  });\n\n  if (isLoading || isError) return null;\n  return <div className={classes}>{dataEnsAddress}</div>;\n};\n\nexport default WalletEnsAddress;\n","import * as React from 'react';\nimport classNames from 'classnames';\nimport { useAccount, useEnsName } from 'wagmi';\n\ninterface WalletEnsNameProps {\n  className?: string;\n}\n\nexport const WalletEnsName = ({ className }: WalletEnsNameProps) => {\n  const classes = classNames(className, 'WalletEnsName');\n  const { data, isError, isLoading } = useAccount();\n  const { data: dataEnsName } = useEnsName({\n    address: data?.address,\n  });\n\n  if (isLoading || isError) return null;\n  return <div className={classes}>{dataEnsName}</div>;\n};\n\nexport default WalletEnsName;\n","import * as React from 'react';\nimport classNames from 'classnames';\nimport { useSigner } from 'wagmi';\n\ninterface WalletNonceProps {\n  className?: string;\n}\n\nexport const WalletNonce = ({ className }: WalletNonceProps) => {\n  const classes = classNames(className, 'WalletNonce');\n  const { data: signer, isLoading, isError } = useSigner();\n  const [nonce, setNonce] = React.useState<number>();\n  React.useEffect(() => {\n    (async () => {\n      if (signer) {\n        const nonce = await signer.getTransactionCount();\n        setNonce(nonce);\n      }\n    })();\n  }, [isLoading, signer]);\n\n  if (isLoading || isError) return null;\n  return <div className={classes}>{nonce}</div>;\n};\n\nexport default WalletNonce;\n"],"names":["truncateRegex","Address","truncate","address","classes","classNames","className","React","match","truncateAddress","IsWalletConnected","children","loading","useConnect","isConnected","defaultProps","propTypes","PropTypes","func","useBalance","addressOrName","dataBalance","data","isLoading","isError","formatted","symbol","useBlockNumber","name","useEnsAddress","useEnsName","console","log","error","uri","imgSrc","setImageSrc","replace","style","position","backgroundImage","backgroundPosition","backgroundSize","top","bottom","width","alt","src","useAccount","useSigner","signer","nonce","setNonce","_context","getTransactionCount"],"mappings":"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"}