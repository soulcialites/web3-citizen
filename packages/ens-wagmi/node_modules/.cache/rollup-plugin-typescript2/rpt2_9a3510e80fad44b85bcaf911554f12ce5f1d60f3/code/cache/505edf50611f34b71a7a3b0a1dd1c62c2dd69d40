{"code":"import { fetch, resolveURI } from '../utils';\r\nexport default class URI {\r\n    async getMetadata(uri) {\r\n        const { uri: resolvedURI, isOnChain } = resolveURI(uri);\r\n        if (isOnChain) {\r\n            return { image: resolvedURI };\r\n        }\r\n        // check if resolvedURI is an image, if it is return the url\r\n        const isImage = await isImageURI(resolvedURI);\r\n        if (isImage) {\r\n            return { image: resolvedURI };\r\n        }\r\n        // if resolvedURI is not an image, try retrieve the data.\r\n        const response = await fetch(resolvedURI);\r\n        return { image: response?.data };\r\n    }\r\n}\r\nfunction isImageURI(url) {\r\n    return new Promise((resolve) => {\r\n        fetch({ url, method: 'HEAD' })\r\n            .then((result) => {\r\n            if (result.status === 200) {\r\n                // retrieve content type header to check if content is image\r\n                const contentType = result.headers['content-type'];\r\n                resolve(contentType?.startsWith('image/'));\r\n            }\r\n            else {\r\n                resolve(false);\r\n            }\r\n        })\r\n            .catch((error) => {\r\n            // if error is not cors related then fail\r\n            if (typeof error.response !== 'undefined') {\r\n                // in case of cors, use image api to validate if given url is an actual image\r\n                resolve(false);\r\n                return;\r\n            }\r\n            if (!globalThis.hasOwnProperty('Image')) {\r\n                // fail in NodeJS, since the error is not cors but any other network issue\r\n                resolve(false);\r\n                return;\r\n            }\r\n            const img = new Image();\r\n            img.onload = () => {\r\n                resolve(true);\r\n            };\r\n            img.onerror = () => {\r\n                resolve(false);\r\n            };\r\n            img.src = url;\r\n        });\r\n    });\r\n}\r\n//# sourceMappingURL=uri.js.map","references":["/Users/kames/workspace/soulcialites/web3-citizen/packages/ens-wagmi/src/utils/utils.ts"],"map":"{\"version\":3,\"file\":\"uri.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/utils/specs/uri.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,EAAE,KAAK,EAAE,UAAU,EAAE,MAAM,UAAU,CAAC;AAE7C,MAAM,CAAC,OAAO,OAAO,GAAG;IACtB,KAAK,CAAC,WAAW,CAAC,GAAW;QAC3B,MAAM,EAAE,GAAG,EAAE,WAAW,EAAE,SAAS,EAAE,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC;QACxD,IAAI,SAAS,EAAE;YACb,OAAO,EAAE,KAAK,EAAE,WAAW,EAAE,CAAC;SAC/B;QAED,4DAA4D;QAC5D,MAAM,OAAO,GAAG,MAAM,UAAU,CAAC,WAAW,CAAC,CAAC;QAC9C,IAAI,OAAO,EAAE;YACX,OAAO,EAAE,KAAK,EAAE,WAAW,EAAE,CAAC;SAC/B;QAED,yDAAyD;QACzD,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,WAAW,CAAC,CAAC;QAC1C,OAAO,EAAE,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;IACnC,CAAC;CACF;AAED,SAAS,UAAU,CAAC,GAAW;IAC7B,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;QAC7B,KAAK,CAAC,EAAE,GAAG,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC;aAC3B,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE;YACf,IAAI,MAAM,CAAC,MAAM,KAAK,GAAG,EAAE;gBACzB,4DAA4D;gBAC5D,MAAM,WAAW,GAAG,MAAM,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;gBACnD,OAAO,CAAC,WAAW,EAAE,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;aAC5C;iBAAM;gBACL,OAAO,CAAC,KAAK,CAAC,CAAC;aAChB;QACH,CAAC,CAAC;aACD,KAAK,CAAC,CAAC,KAAK,EAAE,EAAE;YACf,yCAAyC;YACzC,IAAI,OAAO,KAAK,CAAC,QAAQ,KAAK,WAAW,EAAE;gBACzC,6EAA6E;gBAC7E,OAAO,CAAC,KAAK,CAAC,CAAC;gBACf,OAAO;aACR;YACD,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,OAAO,CAAC,EAAE;gBACvC,0EAA0E;gBAC1E,OAAO,CAAC,KAAK,CAAC,CAAC;gBACf,OAAO;aACR;YACD,MAAM,GAAG,GAAG,IAAI,KAAK,EAAE,CAAC;YACxB,GAAG,CAAC,MAAM,GAAG,GAAG,EAAE;gBAChB,OAAO,CAAC,IAAI,CAAC,CAAC;YAChB,CAAC,CAAC;YACF,GAAG,CAAC,OAAO,GAAG,GAAG,EAAE;gBACjB,OAAO,CAAC,KAAK,CAAC,CAAC;YACjB,CAAC,CAAC;YACF,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC;QAChB,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;AACL,CAAC\"}"}
