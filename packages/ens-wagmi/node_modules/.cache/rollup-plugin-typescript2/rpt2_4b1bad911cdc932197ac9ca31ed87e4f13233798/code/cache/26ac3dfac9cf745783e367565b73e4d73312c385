{"code":"import ERC1155 from './specs/erc1155';\r\nimport ERC721 from './specs/erc721';\r\nimport { utils } from '@ensdomains/ens-avatar';\r\nimport URI from './specs/uri';\r\nexport async function handleSettled(promises) {\r\n    const values = [];\r\n    const results = await Promise.allSettled(promises);\r\n    for (let result of results) {\r\n        if (result.status === 'fulfilled')\r\n            values.push(result.value);\r\n        else if (result.status === 'rejected')\r\n            values.push(null);\r\n    }\r\n    return values;\r\n}\r\nexport const specs = Object.freeze({\r\n    erc721: ERC721,\r\n    erc1155: ERC1155,\r\n});\r\nexport async function parseAvatarString(walletAddress, avatarURI, provider) {\r\n    // test case-insensitive in case of uppercase records\r\n    if (!/eip155:/i.test(avatarURI)) {\r\n        const uriSpec = new URI();\r\n        const metadata = await uriSpec.getMetadata(avatarURI);\r\n        return utils.getImageURI({ metadata });\r\n    }\r\n    // parse retrieved avatar uri\r\n    const { chainID, namespace, contractAddress, tokenID } = utils.parseNFT(avatarURI);\r\n    // detect avatar spec by namespace\r\n    const Spec = specs[namespace];\r\n    if (!Spec)\r\n        throw new Error(`Unsupported namespace: ${namespace}`);\r\n    const spec = new Spec();\r\n    // add meta information of the avatar record\r\n    const host_meta = {\r\n        chain_id: chainID,\r\n        namespace,\r\n        contract_address: contractAddress,\r\n        token_id: tokenID,\r\n        reference_url: `https://opensea.io/assets/${contractAddress}/${tokenID}`,\r\n    };\r\n    const metadata = await spec.getMetadata(provider, walletAddress, contractAddress, tokenID);\r\n    const meta_ = { host_meta, ...metadata };\r\n    return utils.getImageURI({ metadata: meta_ });\r\n}\r\n//# sourceMappingURL=parseAvatarString.js.map","references":["/Users/kames/workspace/soulcialites/web3-citizen/node_modules/.pnpm/@ethersproject+providers@5.6.8/node_modules/@ethersproject/providers/lib/index.d.ts","/Users/kames/workspace/soulcialites/web3-citizen/packages/ens-wagmi/src/utils/specs/erc1155.ts","/Users/kames/workspace/soulcialites/web3-citizen/packages/ens-wagmi/src/utils/specs/erc721.ts","/Users/kames/workspace/soulcialites/web3-citizen/node_modules/.pnpm/@ensdomains+ens-avatar@0.1.6/node_modules/@ensdomains/ens-avatar/dist/index.d.ts","/Users/kames/workspace/soulcialites/web3-citizen/packages/ens-wagmi/src/utils/specs/uri.ts"],"map":"{\"version\":3,\"file\":\"parseAvatarString.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/utils/parseAvatarString.ts\"],\"names\":[],\"mappings\":\"AACA,OAAO,OAAO,MAAM,iBAAiB,CAAC;AACtC,OAAO,MAAM,MAAM,gBAAgB,CAAC;AACpC,OAAO,EAAE,KAAK,EAAE,MAAM,wBAAwB,CAAC;AAC/C,OAAO,GAAG,MAAM,aAAa,CAAC;AAE9B,MAAM,CAAC,KAAK,UAAU,aAAa,CAAC,QAAwB;IAC1D,MAAM,MAAM,GAAG,EAAE,CAAC;IAClB,MAAM,OAAO,GAAG,MAAM,OAAO,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;IACnD,KAAK,IAAI,MAAM,IAAI,OAAO,EAAE;QAC1B,IAAI,MAAM,CAAC,MAAM,KAAK,WAAW;YAAE,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;aACxD,IAAI,MAAM,CAAC,MAAM,KAAK,UAAU;YAAE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KAC1D;IACD,OAAO,MAAM,CAAC;AAChB,CAAC;AAWD,MAAM,CAAC,MAAM,KAAK,GAAsC,MAAM,CAAC,MAAM,CAAC;IACpE,MAAM,EAAE,MAAM;IACd,OAAO,EAAE,OAAO;CACjB,CAAC,CAAC;AAEH,MAAM,CAAC,KAAK,UAAU,iBAAiB,CACrC,aAAqB,EACrB,SAAiB,EACjB,QAAsB;IAEtB,qDAAqD;IACrD,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE;QAC/B,MAAM,OAAO,GAAG,IAAI,GAAG,EAAE,CAAC;QAC1B,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;QACtD,OAAO,KAAK,CAAC,WAAW,CAAC,EAAE,QAAQ,EAAE,CAAC,CAAC;KACxC;IAED,6BAA6B;IAC7B,MAAM,EAAE,OAAO,EAAE,SAAS,EAAE,eAAe,EAAE,OAAO,EAAE,GACpD,KAAK,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;IAE5B,kCAAkC;IAClC,MAAM,IAAI,GAAG,KAAK,CAAC,SAAS,CAAC,CAAC;IAC9B,IAAI,CAAC,IAAI;QAAE,MAAM,IAAI,KAAK,CAAC,0BAA0B,SAAS,EAAE,CAAC,CAAC;IAClE,MAAM,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;IAExB,4CAA4C;IAC5C,MAAM,SAAS,GAAG;QAChB,QAAQ,EAAE,OAAO;QACjB,SAAS;QACT,gBAAgB,EAAE,eAAe;QACjC,QAAQ,EAAE,OAAO;QACjB,aAAa,EAAE,6BAA6B,eAAe,IAAI,OAAO,EAAE;KACzE,CAAC;IAEF,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,WAAW,CACrC,QAAQ,EACR,aAAa,EACb,eAAe,EACf,OAAO,CACR,CAAC;IACF,MAAM,KAAK,GAAG,EAAE,SAAS,EAAE,GAAG,QAAQ,EAAE,CAAC;IACzC,OAAO,KAAK,CAAC,WAAW,CAAC,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC,CAAC;AAChD,CAAC\"}","dts":{"name":"/Users/kames/workspace/soulcialites/web3-citizen/packages/ens-wagmi/utils/parseAvatarString.d.ts","writeByteOrderMark":false,"text":"import { BaseProvider } from '@ethersproject/providers';\r\nexport declare function handleSettled(promises: Promise<any>[]): Promise<any[]>;\r\nexport interface Spec {\r\n    getMetadata: (provider: BaseProvider, ownerAddress: string | undefined | null, contractAddress: string, tokenID: string) => Promise<any>;\r\n}\r\nexport declare const specs: {\r\n    [key: string]: new () => Spec;\r\n};\r\nexport declare function parseAvatarString(walletAddress: string, avatarURI: string, provider: BaseProvider): Promise<string | null>;\r\n"}}
