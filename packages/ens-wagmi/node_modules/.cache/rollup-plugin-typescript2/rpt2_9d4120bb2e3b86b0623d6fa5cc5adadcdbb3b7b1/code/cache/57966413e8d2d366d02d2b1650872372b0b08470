{"code":"import { Contract } from '@ethersproject/contracts';\r\nimport { Buffer } from 'buffer/';\r\nimport { fetch, resolveURI } from '../utils';\r\nconst abi = [\r\n    'function uri(uint256 _id) public view returns (string memory)',\r\n    'function balanceOf(address account, uint256 id) public view returns (uint256)',\r\n];\r\nexport default class ERC1155 {\r\n    async getMetadata(provider, ownerAddress, contractAddress, tokenID) {\r\n        // exclude opensea api which does not follow erc1155 spec\r\n        const tokenIDHex = !tokenID.startsWith('https://api.opensea.io')\r\n            ? tokenID.replace('0x', '').padStart(64, '0')\r\n            : tokenID;\r\n        const contract = new Contract(contractAddress, abi, provider);\r\n        const [tokenURI, balance] = await Promise.all([\r\n            contract.uri(tokenID),\r\n            ownerAddress && contract.balanceOf(ownerAddress, tokenID),\r\n        ]);\r\n        // if user has valid address and if token balance of given address is greater than 0\r\n        const isOwner = !!(ownerAddress && balance.gt(0));\r\n        const { uri: resolvedURI, isOnChain, isEncoded } = resolveURI(tokenURI);\r\n        let _resolvedUri = resolvedURI;\r\n        if (isOnChain) {\r\n            if (isEncoded) {\r\n                _resolvedUri = Buffer.from(resolvedURI.replace('data:application/json;base64,', ''), 'base64').toString();\r\n            }\r\n            return JSON.parse(_resolvedUri);\r\n        }\r\n        const response = await fetch(resolvedURI.replace(/(?:0x)?{id}/, tokenIDHex));\r\n        const metadata = await response?.data;\r\n        return { ...metadata, is_owner: isOwner };\r\n    }\r\n}\r\n//# sourceMappingURL=erc1155.js.map","references":["/Users/kames/workspace/soulcialites/web3-citizen/node_modules/.pnpm/@ethersproject+providers@5.6.8/node_modules/@ethersproject/providers/lib/index.d.ts","/Users/kames/workspace/soulcialites/web3-citizen/node_modules/.pnpm/@ethersproject+contracts@5.6.2/node_modules/@ethersproject/contracts/lib/index.d.ts","/Users/kames/workspace/soulcialites/web3-citizen/node_modules/.pnpm/buffer@6.0.3/node_modules/buffer/index.d.ts","/Users/kames/workspace/soulcialites/web3-citizen/packages/ens-wagmi/src/utils/utils.ts"],"map":"{\"version\":3,\"file\":\"erc1155.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/utils/specs/erc1155.ts\"],\"names\":[],\"mappings\":\"AACA,OAAO,EAAE,QAAQ,EAAE,MAAM,0BAA0B,CAAC;AACpD,OAAO,EAAE,MAAM,EAAE,MAAM,SAAS,CAAC;AACjC,OAAO,EAAE,KAAK,EAAE,UAAU,EAAE,MAAM,UAAU,CAAC;AAE7C,MAAM,GAAG,GAAG;IACV,+DAA+D;IAC/D,+EAA+E;CAChF,CAAC;AAEF,MAAM,CAAC,OAAO,OAAO,OAAO;IAC1B,KAAK,CAAC,WAAW,CACf,QAAsB,EACtB,YAAuC,EACvC,eAAuB,EACvB,OAAe;QAEf,yDAAyD;QACzD,MAAM,UAAU,GAAG,CAAC,OAAO,CAAC,UAAU,CAAC,wBAAwB,CAAC;YAC9D,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,QAAQ,CAAC,EAAE,EAAE,GAAG,CAAC;YAC7C,CAAC,CAAC,OAAO,CAAC;QACZ,MAAM,QAAQ,GAAG,IAAI,QAAQ,CAAC,eAAe,EAAE,GAAG,EAAE,QAAQ,CAAC,CAAC;QAC9D,MAAM,CAAC,QAAQ,EAAE,OAAO,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;YAC5C,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC;YACrB,YAAY,IAAI,QAAQ,CAAC,SAAS,CAAC,YAAY,EAAE,OAAO,CAAC;SAC1D,CAAC,CAAC;QACH,oFAAoF;QACpF,MAAM,OAAO,GAAG,CAAC,CAAC,CAAC,YAAY,IAAI,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QAElD,MAAM,EAAE,GAAG,EAAE,WAAW,EAAE,SAAS,EAAE,SAAS,EAAE,GAAG,UAAU,CAAC,QAAQ,CAAC,CAAC;QACxE,IAAI,YAAY,GAAG,WAAW,CAAC;QAC/B,IAAI,SAAS,EAAE;YACb,IAAI,SAAS,EAAE;gBACb,YAAY,GAAG,MAAM,CAAC,IAAI,CACxB,WAAW,CAAC,OAAO,CAAC,+BAA+B,EAAE,EAAE,CAAC,EACxD,QAAQ,CACT,CAAC,QAAQ,EAAE,CAAC;aACd;YACD,OAAO,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;SACjC;QACD,MAAM,QAAQ,GAAG,MAAM,KAAK,CAC1B,WAAW,CAAC,OAAO,CAAC,aAAa,EAAE,UAAU,CAAC,CAC/C,CAAC;QACF,MAAM,QAAQ,GAAG,MAAM,QAAQ,EAAE,IAAI,CAAC;QACtC,OAAO,EAAE,GAAG,QAAQ,EAAE,QAAQ,EAAE,OAAO,EAAE,CAAC;IAC5C,CAAC;CACF\"}"}
