{"version":3,"file":"erc20-wagmi.cjs.development.js","sources":["../src/useERC20ContractWrite.tsx","../src/InputWithLabel.tsx","../src/ERC20Approve.tsx","../src/useERC20ContractRead.tsx","../src/ERC20Balance.tsx","../src/ERC20Mint.tsx","../src/ERC20Transfer.tsx","../src/ERC20TransferFrom.tsx","../src/ERC20TotalSupply.tsx","../src/WalletERC20Balance.tsx","../src/WalletERC20Mint.tsx"],"sourcesContent":["import { useContractWrite } from 'wagmi';\nimport MintableERC20_ABI from './MintableERC20.json';\n\nexport function useERC20ContractRead(\n  address: string,\n  method: string,\n  args: any[]\n): any {\n  return useContractWrite(\n    {\n      addressOrName: address,\n      contractInterface: MintableERC20_ABI,\n    },\n    method,\n    {\n      args: args,\n    }\n  );\n}\n\nexport default useERC20ContractRead;\n","import * as React from 'react';\nimport classNames from 'classnames';\n\ninterface InputWithLabelProps {\n  className?: string;\n  label?: string;\n  register: Function;\n  required?: boolean;\n  name?: string;\n  placeholder?: string;\n  type?: string;\n}\n\nexport const InputWithLabel = ({\n  className,\n  name,\n  label,\n  register,\n  required = false,\n  placeholder,\n  type,\n}: InputWithLabelProps) => {\n  const containerClassName = classNames(className, 'InputWithLabel');\n  return (\n    <div className={containerClassName}>\n      <div className=\"flex items-center justify-center\">\n        <input\n          className=\"input\"\n          type={type}\n          placeholder={placeholder}\n          {...register(name, { required })}\n        />\n        <label className=\"px-3 py-2 bg-emerald-500 text-white text-center rounded-smd ml-2\">\n          <span className=\"uppercase text-xs font-bold\">{label}</span>\n        </label>\n      </div>\n    </div>\n  );\n};\n\nexport default InputWithLabel;\n","import { utils } from 'ethers';\nimport * as React from 'react';\nimport { useForm } from 'react-hook-form';\nimport classNames from 'classnames';\nimport useERC20ContractWrite from './useERC20ContractWrite';\nimport InputWithLabel from './InputWithLabel';\n\ninterface ERC20ApproveProps {\n  className?: string;\n  onUpdate?: Function;\n  defaults?: any;\n  token: string;\n  symbol?: string;\n}\n\nexport const ERC20Approve = ({\n  className,\n  onUpdate,\n  token,\n}: ERC20ApproveProps) => {\n  const styleForm = classNames(className, 'ERC20Approve');\n\n  const {\n    register,\n    handleSubmit,\n    watch,\n    formState: {},\n  } = useForm({\n    defaultValues: {\n      to: '',\n      amount: '',\n    },\n  });\n  const watchAllFields = watch();\n  const { write } = useERC20ContractWrite(token, 'approve', [\n    watchAllFields?.to,\n    utils.parseEther(watchAllFields.amount || '0'),\n  ]);\n  const onSubmit = (_data: any) => {\n    write();\n    if (onUpdate) onUpdate(_data);\n  };\n\n  return (\n    <div className={styleForm}>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <div className=\"mt-4\">\n          <InputWithLabel\n            name=\"to\"\n            label=\"To\"\n            placeholder=\"0x000...000\"\n            register={register}\n          />\n          <InputWithLabel\n            className=\"mt-3\"\n            name=\"amount\"\n            label=\"Amount\"\n            placeholder=\"0.1\"\n            register={register}\n          />\n        </div>\n        <button\n          className=\"button text-white py-2 rounded-lg text-lg px-14 bg-gradient-to-br from-emerald-500 via-emerald-500 to-emerald-700 w-full mt-6\"\n          type=\"submit\"\n        >\n          Submit\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default ERC20Approve;\n","import { useContractRead, erc20ABI } from 'wagmi';\n\nexport function useERC20ContractRead(\n  address: string,\n  method: string,\n  args: any[]\n): any {\n  return useContractRead(\n    {\n      addressOrName: address,\n      contractInterface: erc20ABI,\n    },\n    method,\n    {\n      args: args,\n    }\n  );\n}\n\nexport default useERC20ContractRead;\n","import * as React from 'react';\n\nimport classNames from 'classnames';\nimport { utils } from 'ethers';\nimport useERC20ContractRead from './useERC20ContractRead';\n\ninterface ERC20BalanceProps {\n  className?: string;\n  account?: string;\n  token: string;\n}\n\nexport const ERC20Balance = ({\n  className,\n  account,\n  token,\n}: ERC20BalanceProps) => {\n  const classes = classNames(className, 'ERC20Balance');\n\n  const { data, isError, isLoading } = useERC20ContractRead(\n    token,\n    'balanceOf',\n    [account]\n  );\n\n  console.log(data);\n\n  if (isError || isLoading) return null;\n  return <div className={classes}>{utils.formatEther(data || '0')}</div>;\n};\n\nexport default ERC20Balance;\n","import { utils } from 'ethers';\nimport * as React from 'react';\nimport { useForm } from 'react-hook-form';\nimport classNames from 'classnames';\nimport useERC20ContractWrite from './useERC20ContractWrite';\nimport InputWithLabel from './InputWithLabel';\n\ninterface ERC20MintProps {\n  className?: string;\n  onUpdate?: Function;\n  defaults?: any;\n  token: string;\n  symbol?: string;\n}\n\nexport const ERC20Mint = ({ className, onUpdate, token }: ERC20MintProps) => {\n  const styleForm = classNames(className, 'ERC20Mint');\n\n  const {\n    register,\n    handleSubmit,\n    watch,\n    formState: {},\n  } = useForm({\n    defaultValues: {\n      to: '',\n      amount: '',\n    },\n  });\n  const watchAllFields = watch();\n  const { write } = useERC20ContractWrite(token, 'mint', [\n    watchAllFields?.to,\n    utils.parseEther(watchAllFields.amount || '0'),\n  ]);\n  const onSubmit = (_data: any) => {\n    write();\n    if (onUpdate) onUpdate(_data);\n  };\n\n  return (\n    <div className={styleForm}>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <div className=\"mt-4\">\n          <InputWithLabel\n            name=\"to\"\n            label=\"To\"\n            placeholder=\"0x000...000\"\n            register={register}\n          />\n          <InputWithLabel\n            className=\"mt-3\"\n            name=\"amount\"\n            label=\"Amount\"\n            placeholder=\"0.1\"\n            register={register}\n          />\n        </div>\n        <button\n          className=\"button text-white py-2 rounded-lg text-lg px-14 bg-gradient-to-br from-emerald-500 via-emerald-500 to-emerald-700 w-full mt-6\"\n          type=\"submit\"\n        >\n          Submit\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default ERC20Mint;\n","import { utils } from 'ethers';\nimport * as React from 'react';\nimport { useForm } from 'react-hook-form';\nimport classNames from 'classnames';\nimport useERC20ContractWrite from './useERC20ContractWrite';\nimport InputWithLabel from './InputWithLabel';\n\ninterface ERC20TransferProps {\n  className?: string;\n  onUpdate?: Function;\n  defaults?: any;\n  token: string;\n  symbol?: string;\n}\n\nexport const ERC20Transfer = ({\n  className,\n  onUpdate,\n  token,\n}: ERC20TransferProps) => {\n  const styleForm = classNames(className, 'ERC20Transfer');\n\n  const {\n    register,\n    handleSubmit,\n    watch,\n    formState: {},\n  } = useForm({\n    defaultValues: {\n      to: '',\n      amount: '',\n    },\n  });\n  const watchAllFields = watch();\n  const { write } = useERC20ContractWrite(token, 'transfer', [\n    watchAllFields?.to,\n    utils.parseEther(watchAllFields.amount || '0'),\n  ]);\n  const onSubmit = (_data: any) => {\n    write();\n    if (onUpdate) onUpdate(_data);\n  };\n\n  return (\n    <div className={styleForm}>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <div className=\"mt-4\">\n          <InputWithLabel\n            name=\"to\"\n            label=\"To\"\n            placeholder=\"0x000...000\"\n            register={register}\n          />\n          <InputWithLabel\n            className=\"mt-3\"\n            name=\"amount\"\n            label=\"Amount\"\n            placeholder=\"0.1\"\n            register={register}\n          />\n        </div>\n        <button\n          className=\"button text-white py-2 rounded-lg text-lg px-14 bg-gradient-to-br from-emerald-500 via-emerald-500 to-emerald-700 w-full mt-6\"\n          type=\"submit\"\n        >\n          Submit\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default ERC20Transfer;\n","import { utils } from 'ethers';\nimport * as React from 'react';\nimport { useForm } from 'react-hook-form';\nimport classNames from 'classnames';\nimport useERC20ContractWrite from './useERC20ContractWrite';\nimport { InputWithLabel } from './InputWithLabel';\n\ninterface ERC20TransferFromProps {\n  className?: string;\n  onUpdate?: Function;\n  defaults?: any;\n  token: string;\n  symbol?: string;\n}\n\nexport const ERC20TransferFrom = ({\n  className,\n  onUpdate,\n  token,\n}: ERC20TransferFromProps) => {\n  const styleForm = classNames(className, 'ERC20TransferFrom');\n\n  const {\n    register,\n    handleSubmit,\n    watch,\n    formState: {},\n  } = useForm({\n    defaultValues: {\n      from: '',\n      to: '',\n      amount: '',\n    },\n  });\n  const watchAllFields = watch();\n  const { write } = useERC20ContractWrite(token, 'transferFrom', [\n    watchAllFields?.from,\n    watchAllFields?.to,\n    utils.parseEther(watchAllFields.amount || '0'),\n  ]);\n  const onSubmit = (_data: any) => {\n    write();\n    if (onUpdate) onUpdate(_data);\n  };\n\n  return (\n    <div className={styleForm}>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <div className=\"mt-4\">\n          <InputWithLabel\n            name=\"from\"\n            label=\"From\"\n            placeholder=\"0x000...000\"\n            register={register}\n          />\n          <InputWithLabel\n            className=\"mt-3\"\n            name=\"to\"\n            label=\"To\"\n            placeholder=\"0x000...000\"\n            register={register}\n          />\n          <InputWithLabel\n            className=\"mt-3\"\n            name=\"amount\"\n            label=\"Amount\"\n            placeholder=\"0.1\"\n            register={register}\n          />\n        </div>\n        <button\n          className=\"button text-white py-2 rounded-lg text-lg px-14 bg-gradient-to-br from-emerald-500 via-emerald-500 to-emerald-700 w-full mt-6\"\n          type=\"submit\"\n        >\n          Submit\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default ERC20TransferFrom;\n","import * as React from 'react';\n\nimport classNames from 'classnames';\nimport { utils } from 'ethers';\nimport useERC20ContractRead from './useERC20ContractRead';\n\ninterface ERC20TotalSupplyProps {\n  className?: string;\n  account?: string;\n  contractAddress: string;\n}\n\nexport const ERC20TotalSupply = ({\n  className,\n  contractAddress,\n}: ERC20TotalSupplyProps) => {\n  const classes = classNames(className, 'ERC20TotalSupply');\n  const { data, isError, isLoading } = useERC20ContractRead(\n    contractAddress,\n    'totalSupply',\n    []\n  );\n  if (isError || isLoading) return null;\n  return <div className={classes}>{utils.formatEther(data || '0')}</div>;\n};\n\nexport default ERC20TotalSupply;\n","import * as React from 'react';\n\nimport classNames from 'classnames';\nimport { utils } from 'ethers';\nimport useERC20ContractRead from './useERC20ContractRead';\nimport { useAccount } from 'wagmi';\n\ninterface WalletERC20BalanceProps {\n  className?: string;\n  token: string;\n}\n\nexport const WalletERC20Balance = ({\n  className,\n  token,\n}: WalletERC20BalanceProps) => {\n  const classes = classNames(className, 'WalletERC20Balance');\n  const { data: accountData } = useAccount();\n  const { data, isError, isLoading } = useERC20ContractRead(\n    token,\n    'balanceOf',\n    [accountData?.address]\n  );\n\n  if (isError || isLoading) return null;\n  return <div className={classes}>{utils.formatEther(data || '0')}</div>;\n};\n\nexport default WalletERC20Balance;\n","import * as React from 'react';\nimport classNames from 'classnames';\nimport useERC20ContractWrite from './useERC20ContractWrite';\nimport { utils } from 'ethers';\nimport { useAccount } from 'wagmi';\n\ninterface WalletERC20MintProps {\n  className?: string;\n  token: string;\n  amount: string;\n  to: string;\n  symbol?: string;\n}\n\nexport const WalletERC20Mint = ({\n  className,\n  token,\n  amount,\n  symbol,\n}: WalletERC20MintProps) => {\n  const containerClassName = classNames(className, 'WalletERC20Mint');\n  const { data: accountData } = useAccount();\n  const { write } = useERC20ContractWrite(token, 'mint', [\n    accountData?.address,\n    utils.parseEther(amount),\n  ]);\n\n  return (\n    <div className={containerClassName}>\n      <button onClick={() => write()} className=\"btn btn-sm btn-blue\">\n        Mint {amount} {symbol && <span className=\"\">{symbol}</span>} Tokens\n      </button>\n    </div>\n  );\n};\n\nexport default WalletERC20Mint;\n"],"names":["useERC20ContractRead","address","method","args","useContractWrite","addressOrName","contractInterface","MintableERC20_ABI","InputWithLabel","className","name","label","register","required","placeholder","type","containerClassName","classNames","React","ERC20Approve","onUpdate","token","styleForm","useForm","defaultValues","to","amount","handleSubmit","watch","formState","watchAllFields","useERC20ContractWrite","utils","parseEther","write","onSubmit","_data","useContractRead","erc20ABI","ERC20Balance","account","classes","data","isError","isLoading","console","log","formatEther","ERC20Mint","ERC20Transfer","ERC20TransferFrom","from","ERC20TotalSupply","contractAddress","WalletERC20Balance","useAccount","accountData","WalletERC20Mint","symbol","onClick"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SAGgBA,qBACdC,SACAC,QACAC;EAEA,OAAOC,sBAAgB,CACrB;IACEC,aAAa,EAAEJ,OADjB;IAEEK,iBAAiB,EAAEC;GAHA,EAKrBL,MALqB,EAMrB;IACEC,IAAI,EAAEA;GAPa,CAAvB;AAUD;;ACLM,IAAMK,cAAc,GAAG,SAAjBA,cAAiB;MAC5BC,iBAAAA;MACAC,YAAAA;MACAC,aAAAA;MACAC,gBAAAA;2BACAC;MAAAA,sCAAW;MACXC,mBAAAA;MACAC,YAAAA;EAEA,IAAMC,kBAAkB,GAAGC,UAAU,CAACR,SAAD,EAAY,gBAAZ,CAArC;EACA,OACES,mBAAA,MAAA;IAAKT,SAAS,EAAEO;GAAhB,EACEE,mBAAA,MAAA;IAAKT,SAAS,EAAC;GAAf,EACES,mBAAA,QAAA;IACET,SAAS,EAAC;IACVM,IAAI,EAAEA;IACND,WAAW,EAAEA;KACTF,QAAQ,CAACF,IAAD,EAAO;IAAEG,QAAQ,EAARA;GAAT,EAJd,CADF,EAOEK,mBAAA,QAAA;IAAOT,SAAS,EAAC;GAAjB,EACES,mBAAA,OAAA;IAAMT,SAAS,EAAC;GAAhB,EAA+CE,KAA/C,CADF,CAPF,CADF,CADF;AAeD,CAzBM;;ICEMQ,YAAY,GAAG,SAAfA,YAAe;MAC1BV,iBAAAA;MACAW,gBAAAA;MACAC,aAAAA;EAEA,IAAMC,SAAS,GAAGL,UAAU,CAACR,SAAD,EAAY,cAAZ,CAA5B;;EAEA,eAKIc,qBAAO,CAAC;IACVC,aAAa,EAAE;MACbC,EAAE,EAAE,EADS;MAEbC,MAAM,EAAE;;GAHD,CALX;MACEd,QADF,YACEA,QADF;MAEEe,YAFF,YAEEA,YAFF;MAGEC,KAHF,YAGEA,KAHF;;EAAA,mCAIEC,SAJF;;EAWA,IAAMC,cAAc,GAAGF,KAAK,EAA5B;;EACA,4BAAkBG,oBAAqB,CAACV,KAAD,EAAQ,SAAR,EAAmB,CACxDS,cADwD,oBACxDA,cAAc,CAAEL,EADwC,EAExDO,YAAK,CAACC,UAAN,CAAiBH,cAAc,CAACJ,MAAf,IAAyB,GAA1C,CAFwD,CAAnB,CAAvC;MAAQQ,KAAR,yBAAQA,KAAR;;EAIA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD;IACfF,KAAK;IACL,IAAId,QAAJ,EAAcA,QAAQ,CAACgB,KAAD,CAAR;GAFhB;;EAKA,OACElB,mBAAA,MAAA;IAAKT,SAAS,EAAEa;GAAhB,EACEJ,mBAAA,OAAA;IAAMiB,QAAQ,EAAER,YAAY,CAACQ,QAAD;GAA5B,EACEjB,mBAAA,MAAA;IAAKT,SAAS,EAAC;GAAf,EACES,mBAAA,CAACV,cAAD;IACEE,IAAI,EAAC;IACLC,KAAK,EAAC;IACNG,WAAW,EAAC;IACZF,QAAQ,EAAEA;GAJZ,CADF,EAOEM,mBAAA,CAACV,cAAD;IACEC,SAAS,EAAC;IACVC,IAAI,EAAC;IACLC,KAAK,EAAC;IACNG,WAAW,EAAC;IACZF,QAAQ,EAAEA;GALZ,CAPF,CADF,EAgBEM,mBAAA,SAAA;IACET,SAAS,EAAC;IACVM,IAAI,EAAC;GAFP,UAAA,CAhBF,CADF,CADF;AA2BD,CAvDM;;SCbSf,uBACdC,SACAC,QACAC;EAEA,OAAOkC,qBAAe,CACpB;IACEhC,aAAa,EAAEJ,OADjB;IAEEK,iBAAiB,EAAEgC;GAHD,EAKpBpC,MALoB,EAMpB;IACEC,IAAI,EAAEA;GAPY,CAAtB;AAUD;;ICLYoC,YAAY,GAAG,SAAfA,YAAe;MAC1B9B,iBAAAA;MACA+B,eAAAA;MACAnB,aAAAA;EAEA,IAAMoB,OAAO,GAAGxB,UAAU,CAACR,SAAD,EAAY,cAAZ,CAA1B;;EAEA,4BAAqCT,sBAAoB,CACvDqB,KADuD,EAEvD,WAFuD,EAGvD,CAACmB,OAAD,CAHuD,CAAzD;MAAQE,IAAR,yBAAQA,IAAR;MAAcC,OAAd,yBAAcA,OAAd;MAAuBC,SAAvB,yBAAuBA,SAAvB;;EAMAC,OAAO,CAACC,GAAR,CAAYJ,IAAZ;EAEA,IAAIC,OAAO,IAAIC,SAAf,EAA0B,OAAO,IAAP;EAC1B,OAAO1B,mBAAA,MAAA;IAAKT,SAAS,EAAEgC;GAAhB,EAA0BT,YAAK,CAACe,WAAN,CAAkBL,IAAI,IAAI,GAA1B,CAA1B,CAAP;AACD,CAjBM;;ICGMM,SAAS,GAAG,SAAZA,SAAY;MAAGvC,iBAAAA;MAAWW,gBAAAA;MAAUC,aAAAA;EAC/C,IAAMC,SAAS,GAAGL,UAAU,CAACR,SAAD,EAAY,WAAZ,CAA5B;;EAEA,eAKIc,qBAAO,CAAC;IACVC,aAAa,EAAE;MACbC,EAAE,EAAE,EADS;MAEbC,MAAM,EAAE;;GAHD,CALX;MACEd,QADF,YACEA,QADF;MAEEe,YAFF,YAEEA,YAFF;MAGEC,KAHF,YAGEA,KAHF;;EAAA,mCAIEC,SAJF;;EAWA,IAAMC,cAAc,GAAGF,KAAK,EAA5B;;EACA,4BAAkBG,oBAAqB,CAACV,KAAD,EAAQ,MAAR,EAAgB,CACrDS,cADqD,oBACrDA,cAAc,CAAEL,EADqC,EAErDO,YAAK,CAACC,UAAN,CAAiBH,cAAc,CAACJ,MAAf,IAAyB,GAA1C,CAFqD,CAAhB,CAAvC;MAAQQ,KAAR,yBAAQA,KAAR;;EAIA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD;IACfF,KAAK;IACL,IAAId,QAAJ,EAAcA,QAAQ,CAACgB,KAAD,CAAR;GAFhB;;EAKA,OACElB,mBAAA,MAAA;IAAKT,SAAS,EAAEa;GAAhB,EACEJ,mBAAA,OAAA;IAAMiB,QAAQ,EAAER,YAAY,CAACQ,QAAD;GAA5B,EACEjB,mBAAA,MAAA;IAAKT,SAAS,EAAC;GAAf,EACES,mBAAA,CAACV,cAAD;IACEE,IAAI,EAAC;IACLC,KAAK,EAAC;IACNG,WAAW,EAAC;IACZF,QAAQ,EAAEA;GAJZ,CADF,EAOEM,mBAAA,CAACV,cAAD;IACEC,SAAS,EAAC;IACVC,IAAI,EAAC;IACLC,KAAK,EAAC;IACNG,WAAW,EAAC;IACZF,QAAQ,EAAEA;GALZ,CAPF,CADF,EAgBEM,mBAAA,SAAA;IACET,SAAS,EAAC;IACVM,IAAI,EAAC;GAFP,UAAA,CAhBF,CADF,CADF;AA2BD,CAnDM;;ICAMkC,aAAa,GAAG,SAAhBA,aAAgB;MAC3BxC,iBAAAA;MACAW,gBAAAA;MACAC,aAAAA;EAEA,IAAMC,SAAS,GAAGL,UAAU,CAACR,SAAD,EAAY,eAAZ,CAA5B;;EAEA,eAKIc,qBAAO,CAAC;IACVC,aAAa,EAAE;MACbC,EAAE,EAAE,EADS;MAEbC,MAAM,EAAE;;GAHD,CALX;MACEd,QADF,YACEA,QADF;MAEEe,YAFF,YAEEA,YAFF;MAGEC,KAHF,YAGEA,KAHF;;EAAA,mCAIEC,SAJF;;EAWA,IAAMC,cAAc,GAAGF,KAAK,EAA5B;;EACA,4BAAkBG,oBAAqB,CAACV,KAAD,EAAQ,UAAR,EAAoB,CACzDS,cADyD,oBACzDA,cAAc,CAAEL,EADyC,EAEzDO,YAAK,CAACC,UAAN,CAAiBH,cAAc,CAACJ,MAAf,IAAyB,GAA1C,CAFyD,CAApB,CAAvC;MAAQQ,KAAR,yBAAQA,KAAR;;EAIA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD;IACfF,KAAK;IACL,IAAId,QAAJ,EAAcA,QAAQ,CAACgB,KAAD,CAAR;GAFhB;;EAKA,OACElB,mBAAA,MAAA;IAAKT,SAAS,EAAEa;GAAhB,EACEJ,mBAAA,OAAA;IAAMiB,QAAQ,EAAER,YAAY,CAACQ,QAAD;GAA5B,EACEjB,mBAAA,MAAA;IAAKT,SAAS,EAAC;GAAf,EACES,mBAAA,CAACV,cAAD;IACEE,IAAI,EAAC;IACLC,KAAK,EAAC;IACNG,WAAW,EAAC;IACZF,QAAQ,EAAEA;GAJZ,CADF,EAOEM,mBAAA,CAACV,cAAD;IACEC,SAAS,EAAC;IACVC,IAAI,EAAC;IACLC,KAAK,EAAC;IACNG,WAAW,EAAC;IACZF,QAAQ,EAAEA;GALZ,CAPF,CADF,EAgBEM,mBAAA,SAAA;IACET,SAAS,EAAC;IACVM,IAAI,EAAC;GAFP,UAAA,CAhBF,CADF,CADF;AA2BD,CAvDM;;ICAMmC,iBAAiB,GAAG,SAApBA,iBAAoB;MAC/BzC,iBAAAA;MACAW,gBAAAA;MACAC,aAAAA;EAEA,IAAMC,SAAS,GAAGL,UAAU,CAACR,SAAD,EAAY,mBAAZ,CAA5B;;EAEA,eAKIc,qBAAO,CAAC;IACVC,aAAa,EAAE;MACb2B,IAAI,EAAE,EADO;MAEb1B,EAAE,EAAE,EAFS;MAGbC,MAAM,EAAE;;GAJD,CALX;MACEd,QADF,YACEA,QADF;MAEEe,YAFF,YAEEA,YAFF;MAGEC,KAHF,YAGEA,KAHF;;EAAA,mCAIEC,SAJF;;EAYA,IAAMC,cAAc,GAAGF,KAAK,EAA5B;;EACA,4BAAkBG,oBAAqB,CAACV,KAAD,EAAQ,cAAR,EAAwB,CAC7DS,cAD6D,oBAC7DA,cAAc,CAAEqB,IAD6C,EAE7DrB,cAF6D,oBAE7DA,cAAc,CAAEL,EAF6C,EAG7DO,YAAK,CAACC,UAAN,CAAiBH,cAAc,CAACJ,MAAf,IAAyB,GAA1C,CAH6D,CAAxB,CAAvC;MAAQQ,KAAR,yBAAQA,KAAR;;EAKA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD;IACfF,KAAK;IACL,IAAId,QAAJ,EAAcA,QAAQ,CAACgB,KAAD,CAAR;GAFhB;;EAKA,OACElB,mBAAA,MAAA;IAAKT,SAAS,EAAEa;GAAhB,EACEJ,mBAAA,OAAA;IAAMiB,QAAQ,EAAER,YAAY,CAACQ,QAAD;GAA5B,EACEjB,mBAAA,MAAA;IAAKT,SAAS,EAAC;GAAf,EACES,mBAAA,CAACV,cAAD;IACEE,IAAI,EAAC;IACLC,KAAK,EAAC;IACNG,WAAW,EAAC;IACZF,QAAQ,EAAEA;GAJZ,CADF,EAOEM,mBAAA,CAACV,cAAD;IACEC,SAAS,EAAC;IACVC,IAAI,EAAC;IACLC,KAAK,EAAC;IACNG,WAAW,EAAC;IACZF,QAAQ,EAAEA;GALZ,CAPF,EAcEM,mBAAA,CAACV,cAAD;IACEC,SAAS,EAAC;IACVC,IAAI,EAAC;IACLC,KAAK,EAAC;IACNG,WAAW,EAAC;IACZF,QAAQ,EAAEA;GALZ,CAdF,CADF,EAuBEM,mBAAA,SAAA;IACET,SAAS,EAAC;IACVM,IAAI,EAAC;GAFP,UAAA,CAvBF,CADF,CADF;AAkCD,CAhEM;;ICHMqC,gBAAgB,GAAG,SAAnBA,gBAAmB;MAC9B3C,iBAAAA;MACA4C,uBAAAA;EAEA,IAAMZ,OAAO,GAAGxB,UAAU,CAACR,SAAD,EAAY,kBAAZ,CAA1B;;EACA,4BAAqCT,sBAAoB,CACvDqD,eADuD,EAEvD,aAFuD,EAGvD,EAHuD,CAAzD;MAAQX,IAAR,yBAAQA,IAAR;MAAcC,OAAd,yBAAcA,OAAd;MAAuBC,SAAvB,yBAAuBA,SAAvB;;EAKA,IAAID,OAAO,IAAIC,SAAf,EAA0B,OAAO,IAAP;EAC1B,OAAO1B,mBAAA,MAAA;IAAKT,SAAS,EAAEgC;GAAhB,EAA0BT,YAAK,CAACe,WAAN,CAAkBL,IAAI,IAAI,GAA1B,CAA1B,CAAP;AACD,CAZM;;ICAMY,kBAAkB,GAAG,SAArBA,kBAAqB;MAChC7C,iBAAAA;MACAY,aAAAA;EAEA,IAAMoB,OAAO,GAAGxB,UAAU,CAACR,SAAD,EAAY,oBAAZ,CAA1B;;EACA,kBAA8B8C,gBAAU,EAAxC;MAAcC,WAAd,eAAQd,IAAR;;EACA,4BAAqC1C,sBAAoB,CACvDqB,KADuD,EAEvD,WAFuD,EAGvD,CAACmC,WAAD,oBAACA,WAAW,CAAEvD,OAAd,CAHuD,CAAzD;MAAQyC,IAAR,yBAAQA,IAAR;MAAcC,OAAd,yBAAcA,OAAd;MAAuBC,SAAvB,yBAAuBA,SAAvB;;EAMA,IAAID,OAAO,IAAIC,SAAf,EAA0B,OAAO,IAAP;EAC1B,OAAO1B,mBAAA,MAAA;IAAKT,SAAS,EAAEgC;GAAhB,EAA0BT,YAAK,CAACe,WAAN,CAAkBL,IAAI,IAAI,GAA1B,CAA1B,CAAP;AACD,CAdM;;ICEMe,eAAe,GAAG,SAAlBA,eAAkB;MAC7BhD,iBAAAA;MACAY,aAAAA;MACAK,cAAAA;MACAgC,cAAAA;EAEA,IAAM1C,kBAAkB,GAAGC,UAAU,CAACR,SAAD,EAAY,iBAAZ,CAArC;;EACA,kBAA8B8C,gBAAU,EAAxC;MAAcC,WAAd,eAAQd,IAAR;;EACA,4BAAkBX,oBAAqB,CAACV,KAAD,EAAQ,MAAR,EAAgB,CACrDmC,WADqD,oBACrDA,WAAW,CAAEvD,OADwC,EAErD+B,YAAK,CAACC,UAAN,CAAiBP,MAAjB,CAFqD,CAAhB,CAAvC;MAAQQ,KAAR,yBAAQA,KAAR;;EAKA,OACEhB,mBAAA,MAAA;IAAKT,SAAS,EAAEO;GAAhB,EACEE,mBAAA,SAAA;IAAQyC,OAAO,EAAE;MAAA,OAAMzB,KAAK,EAAX;;IAAezB,SAAS,EAAC;GAA1C,SAAA,EACQiB,MADR,KAAA,EACiBgC,MAAM,IAAIxC,mBAAA,OAAA;IAAMT,SAAS,EAAC;GAAhB,EAAoBiD,MAApB,CAD3B,WAAA,CADF,CADF;AAOD,CApBM;;;;;;;;;;;;"}