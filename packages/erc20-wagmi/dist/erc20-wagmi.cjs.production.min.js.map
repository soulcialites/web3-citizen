{"version":3,"file":"erc20-wagmi.cjs.production.min.js","sources":["../src/useERC20ContractWrite.tsx","../src/InputWithLabel.tsx","../src/useERC20ContractRead.tsx","../src/ERC20Approve.tsx","../src/ERC20Balance.tsx","../src/ERC20Mint.tsx","../src/ERC20TotalSupply.tsx","../src/ERC20Transfer.tsx","../src/ERC20TransferFrom.tsx","../src/WalletERC20Balance.tsx","../src/WalletERC20Mint.tsx"],"sourcesContent":["import { useContractWrite } from 'wagmi';\nimport MintableERC20_ABI from './MintableERC20.json';\n\nexport function useERC20ContractRead(\n  address: string,\n  method: string,\n  args: any[]\n): any {\n  return useContractWrite(\n    {\n      addressOrName: address,\n      contractInterface: MintableERC20_ABI,\n    },\n    method,\n    {\n      args: args,\n    }\n  );\n}\n\nexport default useERC20ContractRead;\n","import * as React from 'react';\nimport classNames from 'classnames';\n\ninterface InputWithLabelProps {\n  className?: string;\n  label?: string;\n  register: Function;\n  required?: boolean;\n  name?: string;\n  placeholder?: string;\n  type?: string;\n}\n\nexport const InputWithLabel = ({\n  className,\n  name,\n  label,\n  register,\n  required = false,\n  placeholder,\n  type,\n}: InputWithLabelProps) => {\n  const containerClassName = classNames(className, 'InputWithLabel');\n  return (\n    <div className={containerClassName}>\n      <div className=\"flex items-center justify-center\">\n        <input\n          className=\"input\"\n          type={type}\n          placeholder={placeholder}\n          {...register(name, { required })}\n        />\n        <label className=\"px-3 py-2 bg-emerald-500 text-white text-center rounded-smd ml-2\">\n          <span className=\"uppercase text-xs font-bold\">{label}</span>\n        </label>\n      </div>\n    </div>\n  );\n};\n\nexport default InputWithLabel;\n","import { useContractRead, erc20ABI } from 'wagmi';\n\nexport function useERC20ContractRead(\n  address: string,\n  method: string,\n  args: any[]\n): any {\n  return useContractRead(\n    {\n      addressOrName: address,\n      contractInterface: erc20ABI,\n    },\n    method,\n    {\n      args: args,\n    }\n  );\n}\n\nexport default useERC20ContractRead;\n","import { utils } from 'ethers';\nimport * as React from 'react';\nimport { useForm } from 'react-hook-form';\nimport classNames from 'classnames';\nimport useERC20ContractWrite from './useERC20ContractWrite';\nimport InputWithLabel from './InputWithLabel';\n\ninterface ERC20ApproveProps {\n  className?: string;\n  onUpdate?: Function;\n  defaults?: any;\n  token: string;\n  symbol?: string;\n}\n\nexport const ERC20Approve = ({\n  className,\n  onUpdate,\n  token,\n}: ERC20ApproveProps) => {\n  const styleForm = classNames(className, 'ERC20Approve');\n\n  const {\n    register,\n    handleSubmit,\n    watch,\n    formState: {},\n  } = useForm({\n    defaultValues: {\n      to: '',\n      amount: '',\n    },\n  });\n  const watchAllFields = watch();\n  const { write } = useERC20ContractWrite(token, 'approve', [\n    watchAllFields?.to,\n    utils.parseEther(watchAllFields.amount || '0'),\n  ]);\n  const onSubmit = (_data: any) => {\n    write();\n    if (onUpdate) onUpdate(_data);\n  };\n\n  return (\n    <div className={styleForm}>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <div className=\"mt-4\">\n          <InputWithLabel\n            name=\"to\"\n            label=\"To\"\n            placeholder=\"0x000...000\"\n            register={register}\n          />\n          <InputWithLabel\n            className=\"mt-3\"\n            name=\"amount\"\n            label=\"Amount\"\n            placeholder=\"0.1\"\n            register={register}\n          />\n        </div>\n        <button\n          className=\"button text-white py-2 rounded-lg text-lg px-14 bg-gradient-to-br from-emerald-500 via-emerald-500 to-emerald-700 w-full mt-6\"\n          type=\"submit\"\n        >\n          Submit\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default ERC20Approve;\n","import * as React from 'react';\n\nimport classNames from 'classnames';\nimport { utils } from 'ethers';\nimport useERC20ContractRead from './useERC20ContractRead';\n\ninterface ERC20BalanceProps {\n  className?: string;\n  account?: string;\n  token: string;\n}\n\nexport const ERC20Balance = ({\n  className,\n  account,\n  token,\n}: ERC20BalanceProps) => {\n  const classes = classNames(className, 'ERC20Balance');\n\n  const { data, isError, isLoading } = useERC20ContractRead(\n    token,\n    'balanceOf',\n    [account]\n  );\n\n  console.log(data);\n\n  if (isError || isLoading) return null;\n  return <div className={classes}>{utils.formatEther(data || '0')}</div>;\n};\n\nexport default ERC20Balance;\n","import { utils } from 'ethers';\nimport * as React from 'react';\nimport { useForm } from 'react-hook-form';\nimport classNames from 'classnames';\nimport useERC20ContractWrite from './useERC20ContractWrite';\nimport InputWithLabel from './InputWithLabel';\n\ninterface ERC20MintProps {\n  className?: string;\n  onUpdate?: Function;\n  defaults?: any;\n  token: string;\n  symbol?: string;\n}\n\nexport const ERC20Mint = ({ className, onUpdate, token }: ERC20MintProps) => {\n  const styleForm = classNames(className, 'ERC20Mint');\n\n  const {\n    register,\n    handleSubmit,\n    watch,\n    formState: {},\n  } = useForm({\n    defaultValues: {\n      to: '',\n      amount: '',\n    },\n  });\n  const watchAllFields = watch();\n  const { write } = useERC20ContractWrite(token, 'mint', [\n    watchAllFields?.to,\n    utils.parseEther(watchAllFields.amount || '0'),\n  ]);\n  const onSubmit = (_data: any) => {\n    write();\n    if (onUpdate) onUpdate(_data);\n  };\n\n  return (\n    <div className={styleForm}>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <div className=\"mt-4\">\n          <InputWithLabel\n            name=\"to\"\n            label=\"To\"\n            placeholder=\"0x000...000\"\n            register={register}\n          />\n          <InputWithLabel\n            className=\"mt-3\"\n            name=\"amount\"\n            label=\"Amount\"\n            placeholder=\"0.1\"\n            register={register}\n          />\n        </div>\n        <button\n          className=\"button text-white py-2 rounded-lg text-lg px-14 bg-gradient-to-br from-emerald-500 via-emerald-500 to-emerald-700 w-full mt-6\"\n          type=\"submit\"\n        >\n          Submit\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default ERC20Mint;\n","import * as React from 'react';\n\nimport classNames from 'classnames';\nimport { utils } from 'ethers';\nimport useERC20ContractRead from './useERC20ContractRead';\n\ninterface ERC20TotalSupplyProps {\n  className?: string;\n  account?: string;\n  contractAddress: string;\n}\n\nexport const ERC20TotalSupply = ({\n  className,\n  contractAddress,\n}: ERC20TotalSupplyProps) => {\n  const classes = classNames(className, 'ERC20TotalSupply');\n  const { data, isError, isLoading } = useERC20ContractRead(\n    contractAddress,\n    'totalSupply',\n    []\n  );\n  if (isError || isLoading) return null;\n  return <div className={classes}>{utils.formatEther(data || '0')}</div>;\n};\n\nexport default ERC20TotalSupply;\n","import { utils } from 'ethers';\nimport * as React from 'react';\nimport { useForm } from 'react-hook-form';\nimport classNames from 'classnames';\nimport useERC20ContractWrite from './useERC20ContractWrite';\nimport InputWithLabel from './InputWithLabel';\n\ninterface ERC20TransferProps {\n  className?: string;\n  onUpdate?: Function;\n  defaults?: any;\n  token: string;\n  symbol?: string;\n}\n\nexport const ERC20Transfer = ({\n  className,\n  onUpdate,\n  token,\n}: ERC20TransferProps) => {\n  const styleForm = classNames(className, 'ERC20Transfer');\n\n  const {\n    register,\n    handleSubmit,\n    watch,\n    formState: {},\n  } = useForm({\n    defaultValues: {\n      to: '',\n      amount: '',\n    },\n  });\n  const watchAllFields = watch();\n  const { write } = useERC20ContractWrite(token, 'transfer', [\n    watchAllFields?.to,\n    utils.parseEther(watchAllFields.amount || '0'),\n  ]);\n  const onSubmit = (_data: any) => {\n    write();\n    if (onUpdate) onUpdate(_data);\n  };\n\n  return (\n    <div className={styleForm}>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <div className=\"mt-4\">\n          <InputWithLabel\n            name=\"to\"\n            label=\"To\"\n            placeholder=\"0x000...000\"\n            register={register}\n          />\n          <InputWithLabel\n            className=\"mt-3\"\n            name=\"amount\"\n            label=\"Amount\"\n            placeholder=\"0.1\"\n            register={register}\n          />\n        </div>\n        <button\n          className=\"button text-white py-2 rounded-lg text-lg px-14 bg-gradient-to-br from-emerald-500 via-emerald-500 to-emerald-700 w-full mt-6\"\n          type=\"submit\"\n        >\n          Submit\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default ERC20Transfer;\n","import { utils } from 'ethers';\nimport * as React from 'react';\nimport { useForm } from 'react-hook-form';\nimport classNames from 'classnames';\nimport useERC20ContractWrite from './useERC20ContractWrite';\nimport { InputWithLabel } from './InputWithLabel';\n\ninterface ERC20TransferFromProps {\n  className?: string;\n  onUpdate?: Function;\n  defaults?: any;\n  token: string;\n  symbol?: string;\n}\n\nexport const ERC20TransferFrom = ({\n  className,\n  onUpdate,\n  token,\n}: ERC20TransferFromProps) => {\n  const styleForm = classNames(className, 'ERC20TransferFrom');\n\n  const {\n    register,\n    handleSubmit,\n    watch,\n    formState: {},\n  } = useForm({\n    defaultValues: {\n      from: '',\n      to: '',\n      amount: '',\n    },\n  });\n  const watchAllFields = watch();\n  const { write } = useERC20ContractWrite(token, 'transferFrom', [\n    watchAllFields?.from,\n    watchAllFields?.to,\n    utils.parseEther(watchAllFields.amount || '0'),\n  ]);\n  const onSubmit = (_data: any) => {\n    write();\n    if (onUpdate) onUpdate(_data);\n  };\n\n  return (\n    <div className={styleForm}>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <div className=\"mt-4\">\n          <InputWithLabel\n            name=\"from\"\n            label=\"From\"\n            placeholder=\"0x000...000\"\n            register={register}\n          />\n          <InputWithLabel\n            className=\"mt-3\"\n            name=\"to\"\n            label=\"To\"\n            placeholder=\"0x000...000\"\n            register={register}\n          />\n          <InputWithLabel\n            className=\"mt-3\"\n            name=\"amount\"\n            label=\"Amount\"\n            placeholder=\"0.1\"\n            register={register}\n          />\n        </div>\n        <button\n          className=\"button text-white py-2 rounded-lg text-lg px-14 bg-gradient-to-br from-emerald-500 via-emerald-500 to-emerald-700 w-full mt-6\"\n          type=\"submit\"\n        >\n          Submit\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default ERC20TransferFrom;\n","import * as React from 'react';\n\nimport classNames from 'classnames';\nimport { utils } from 'ethers';\nimport useERC20ContractRead from './useERC20ContractRead';\nimport { useAccount } from 'wagmi';\n\ninterface WalletERC20BalanceProps {\n  className?: string;\n  token: string;\n}\n\nexport const WalletERC20Balance = ({\n  className,\n  token,\n}: WalletERC20BalanceProps) => {\n  const classes = classNames(className, 'WalletERC20Balance');\n  const { data: accountData } = useAccount();\n  const { data, isError, isLoading } = useERC20ContractRead(\n    token,\n    'balanceOf',\n    [accountData?.address]\n  );\n\n  if (isError || isLoading) return null;\n  return <div className={classes}>{utils.formatEther(data || '0')}</div>;\n};\n\nexport default WalletERC20Balance;\n","import * as React from 'react';\nimport classNames from 'classnames';\nimport useERC20ContractWrite from './useERC20ContractWrite';\nimport { utils } from 'ethers';\nimport { useAccount } from 'wagmi';\n\ninterface WalletERC20MintProps {\n  className?: string;\n  token: string;\n  amount: string;\n  to: string;\n  symbol?: string;\n}\n\nexport const WalletERC20Mint = ({\n  className,\n  token,\n  amount,\n  symbol,\n}: WalletERC20MintProps) => {\n  const containerClassName = classNames(className, 'WalletERC20Mint');\n  const { data: accountData } = useAccount();\n  const { write } = useERC20ContractWrite(token, 'mint', [\n    accountData?.address,\n    utils.parseEther(amount),\n  ]);\n\n  return (\n    <div className={containerClassName}>\n      <button onClick={() => write()} className=\"btn btn-sm btn-blue\">\n        Mint {amount} {symbol && <span className=\"\">{symbol}</span>} Tokens\n      </button>\n    </div>\n  );\n};\n\nexport default WalletERC20Mint;\n"],"names":["useERC20ContractRead","address","method","args","useContractWrite","addressOrName","contractInterface","MintableERC20_ABI","InputWithLabel","name","label","register","required","placeholder","type","containerClassName","classNames","className","React","useContractRead","erc20ABI","onUpdate","token","styleForm","useForm","defaultValues","to","amount","handleSubmit","watch","_objectDestructuringEmpty","formState","watchAllFields","write","useERC20ContractWrite","utils","parseEther","onSubmit","_data","account","classes","data","isError","isLoading","console","log","formatEther","contractAddress","from","accountData","useAccount","symbol","onClick"],"mappings":"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"}