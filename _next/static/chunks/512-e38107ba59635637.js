"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[512],{1599:function(n,e,t){t.d(e,{o:function(){return g}});var a=t(97458),o=t(45700),r=t(7524),i=t.n(r),s=t(83849),d=t.n(s),l=t(52983);function p(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,a=new Array(e);t<e;t++)a[t]=n[t];return a}function c(n,e){return function(n){if(Array.isArray(n))return n}(n)||function(n,e){var t=null==n?null:"undefined"!==typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=t){var a,o,r=[],i=!0,s=!1;try{for(t=t.call(n);!(i=(a=t.next()).done)&&(r.push(a.value),!e||r.length!==e);i=!0);}catch(d){s=!0,o=d}finally{try{i||null==t.return||t.return()}finally{if(s)throw o}}return r}}(n,e)||function(n,e){if(!n)return;if("string"===typeof n)return p(n,e);var t=Object.prototype.toString.call(n).slice(8,-1);"Object"===t&&n.constructor&&(t=n.constructor.name);if("Map"===t||"Set"===t)return Array.from(t);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return p(n,e)}(n,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}var u=function(n){var e=n.className,t=d()(e,"color-mode cursor-pointer"),o=c(l.useState("light"),2),r=o[0],i=o[1];(0,l.useEffect)((function(){"dark"===localStorage.theme||!("theme"in localStorage)&&window.matchMedia("(prefers-color-scheme: dark)").matches?(document.documentElement.classList.add("dark"),document.documentElement.classList.remove("light"),i("dark")):(document.documentElement.classList.add("light"),document.documentElement.classList.remove("dark"),i("light"))}),[]);return(0,a.jsx)("div",{className:t,onClick:function(n){document.documentElement.classList.toggle("dark"),i("dark"===r?"light":"dark")},children:"dark"===r?"\ud83c\udf15":"\ud83c\udf19"})},b=t(13708),g=function(n){return(0,a.jsxs)("div",{className:"w-full bg-white p-0 px-1 text-gray-700 antialiased dark:bg-gray-700 dark:text-white",children:[n.meta,(0,a.jsxs)("div",{className:"min-h-vh mx-auto h-10 w-full dark:bg-gray-700 dark:bg-gray-700 dark:text-white dark:text-white",children:[(0,a.jsxs)("div",{className:"flex items-center justify-between border-b border-gray-300 px-8 py-4 dark:border-neutral-500 dark:bg-gray-700 dark:text-white",children:[(0,a.jsx)("div",{className:" align-center flex items-center justify-between",children:(0,a.jsx)(i(),{href:"/",children:(0,a.jsxs)("span",{className:"text-1xl cursor-pointer font-bold text-gray-900 dark:text-white",children:[(0,a.jsx)("span",{className:"text-3l",children:b.X.emoji})," ",b.X.title]})})}),(0,a.jsx)("div",{className:"text-right",children:(0,a.jsx)(o.NL,{})})]}),(0,a.jsx)("div",{className:"content bg-neutral-100 dark:bg-neutral-500",children:n.children}),(0,a.jsxs)("div",{className:"border-t border-gray-300 bg-white py-8 text-center text-sm dark:border-neutral-500 dark:bg-gray-700 dark:text-white",children:[(0,a.jsx)("div",{className:"mb-3 flex items-center justify-center",children:(0,a.jsxs)("ul",{className:"flex flex-wrap text-sm",children:[(0,a.jsx)("li",{className:"mr-6",children:(0,a.jsx)(i(),{href:"/",children:(0,a.jsx)("a",{className:"border-none text-gray-700 hover:text-gray-900 dark:text-white hover:dark:text-neutral-100",children:"Home"})})}),(0,a.jsx)("li",{className:"mr-6",children:(0,a.jsx)(i(),{href:"/about/",children:(0,a.jsx)("a",{className:"border-none text-gray-700 hover:text-gray-900 dark:text-white hover:dark:text-neutral-100",children:"About"})})}),(0,a.jsx)("li",{className:"mr-6",children:(0,a.jsx)(i(),{href:"/town-hall/",children:(0,a.jsx)("a",{className:"border-none text-gray-700 hover:text-gray-900 dark:text-white hover:dark:text-neutral-100",children:"Town Hall"})})}),(0,a.jsx)("li",{className:"mr-6",children:(0,a.jsx)("a",{target:"_blank",className:"border-none text-gray-700 hover:text-gray-900 dark:text-white hover:dark:text-neutral-100",href:"https://github.com/web3-citizen",rel:"noreferrer",children:"GitHub"})})]})}),(0,a.jsxs)("div",{className:"",children:["\xa9 Copyright ",(new Date).getFullYear()," Kames Geraghty"]}),(0,a.jsx)(u,{className:"mt-3"})]})]})]})}},37850:function(n,e,t){t.d(e,{h:function(){return l}});var a=t(97458),o=t(82099),r=t.n(o),i=t(9681),s=t(99293),d=t(13708),l=function(n){var e=(0,i.useRouter)();return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(r(),{children:[(0,a.jsx)("meta",{charSet:"UTF-8"},"charset"),(0,a.jsx)("meta",{name:"viewport",content:"width=device-width,initial-scale=1"},"viewport"),(0,a.jsx)("link",{rel:"apple-touch-icon",href:"".concat(e.basePath,"/apple-touch-icon.png")},"apple"),(0,a.jsx)("link",{rel:"icon",type:"image/png",sizes:"32x32",href:"".concat(e.basePath,"/favicon-32x32.png")},"icon32"),(0,a.jsx)("link",{rel:"icon",type:"image/png",sizes:"16x16",href:"".concat(e.basePath,"/favicon-16x16.png")},"icon16"),(0,a.jsx)("link",{rel:"icon",href:"".concat(e.basePath,"/favicon.ico")},"favicon")]}),(0,a.jsx)(s.PB,{title:n.title,description:n.description,canonical:n.canonical,openGraph:{title:n.title,description:n.description,url:n.canonical,locale:d.X.locale,site_name:d.X.site_name}})]})}},24449:function(n,e,t){t.r(e),t.d(e,{Address:function(){return p},Balance:function(){return c},BlockNumber:function(){return u},EnsAddress:function(){return g},EnsName:function(){return b},IpfsUriImageBackgroundRender:function(){return x},IpfsUriImageRender:function(){return k},IsWalletConnected:function(){return f},WalletAddress:function(){return m},WalletBalance:function(){return y},WalletEnsAddress:function(){return h},WalletEnsName:function(){return v},WalletNonce:function(){return S}});var a=t(52983),o=t(83849),r=t.n(o),i=t(47952),s=t(7862),d=t.n(s),l=/^(0x[a-zA-Z0-9]{4})[a-zA-Z0-9]+([a-zA-Z0-9]{4})$/,p=function(n){var e=n.className,t=n.truncate,o=n.address,i=void 0===o?"0x00":o,s=r()(e,"Address");return t?(0,a.createElement)("span",{className:s},function(n){var e=n.match(l);return e?e[1]+"\u2026"+e[2]:n}(i)):(0,a.createElement)("span",{className:s},i)},c=function(n){var e=n.className,t=n.address,o=r()(e,"Balance"),s=(0,i.useBalance)({addressOrName:t}),d=s.data,l=s.isLoading,p=s.isError;return l||p?null:(0,a.createElement)("div",{className:o},null==d?void 0:d.formatted," ",null==d?void 0:d.symbol)},u=function(n){var e=n.className,t=r()(e,"BlockNumber"),o=(0,i.useBlockNumber)(),s=o.data,d=o.isError;return o.isLoading||d?null:(0,a.createElement)("div",{className:t},s)},b=function(n){var e=n.className,t=n.address,o=r()(e,"EnsName"),s=(0,i.useEnsName)({address:t}),d=s.data,l=s.error,c=s.isError,u=s.isLoading;return console.log(d,l,u,c),u?null:c||!u?(0,a.createElement)(p,{truncate:!0,address:t,className:o}):(0,a.createElement)("div",{className:o},d)},g=function(n){var e=n.className,t=n.name,o=r()(e,"EnsAddress"),s=(0,i.useEnsAddress)({name:t}),d=s.data,l=s.isError;return s.isLoading||l?null:(0,a.createElement)("div",{className:o},d)},f=function(n){var e=n.children,t=n.loading;return(0,i.useConnect)().isConnected?e:t};f.defaultProps={loading:null},f.propTypes={loading:d().func};var m=function(n){var e=n.className,t=r()(e,"WalletAddress"),o=(0,i.useAccount)(),s=o.data,d=o.isError;return o.isLoading||d?null:(0,a.createElement)("div",{className:t},null==s?void 0:s.address)},y=function(n){var e=n.className,t=r()(e,"WalletBalance"),o=(0,i.useAccount)(),s=o.data,d=o.isError,l=o.isLoading,p=(0,i.useBalance)({addressOrName:null==s?void 0:s.address}).data;return l||d?null:(0,a.createElement)("div",{className:t},null==p?void 0:p.formatted," ",null==p?void 0:p.symbol)},h=function(n){var e=n.className,t=r()(e,"WalletEnsAddress"),o=(0,i.useAccount)(),s=o.data,d=o.isError,l=o.isLoading,p=(0,i.useEnsName)({address:null==s?void 0:s.address}).data;return l||d?null:(0,a.createElement)("div",{className:t},p)},v=function(n){var e=n.className,t=r()(e,"WalletEnsName"),o=(0,i.useAccount)(),s=o.data,d=o.isError,l=o.isLoading,p=(0,i.useEnsName)({address:null==s?void 0:s.address}).data;return l||d?null:(0,a.createElement)("div",{className:t},p)};function _(){_=function(){return n};var n={},e=Object.prototype,t=e.hasOwnProperty,a="function"==typeof Symbol?Symbol:{},o=a.iterator||"@@iterator",r=a.asyncIterator||"@@asyncIterator",i=a.toStringTag||"@@toStringTag";function s(n,e,t){return Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}),n[e]}try{s({},"")}catch(R){s=function(n,e,t){return n[e]=t}}function d(n,e,t,a){var o=e&&e.prototype instanceof c?e:c,r=Object.create(o.prototype),i=new x(a||[]);return r._invoke=function(n,e,t){var a="suspendedStart";return function(o,r){if("executing"===a)throw new Error("Generator is already running");if("completed"===a){if("throw"===o)throw r;return I()}for(t.method=o,t.arg=r;;){var i=t.delegate;if(i){var s=w(i,t);if(s){if(s===p)continue;return s}}if("next"===t.method)t.sent=t._sent=t.arg;else if("throw"===t.method){if("suspendedStart"===a)throw a="completed",t.arg;t.dispatchException(t.arg)}else"return"===t.method&&t.abrupt("return",t.arg);a="executing";var d=l(n,e,t);if("normal"===d.type){if(a=t.done?"completed":"suspendedYield",d.arg===p)continue;return{value:d.arg,done:t.done}}"throw"===d.type&&(a="completed",t.method="throw",t.arg=d.arg)}}}(n,t,i),r}function l(n,e,t){try{return{type:"normal",arg:n.call(e,t)}}catch(R){return{type:"throw",arg:R}}}n.wrap=d;var p={};function c(){}function u(){}function b(){}var g={};s(g,o,(function(){return this}));var f=Object.getPrototypeOf,m=f&&f(f(L([])));m&&m!==e&&t.call(m,o)&&(g=m);var y=b.prototype=c.prototype=Object.create(g);function h(n){["next","throw","return"].forEach((function(e){s(n,e,(function(n){return this._invoke(e,n)}))}))}function v(n,e){function a(o,r,i,s){var d=l(n[o],n,r);if("throw"!==d.type){var p=d.arg,c=p.value;return c&&"object"==typeof c&&t.call(c,"__await")?e.resolve(c.__await).then((function(n){a("next",n,i,s)}),(function(n){a("throw",n,i,s)})):e.resolve(c).then((function(n){p.value=n,i(p)}),(function(n){return a("throw",n,i,s)}))}s(d.arg)}var o;this._invoke=function(n,t){function r(){return new e((function(e,o){a(n,t,e,o)}))}return o=o?o.then(r,r):r()}}function w(n,e){var t=n.iterator[e.method];if(void 0===t){if(e.delegate=null,"throw"===e.method){if(n.iterator.return&&(e.method="return",e.arg=void 0,w(n,e),"throw"===e.method))return p;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return p}var a=l(t,n.iterator,e.arg);if("throw"===a.type)return e.method="throw",e.arg=a.arg,e.delegate=null,p;var o=a.arg;return o?o.done?(e[n.resultName]=o.value,e.next=n.nextLoc,"return"!==e.method&&(e.method="next",e.arg=void 0),e.delegate=null,p):o:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,p)}function S(n){var e={tryLoc:n[0]};1 in n&&(e.catchLoc=n[1]),2 in n&&(e.finallyLoc=n[2],e.afterLoc=n[3]),this.tryEntries.push(e)}function k(n){var e=n.completion||{};e.type="normal",delete e.arg,n.completion=e}function x(n){this.tryEntries=[{tryLoc:"root"}],n.forEach(S,this),this.reset(!0)}function L(n){if(n){var e=n[o];if(e)return e.call(n);if("function"==typeof n.next)return n;if(!isNaN(n.length)){var a=-1,r=function e(){for(;++a<n.length;)if(t.call(n,a))return e.value=n[a],e.done=!1,e;return e.value=void 0,e.done=!0,e};return r.next=r}}return{next:I}}function I(){return{value:void 0,done:!0}}return u.prototype=b,s(y,"constructor",b),s(b,"constructor",u),u.displayName=s(b,i,"GeneratorFunction"),n.isGeneratorFunction=function(n){var e="function"==typeof n&&n.constructor;return!!e&&(e===u||"GeneratorFunction"===(e.displayName||e.name))},n.mark=function(n){return Object.setPrototypeOf?Object.setPrototypeOf(n,b):(n.__proto__=b,s(n,i,"GeneratorFunction")),n.prototype=Object.create(y),n},n.awrap=function(n){return{__await:n}},h(v.prototype),s(v.prototype,r,(function(){return this})),n.AsyncIterator=v,n.async=function(e,t,a,o,r){void 0===r&&(r=Promise);var i=new v(d(e,t,a,o),r);return n.isGeneratorFunction(t)?i:i.next().then((function(n){return n.done?n.value:i.next()}))},h(y),s(y,i,"Generator"),s(y,o,(function(){return this})),s(y,"toString",(function(){return"[object Generator]"})),n.keys=function(n){var e=[];for(var t in n)e.push(t);return e.reverse(),function t(){for(;e.length;){var a=e.pop();if(a in n)return t.value=a,t.done=!1,t}return t.done=!0,t}},n.values=L,x.prototype={constructor:x,reset:function(n){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(k),!n)for(var e in this)"t"===e.charAt(0)&&t.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=void 0)},stop:function(){this.done=!0;var n=this.tryEntries[0].completion;if("throw"===n.type)throw n.arg;return this.rval},dispatchException:function(n){if(this.done)throw n;var e=this;function a(t,a){return i.type="throw",i.arg=n,e.next=t,a&&(e.method="next",e.arg=void 0),!!a}for(var o=this.tryEntries.length-1;o>=0;--o){var r=this.tryEntries[o],i=r.completion;if("root"===r.tryLoc)return a("end");if(r.tryLoc<=this.prev){var s=t.call(r,"catchLoc"),d=t.call(r,"finallyLoc");if(s&&d){if(this.prev<r.catchLoc)return a(r.catchLoc,!0);if(this.prev<r.finallyLoc)return a(r.finallyLoc)}else if(s){if(this.prev<r.catchLoc)return a(r.catchLoc,!0)}else{if(!d)throw new Error("try statement without catch or finally");if(this.prev<r.finallyLoc)return a(r.finallyLoc)}}}},abrupt:function(n,e){for(var a=this.tryEntries.length-1;a>=0;--a){var o=this.tryEntries[a];if(o.tryLoc<=this.prev&&t.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var r=o;break}}r&&("break"===n||"continue"===n)&&r.tryLoc<=e&&e<=r.finallyLoc&&(r=null);var i=r?r.completion:{};return i.type=n,i.arg=e,r?(this.method="next",this.next=r.finallyLoc,p):this.complete(i)},complete:function(n,e){if("throw"===n.type)throw n.arg;return"break"===n.type||"continue"===n.type?this.next=n.arg:"return"===n.type?(this.rval=this.arg=n.arg,this.method="return",this.next="end"):"normal"===n.type&&e&&(this.next=e),p},finish:function(n){for(var e=this.tryEntries.length-1;e>=0;--e){var t=this.tryEntries[e];if(t.finallyLoc===n)return this.complete(t.completion,t.afterLoc),k(t),p}},catch:function(n){for(var e=this.tryEntries.length-1;e>=0;--e){var t=this.tryEntries[e];if(t.tryLoc===n){var a=t.completion;if("throw"===a.type){var o=a.arg;k(t)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(n,e,t){return this.delegate={iterator:L(n),resultName:e,nextLoc:t},"next"===this.method&&(this.arg=void 0),p}},n}function w(n,e,t,a,o,r,i){try{var s=n[r](i),d=s.value}catch(l){return void t(l)}s.done?e(d):Promise.resolve(d).then(a,o)}var S=function(n){var e=n.className,t=r()(e,"WalletNonce"),o=(0,i.useSigner)(),s=o.data,d=o.isLoading,l=o.isError,p=(0,a.useState)(),c=p[0],u=p[1];return(0,a.useEffect)((function(){var n;(n=_().mark((function n(){var e;return _().wrap((function(n){for(;;)switch(n.prev=n.next){case 0:if(!s){n.next=5;break}return n.next=3,s.getTransactionCount();case 3:e=n.sent,u(e);case 5:case"end":return n.stop()}}),n)})),function(){var e=this,t=arguments;return new Promise((function(a,o){var r=n.apply(e,t);function i(n){w(r,a,o,i,s,"next",n)}function s(n){w(r,a,o,i,s,"throw",n)}i(void 0)}))})()}),[d,s]),d||l?null:(0,a.createElement)("div",{className:t},c)},k=function(n){var e=n.className,t=n.uri,o=n.alt,i=void 0===o?"":o,s=r()(e,"IpfsUriImageRender"),d=(0,a.useState)(""),l=d[0],p=d[1];return(0,a.useEffect)((function(){t&&p(t.replace("ipfs://","https://ipfs.io/ipfs/"))}),[t]),(0,a.createElement)("img",{className:s,src:l,alt:i})},x=function(n){var e=n.className,t=n.uri,o=r()(e,"IpfsUriImageBackgroundRender"),i=(0,a.useState)(""),s=i[0],d=i[1];return(0,a.useEffect)((function(){t&&d(t.replace("ipfs://","https://ipfs.io/ipfs/"))}),[t]),(0,a.createElement)("div",{className:o,style:{position:"relative"}},(0,a.createElement)("div",{style:{backgroundImage:"url("+s+")",backgroundPosition:"center center",backgroundSize:"cover",position:"absolute",top:0,bottom:0,width:"100%"}}))}},11545:function(n,e,t){n.exports=t(52200)},52200:function(n,e,t){var a=t(15313).Buffer;function o(n){return n&&"object"==typeof n&&"default"in n?n.default:n}var r=t(52983),i=t(47952),s=o(t(83849)),d=o(t(99133)),l=t(24449),p=t(28179);function c(){c=function(){return n};var n={},e=Object.prototype,t=e.hasOwnProperty,a="function"==typeof Symbol?Symbol:{},o=a.iterator||"@@iterator",r=a.asyncIterator||"@@asyncIterator",i=a.toStringTag||"@@toStringTag";function s(n,e,t){return Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}),n[e]}try{s({},"")}catch(n){s=function(n,e,t){return n[e]=t}}function d(n,e,t,a){var o=Object.create((e&&e.prototype instanceof u?e:u).prototype),r=new x(a||[]);return o._invoke=function(n,e,t){var a="suspendedStart";return function(o,r){if("executing"===a)throw new Error("Generator is already running");if("completed"===a){if("throw"===o)throw r;return{value:void 0,done:!0}}for(t.method=o,t.arg=r;;){var i=t.delegate;if(i){var s=w(i,t);if(s){if(s===p)continue;return s}}if("next"===t.method)t.sent=t._sent=t.arg;else if("throw"===t.method){if("suspendedStart"===a)throw a="completed",t.arg;t.dispatchException(t.arg)}else"return"===t.method&&t.abrupt("return",t.arg);a="executing";var d=l(n,e,t);if("normal"===d.type){if(a=t.done?"completed":"suspendedYield",d.arg===p)continue;return{value:d.arg,done:t.done}}"throw"===d.type&&(a="completed",t.method="throw",t.arg=d.arg)}}}(n,t,r),o}function l(n,e,t){try{return{type:"normal",arg:n.call(e,t)}}catch(n){return{type:"throw",arg:n}}}n.wrap=d;var p={};function u(){}function b(){}function g(){}var f={};s(f,o,(function(){return this}));var m=Object.getPrototypeOf,y=m&&m(m(L([])));y&&y!==e&&t.call(y,o)&&(f=y);var h=g.prototype=u.prototype=Object.create(f);function v(n){["next","throw","return"].forEach((function(e){s(n,e,(function(n){return this._invoke(e,n)}))}))}function _(n,e){var a;this._invoke=function(o,r){function i(){return new e((function(a,i){!function a(o,r,i,s){var d=l(n[o],n,r);if("throw"!==d.type){var p=d.arg,c=p.value;return c&&"object"==typeof c&&t.call(c,"__await")?e.resolve(c.__await).then((function(n){a("next",n,i,s)}),(function(n){a("throw",n,i,s)})):e.resolve(c).then((function(n){p.value=n,i(p)}),(function(n){return a("throw",n,i,s)}))}s(d.arg)}(o,r,a,i)}))}return a=a?a.then(i,i):i()}}function w(n,e){var t=n.iterator[e.method];if(void 0===t){if(e.delegate=null,"throw"===e.method){if(n.iterator.return&&(e.method="return",e.arg=void 0,w(n,e),"throw"===e.method))return p;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return p}var a=l(t,n.iterator,e.arg);if("throw"===a.type)return e.method="throw",e.arg=a.arg,e.delegate=null,p;var o=a.arg;return o?o.done?(e[n.resultName]=o.value,e.next=n.nextLoc,"return"!==e.method&&(e.method="next",e.arg=void 0),e.delegate=null,p):o:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,p)}function S(n){var e={tryLoc:n[0]};1 in n&&(e.catchLoc=n[1]),2 in n&&(e.finallyLoc=n[2],e.afterLoc=n[3]),this.tryEntries.push(e)}function k(n){var e=n.completion||{};e.type="normal",delete e.arg,n.completion=e}function x(n){this.tryEntries=[{tryLoc:"root"}],n.forEach(S,this),this.reset(!0)}function L(n){if(n){var e=n[o];if(e)return e.call(n);if("function"==typeof n.next)return n;if(!isNaN(n.length)){var a=-1,r=function e(){for(;++a<n.length;)if(t.call(n,a))return e.value=n[a],e.done=!1,e;return e.value=void 0,e.done=!0,e};return r.next=r}}return{next:I}}function I(){return{value:void 0,done:!0}}return b.prototype=g,s(h,"constructor",g),s(g,"constructor",b),b.displayName=s(g,i,"GeneratorFunction"),n.isGeneratorFunction=function(n){var e="function"==typeof n&&n.constructor;return!!e&&(e===b||"GeneratorFunction"===(e.displayName||e.name))},n.mark=function(n){return Object.setPrototypeOf?Object.setPrototypeOf(n,g):(n.__proto__=g,s(n,i,"GeneratorFunction")),n.prototype=Object.create(h),n},n.awrap=function(n){return{__await:n}},v(_.prototype),s(_.prototype,r,(function(){return this})),n.AsyncIterator=_,n.async=function(e,t,a,o,r){void 0===r&&(r=Promise);var i=new _(d(e,t,a,o),r);return n.isGeneratorFunction(t)?i:i.next().then((function(n){return n.done?n.value:i.next()}))},v(h),s(h,i,"Generator"),s(h,o,(function(){return this})),s(h,"toString",(function(){return"[object Generator]"})),n.keys=function(n){var e=[];for(var t in n)e.push(t);return e.reverse(),function t(){for(;e.length;){var a=e.pop();if(a in n)return t.value=a,t.done=!1,t}return t.done=!0,t}},n.values=L,x.prototype={constructor:x,reset:function(n){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(k),!n)for(var e in this)"t"===e.charAt(0)&&t.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=void 0)},stop:function(){this.done=!0;var n=this.tryEntries[0].completion;if("throw"===n.type)throw n.arg;return this.rval},dispatchException:function(n){if(this.done)throw n;var e=this;function a(t,a){return i.type="throw",i.arg=n,e.next=t,a&&(e.method="next",e.arg=void 0),!!a}for(var o=this.tryEntries.length-1;o>=0;--o){var r=this.tryEntries[o],i=r.completion;if("root"===r.tryLoc)return a("end");if(r.tryLoc<=this.prev){var s=t.call(r,"catchLoc"),d=t.call(r,"finallyLoc");if(s&&d){if(this.prev<r.catchLoc)return a(r.catchLoc,!0);if(this.prev<r.finallyLoc)return a(r.finallyLoc)}else if(s){if(this.prev<r.catchLoc)return a(r.catchLoc,!0)}else{if(!d)throw new Error("try statement without catch or finally");if(this.prev<r.finallyLoc)return a(r.finallyLoc)}}}},abrupt:function(n,e){for(var a=this.tryEntries.length-1;a>=0;--a){var o=this.tryEntries[a];if(o.tryLoc<=this.prev&&t.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var r=o;break}}r&&("break"===n||"continue"===n)&&r.tryLoc<=e&&e<=r.finallyLoc&&(r=null);var i=r?r.completion:{};return i.type=n,i.arg=e,r?(this.method="next",this.next=r.finallyLoc,p):this.complete(i)},complete:function(n,e){if("throw"===n.type)throw n.arg;return"break"===n.type||"continue"===n.type?this.next=n.arg:"return"===n.type?(this.rval=this.arg=n.arg,this.method="return",this.next="end"):"normal"===n.type&&e&&(this.next=e),p},finish:function(n){for(var e=this.tryEntries.length-1;e>=0;--e){var t=this.tryEntries[e];if(t.finallyLoc===n)return this.complete(t.completion,t.afterLoc),k(t),p}},catch:function(n){for(var e=this.tryEntries.length-1;e>=0;--e){var t=this.tryEntries[e];if(t.tryLoc===n){var a=t.completion;if("throw"===a.type){var o=a.arg;k(t)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(n,e,t){return this.delegate={iterator:L(n),resultName:e,nextLoc:t},"next"===this.method&&(this.arg=void 0),p}},n}function u(n,e,t,a,o,r,i){try{var s=n[r](i),d=s.value}catch(n){return void t(n)}s.done?e(d):Promise.resolve(d).then(a,o)}function b(n){return function(){var e=this,t=arguments;return new Promise((function(a,o){var r=n.apply(e,t);function i(n){u(r,a,o,i,s,"next",n)}function s(n){u(r,a,o,i,s,"throw",n)}i(void 0)}))}}function g(n){if(null==n)throw new TypeError("Cannot destructure undefined")}function f(n,e,t){return i.useContractRead({addressOrName:n,contractInterface:d.abi},e,{args:t})}var m=function(n){var e=n.contractAddress,t=n.address,a=s(n.className,"CitizenLink"),o=f(e,"getLink",[t]);return o.isError||o.isLoading?null:r.createElement(l.Address,{className:a,address:o.data,truncate:!0})},y=function(n){var e=n.classNameImage,t=n.tokenId,o=void 0===t?"0":t,p=s(n.className,"CitizenCard"),u=i.useContractRead({addressOrName:d.address,contractInterface:d.abi},"tokenURI",{args:[o]}),g=u.data,f=u.isError,y=r.useState(),h=y[0],v=y[1];return r.useEffect((function(){g&&b(c().mark((function n(){var e,t;return c().wrap((function(n){for(;;)switch(n.prev=n.next){case 0:e=a.from(g.substring(29),"base64").toString(),console.log(e),t=JSON.parse(e),console.log(t),v(t);case 5:case"end":return n.stop()}}),n)})))()}),[g]),f?r.createElement("div",null,"Error requesting NFT data"):r.createElement("div",{className:p},r.createElement(l.IpfsUriImageBackgroundRender,{className:e,uri:(null==h?void 0:h.image)||""})," ",r.createElement("h3",{className:"font-normal text-xl my-3"},""!=(null==h?void 0:h.attributes[2].value)?r.createElement("div",{className:""},r.createElement("span",{className:""},null==h?void 0:h.attributes[2].value)):r.createElement(l.EnsName,{address:null==h?void 0:h.attributes[0].value})),r.createElement("hr",{className:"my-6 opacity-5",style:{marginTop:6,marginBottom:6,opacity:"0.35"}}),r.createElement("div",{className:"block"},r.createElement("span",{className:"block font-bold text-sm"},null==h?void 0:h.name),r.createElement("span",{className:"block font-normal text-sm"},"Invited By: ",r.createElement(m,{className:"font-normal text-sm",contractAddress:d.address,address:null==h?void 0:h.attributes[0].value})," ")))};function h(n,e,t){return i.useContractWrite({addressOrName:n,contractInterface:d.abi},e,{args:t})}var v=function(n){var e=n.name,t=n.label,a=n.register,o=n.required,i=void 0!==o&&o,d=n.placeholder,l=n.type,p=s(n.className,"InputWithLabel");return r.createElement("div",{className:p},r.createElement("label",null,r.createElement("span",{className:"text-sm font-semibold"},t)),r.createElement("input",Object.assign({className:"input",type:l,placeholder:d},a(e,{required:i}))))},_=["data","isError","isLoading","error"];e.CitizenCardList=function(n){var e=n.classNameCard,t=n.classNameCardImage,a=n.contractAddress,o=s(n.className,"CitizenCardList"),i=f(a,"totalCitizens",[]);return i.isError||i.isLoading?null:r.createElement("div",{className:o},Array.from({length:i.data.toNumber()},(function(n,e){return e})).map((function(n){return r.createElement(y,{key:n,tokenId:n,className:e,classNameImage:t})})))},e.FormCitizenIssue=function(n){var e=n.onUpdate,t=n.contractAddress,a=s(n.className,"FormCitizenIssue"),o=p.useForm({defaultValues:{from:""}}),i=o.register,d=o.handleSubmit,l=o.watch;g(o.formState);var c=l(),u=h(t,"issue",[null==c?void 0:c.from]).write;return r.createElement("div",{className:a},r.createElement("form",{onSubmit:d((function(n){u(),e&&e(n)}))},r.createElement("div",{className:"mt-4"},r.createElement(v,{name:"from",label:"From",placeholder:"vitalik.eth",register:i})),r.createElement("button",{className:"btn btn-blue w-full mt-6",type:"submit"},"Issue Citizenship")))},e.FormCitizenRevoke=function(n){var e=n.onUpdate,t=n.contractAddress,a=s(n.className,"FormCitizenRevoke"),o=p.useForm({defaultValues:{from:""}}),i=o.register,d=o.handleSubmit,l=o.watch;g(o.formState);var c=l(),u=h(t,"revoke",[null==c?void 0:c.from]).write;return r.createElement("div",{className:a},r.createElement("form",{onSubmit:d((function(n){u(),e&&e(n)}))},r.createElement("div",{className:"mt-4"},r.createElement(v,{name:"from",label:"From",placeholder:"vitalik.eth",register:i})),r.createElement("button",{className:"btn btn-blue w-full mt-6",type:"submit"},"Revoke Citizenship")))},e.FormFounderAdd=function(n){var e=n.onUpdate,t=n.contractAddress,a=s(n.className,"FormFounderAdd"),o=p.useForm({defaultValues:{from:""}}),i=o.register,d=o.handleSubmit,l=o.watch;g(o.formState);var c=l(),u=h(t,"addFounder",[null==c?void 0:c.from]).write;return r.createElement("div",{className:a},r.createElement("form",{onSubmit:d((function(n){u(),e&&e(n)}))},r.createElement("div",{className:"mt-4"},r.createElement(v,{name:"from",label:"From",placeholder:"vitalik.eth",register:i})),r.createElement("button",{className:"btn btn-blue w-full mt-6",type:"submit"},"Add Founder")))},e.FormFounderRemove=function(n){var e=n.onUpdate,t=n.contractAddress,a=s(n.className,"FormFounderRemove"),o=p.useForm({defaultValues:{from:""}}),i=o.register,d=o.handleSubmit,l=o.watch;g(o.formState);var c=l(),u=h(t,"removeFounder",[null==c?void 0:c.from]).write;return r.createElement("div",{className:a},r.createElement("form",{onSubmit:d((function(n){u(),e&&e(n)}))},r.createElement("div",{className:"mt-4"},r.createElement(v,{name:"from",label:"From",placeholder:"vitalik.eth",register:i})),r.createElement("button",{className:"btn btn-blue w-full mt-6",type:"submit"},"Remove Founder")))}},99133:function(n){n.exports=JSON.parse('{"address":"0x0aec7c174554AF8aEc3680BB58431F6618311510","abi":[{"inputs":[{"internalType":"contract CitizenAlphaMetadata","name":"_metadata","type":"address"},{"internalType":"address[]","name":"_founders","type":"address[]"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":true,"internalType":"address","name":"citizen","type":"address"},{"indexed":true,"internalType":"address","name":"link","type":"address"}],"name":"Issued","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":true,"internalType":"address","name":"citizen","type":"address"},{"indexed":true,"internalType":"address","name":"link","type":"address"}],"name":"Revoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"FOUNDER","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"citizen","type":"address"}],"name":"addFounder","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"citizen","type":"address"}],"name":"getId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"downstreamlink","type":"address"}],"name":"getLink","outputs":[{"internalType":"address","name":"upstreamLink","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"citizen","type":"address"}],"name":"isCitizen","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"citizen","type":"address"}],"name":"isFounder","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"}],"name":"issue","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"citizen","type":"address"}],"name":"removeFounder","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"}],"name":"revoke","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalCitizens","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"transactionHash":"0xc1d6186b2e44c13cdca0c25f11e1e3375fe1c097c19c9ea7f8f2b8eb539d212b","receipt":{"to":null,"from":"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266","contractAddress":"0x0aec7c174554AF8aEc3680BB58431F6618311510","transactionIndex":0,"gasUsed":"2258018","logsBloom":"0x04000004000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000002000000000000000040000000000000000000000000008000000040000000000040000000000000000000080000000020000000000000100000800000000000000000000400010000000000000004000000000000000000000000080000000000000000000002000000000000000000000000000000100000000000000000000000000001000000000000000000002000000200000000000000000000000002000000100000010000060000002000800800000002000000000000a0000000000900000000000c000000000","blockHash":"0x47e4c341746968aa5503871d46680a8a950939c5a3e55401b565bdba7d37a3f7","transactionHash":"0xc1d6186b2e44c13cdca0c25f11e1e3375fe1c097c19c9ea7f8f2b8eb539d212b","logs":[{"transactionIndex":0,"blockNumber":15100003,"transactionHash":"0xc1d6186b2e44c13cdca0c25f11e1e3375fe1c097c19c9ea7f8f2b8eb539d212b","address":"0x0aec7c174554AF8aEc3680BB58431F6618311510","topics":["0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","0x0000000000000000000000000000000000000000000000000000000000000000","0x000000000000000000000000fc4099ef10cc6255e8662ef85cf82067a7f2e3fd","0x0000000000000000000000000000000000000000000000000000000000000000"],"data":"0x","logIndex":0,"blockHash":"0x47e4c341746968aa5503871d46680a8a950939c5a3e55401b565bdba7d37a3f7"},{"transactionIndex":0,"blockNumber":15100003,"transactionHash":"0xc1d6186b2e44c13cdca0c25f11e1e3375fe1c097c19c9ea7f8f2b8eb539d212b","address":"0x0aec7c174554AF8aEc3680BB58431F6618311510","topics":["0x7533f62ec6601bf9c87f8d96bf756b4b495e2a0e26ec9284e4927926ed6b3afd","0x000000000000000000000000fc4099ef10cc6255e8662ef85cf82067a7f2e3fd","0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"],"data":"0x0000000000000000000000000000000000000000000000000000000000000000","logIndex":1,"blockHash":"0x47e4c341746968aa5503871d46680a8a950939c5a3e55401b565bdba7d37a3f7"},{"transactionIndex":0,"blockNumber":15100003,"transactionHash":"0xc1d6186b2e44c13cdca0c25f11e1e3375fe1c097c19c9ea7f8f2b8eb539d212b","address":"0x0aec7c174554AF8aEc3680BB58431F6618311510","topics":["0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d","0x0000000000000000000000000000000000000000000000000000000000000000","0x000000000000000000000000fc4099ef10cc6255e8662ef85cf82067a7f2e3fd","0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"],"data":"0x","logIndex":2,"blockHash":"0x47e4c341746968aa5503871d46680a8a950939c5a3e55401b565bdba7d37a3f7"},{"transactionIndex":0,"blockNumber":15100003,"transactionHash":"0xc1d6186b2e44c13cdca0c25f11e1e3375fe1c097c19c9ea7f8f2b8eb539d212b","address":"0x0aec7c174554AF8aEc3680BB58431F6618311510","topics":["0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d","0x75c8926d5f068ebc530646119a6c8b65785c321705e3a39f3f7898e9030b9c80","0x000000000000000000000000fc4099ef10cc6255e8662ef85cf82067a7f2e3fd","0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"],"data":"0x","logIndex":3,"blockHash":"0x47e4c341746968aa5503871d46680a8a950939c5a3e55401b565bdba7d37a3f7"},{"transactionIndex":0,"blockNumber":15100003,"transactionHash":"0xc1d6186b2e44c13cdca0c25f11e1e3375fe1c097c19c9ea7f8f2b8eb539d212b","address":"0x0aec7c174554AF8aEc3680BB58431F6618311510","topics":["0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","0x0000000000000000000000000000000000000000000000000000000000000000","0x000000000000000000000000d8da6bf26964af9d7eed9e03e53415d37aa96045","0x0000000000000000000000000000000000000000000000000000000000000001"],"data":"0x","logIndex":4,"blockHash":"0x47e4c341746968aa5503871d46680a8a950939c5a3e55401b565bdba7d37a3f7"},{"transactionIndex":0,"blockNumber":15100003,"transactionHash":"0xc1d6186b2e44c13cdca0c25f11e1e3375fe1c097c19c9ea7f8f2b8eb539d212b","address":"0x0aec7c174554AF8aEc3680BB58431F6618311510","topics":["0x7533f62ec6601bf9c87f8d96bf756b4b495e2a0e26ec9284e4927926ed6b3afd","0x000000000000000000000000d8da6bf26964af9d7eed9e03e53415d37aa96045","0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"],"data":"0x0000000000000000000000000000000000000000000000000000000000000001","logIndex":5,"blockHash":"0x47e4c341746968aa5503871d46680a8a950939c5a3e55401b565bdba7d37a3f7"},{"transactionIndex":0,"blockNumber":15100003,"transactionHash":"0xc1d6186b2e44c13cdca0c25f11e1e3375fe1c097c19c9ea7f8f2b8eb539d212b","address":"0x0aec7c174554AF8aEc3680BB58431F6618311510","topics":["0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d","0x0000000000000000000000000000000000000000000000000000000000000000","0x000000000000000000000000d8da6bf26964af9d7eed9e03e53415d37aa96045","0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"],"data":"0x","logIndex":6,"blockHash":"0x47e4c341746968aa5503871d46680a8a950939c5a3e55401b565bdba7d37a3f7"},{"transactionIndex":0,"blockNumber":15100003,"transactionHash":"0xc1d6186b2e44c13cdca0c25f11e1e3375fe1c097c19c9ea7f8f2b8eb539d212b","address":"0x0aec7c174554AF8aEc3680BB58431F6618311510","topics":["0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d","0x75c8926d5f068ebc530646119a6c8b65785c321705e3a39f3f7898e9030b9c80","0x000000000000000000000000d8da6bf26964af9d7eed9e03e53415d37aa96045","0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"],"data":"0x","logIndex":7,"blockHash":"0x47e4c341746968aa5503871d46680a8a950939c5a3e55401b565bdba7d37a3f7"},{"transactionIndex":0,"blockNumber":15100003,"transactionHash":"0xc1d6186b2e44c13cdca0c25f11e1e3375fe1c097c19c9ea7f8f2b8eb539d212b","address":"0x0aec7c174554AF8aEc3680BB58431F6618311510","topics":["0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","0x0000000000000000000000000000000000000000000000000000000000000000","0x00000000000000000000000000de4b13153673bcae2616b67bf822500d325fc3","0x0000000000000000000000000000000000000000000000000000000000000002"],"data":"0x","logIndex":8,"blockHash":"0x47e4c341746968aa5503871d46680a8a950939c5a3e55401b565bdba7d37a3f7"},{"transactionIndex":0,"blockNumber":15100003,"transactionHash":"0xc1d6186b2e44c13cdca0c25f11e1e3375fe1c097c19c9ea7f8f2b8eb539d212b","address":"0x0aec7c174554AF8aEc3680BB58431F6618311510","topics":["0x7533f62ec6601bf9c87f8d96bf756b4b495e2a0e26ec9284e4927926ed6b3afd","0x00000000000000000000000000de4b13153673bcae2616b67bf822500d325fc3","0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"],"data":"0x0000000000000000000000000000000000000000000000000000000000000002","logIndex":9,"blockHash":"0x47e4c341746968aa5503871d46680a8a950939c5a3e55401b565bdba7d37a3f7"},{"transactionIndex":0,"blockNumber":15100003,"transactionHash":"0xc1d6186b2e44c13cdca0c25f11e1e3375fe1c097c19c9ea7f8f2b8eb539d212b","address":"0x0aec7c174554AF8aEc3680BB58431F6618311510","topics":["0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d","0x0000000000000000000000000000000000000000000000000000000000000000","0x00000000000000000000000000de4b13153673bcae2616b67bf822500d325fc3","0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"],"data":"0x","logIndex":10,"blockHash":"0x47e4c341746968aa5503871d46680a8a950939c5a3e55401b565bdba7d37a3f7"},{"transactionIndex":0,"blockNumber":15100003,"transactionHash":"0xc1d6186b2e44c13cdca0c25f11e1e3375fe1c097c19c9ea7f8f2b8eb539d212b","address":"0x0aec7c174554AF8aEc3680BB58431F6618311510","topics":["0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d","0x75c8926d5f068ebc530646119a6c8b65785c321705e3a39f3f7898e9030b9c80","0x00000000000000000000000000de4b13153673bcae2616b67bf822500d325fc3","0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"],"data":"0x","logIndex":11,"blockHash":"0x47e4c341746968aa5503871d46680a8a950939c5a3e55401b565bdba7d37a3f7"}],"blockNumber":15100003,"cumulativeGasUsed":"2258018","status":1,"byzantium":true},"args":["0xe1708FA6bb2844D5384613ef0846F9Bc1e8eC55E",["0xfc4099eF10CC6255E8662eF85CF82067A7f2e3fd","0xd8da6bf26964af9d7eed9e03e53415d37aa96045","0x00De4B13153673BCAE2616b67bf822500d325Fc3"]],"numDeployments":1,"solcInputHash":"87093c10453b6223b158bf404df4bfaf","metadata":"{\\"compiler\\":{\\"version\\":\\"0.8.15+commit.e14f2714\\"},\\"language\\":\\"Solidity\\",\\"output\\":{\\"abi\\":[{\\"inputs\\":[{\\"internalType\\":\\"contract CitizenAlphaMetadata\\",\\"name\\":\\"_metadata\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address[]\\",\\"name\\":\\"_founders\\",\\"type\\":\\"address[]\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"constructor\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"owner\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"approved\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"uint256\\",\\"name\\":\\"tokenId\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"Approval\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"owner\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"operator\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"bool\\",\\"name\\":\\"approved\\",\\"type\\":\\"bool\\"}],\\"name\\":\\"ApprovalForAll\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":false,\\"internalType\\":\\"uint256\\",\\"name\\":\\"id\\",\\"type\\":\\"uint256\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"citizen\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"link\\",\\"type\\":\\"address\\"}],\\"name\\":\\"Issued\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":false,\\"internalType\\":\\"uint256\\",\\"name\\":\\"id\\",\\"type\\":\\"uint256\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"citizen\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"link\\",\\"type\\":\\"address\\"}],\\"name\\":\\"Revoked\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"bytes32\\",\\"name\\":\\"role\\",\\"type\\":\\"bytes32\\"},{\\"indexed\\":true,\\"internalType\\":\\"bytes32\\",\\"name\\":\\"previousAdminRole\\",\\"type\\":\\"bytes32\\"},{\\"indexed\\":true,\\"internalType\\":\\"bytes32\\",\\"name\\":\\"newAdminRole\\",\\"type\\":\\"bytes32\\"}],\\"name\\":\\"RoleAdminChanged\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"bytes32\\",\\"name\\":\\"role\\",\\"type\\":\\"bytes32\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"account\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"sender\\",\\"type\\":\\"address\\"}],\\"name\\":\\"RoleGranted\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"bytes32\\",\\"name\\":\\"role\\",\\"type\\":\\"bytes32\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"account\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"sender\\",\\"type\\":\\"address\\"}],\\"name\\":\\"RoleRevoked\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"from\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"to\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"uint256\\",\\"name\\":\\"tokenId\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"Transfer\\",\\"type\\":\\"event\\"},{\\"inputs\\":[],\\"name\\":\\"DEFAULT_ADMIN_ROLE\\",\\"outputs\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"\\",\\"type\\":\\"bytes32\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"FOUNDER\\",\\"outputs\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"\\",\\"type\\":\\"bytes32\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"citizen\\",\\"type\\":\\"address\\"}],\\"name\\":\\"addFounder\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"to\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"tokenId\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"approve\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"owner\\",\\"type\\":\\"address\\"}],\\"name\\":\\"balanceOf\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"tokenId\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"getApproved\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"citizen\\",\\"type\\":\\"address\\"}],\\"name\\":\\"getId\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"downstreamlink\\",\\"type\\":\\"address\\"}],\\"name\\":\\"getLink\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"upstreamLink\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"role\\",\\"type\\":\\"bytes32\\"}],\\"name\\":\\"getRoleAdmin\\",\\"outputs\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"\\",\\"type\\":\\"bytes32\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"role\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"account\\",\\"type\\":\\"address\\"}],\\"name\\":\\"grantRole\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"role\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"account\\",\\"type\\":\\"address\\"}],\\"name\\":\\"hasRole\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"owner\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"operator\\",\\"type\\":\\"address\\"}],\\"name\\":\\"isApprovedForAll\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"citizen\\",\\"type\\":\\"address\\"}],\\"name\\":\\"isCitizen\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"citizen\\",\\"type\\":\\"address\\"}],\\"name\\":\\"isFounder\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"to\\",\\"type\\":\\"address\\"}],\\"name\\":\\"issue\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"name\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"tokenId\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"ownerOf\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"citizen\\",\\"type\\":\\"address\\"}],\\"name\\":\\"removeFounder\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"role\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"account\\",\\"type\\":\\"address\\"}],\\"name\\":\\"renounceRole\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"from\\",\\"type\\":\\"address\\"}],\\"name\\":\\"revoke\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"role\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"account\\",\\"type\\":\\"address\\"}],\\"name\\":\\"revokeRole\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"from\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"to\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"tokenId\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"safeTransferFrom\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"from\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"to\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"tokenId\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"_data\\",\\"type\\":\\"bytes\\"}],\\"name\\":\\"safeTransferFrom\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"operator\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"bool\\",\\"name\\":\\"approved\\",\\"type\\":\\"bool\\"}],\\"name\\":\\"setApprovalForAll\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes4\\",\\"name\\":\\"interfaceId\\",\\"type\\":\\"bytes4\\"}],\\"name\\":\\"supportsInterface\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"symbol\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"tokenId\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"tokenURI\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"totalCitizens\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"transferFrom\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"}],\\"devdoc\\":{\\"author\\":\\"Kames Geraghty\\",\\"details\\":\\"CitizenAlpha is a Web3 of Trust experiment: combining Soulbound (non-transferable) with Decentralized Identity.\\",\\"kind\\":\\"dev\\",\\"methods\\":{\\"approve(address,uint256)\\":{\\"details\\":\\"See {IERC721-approve}.\\"},\\"balanceOf(address)\\":{\\"details\\":\\"See {IERC721-balanceOf}.\\"},\\"getApproved(uint256)\\":{\\"details\\":\\"See {IERC721-getApproved}.\\"},\\"getRoleAdmin(bytes32)\\":{\\"details\\":\\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role\'s admin, use {_setRoleAdmin}.\\"},\\"grantRole(bytes32,address)\\":{\\"details\\":\\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``\'s admin role.\\"},\\"hasRole(bytes32,address)\\":{\\"details\\":\\"Returns `true` if `account` has been granted `role`.\\"},\\"isApprovedForAll(address,address)\\":{\\"details\\":\\"See {IERC721-isApprovedForAll}.\\"},\\"name()\\":{\\"details\\":\\"See {IERC721Metadata-name}.\\"},\\"ownerOf(uint256)\\":{\\"details\\":\\"See {IERC721-ownerOf}.\\"},\\"renounceRole(bytes32,address)\\":{\\"details\\":\\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function\'s purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\\"},\\"revokeRole(bytes32,address)\\":{\\"details\\":\\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``\'s admin role.\\"},\\"safeTransferFrom(address,address,uint256)\\":{\\"details\\":\\"See {IERC721-safeTransferFrom}.\\"},\\"safeTransferFrom(address,address,uint256,bytes)\\":{\\"details\\":\\"See {IERC721-safeTransferFrom}.\\"},\\"setApprovalForAll(address,bool)\\":{\\"details\\":\\"See {IERC721-setApprovalForAll}.\\"},\\"symbol()\\":{\\"details\\":\\"See {IERC721Metadata-symbol}.\\"},\\"tokenURI(uint256)\\":{\\"details\\":\\"See {IERC721Metadata-tokenURI}.\\"}},\\"version\\":1},\\"userdoc\\":{\\"kind\\":\\"user\\",\\"methods\\":{},\\"notice\\":\\"CitizenAlpha\\",\\"version\\":1}},\\"settings\\":{\\"compilationTarget\\":{\\"contracts/CitizenAlpha.sol\\":\\"CitizenAlpha\\"},\\"evmVersion\\":\\"istanbul\\",\\"libraries\\":{},\\"metadata\\":{\\"bytecodeHash\\":\\"ipfs\\",\\"useLiteralContent\\":true},\\"optimizer\\":{\\"enabled\\":true,\\"runs\\":200},\\"remappings\\":[]},\\"sources\\":{\\"@openzeppelin/contracts/access/AccessControl.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"./IAccessControl.sol\\\\\\";\\\\nimport \\\\\\"../utils/Context.sol\\\\\\";\\\\nimport \\\\\\"../utils/Strings.sol\\\\\\";\\\\nimport \\\\\\"../utils/introspection/ERC165.sol\\\\\\";\\\\n\\\\n/**\\\\n * @dev Contract module that allows children to implement role-based access\\\\n * control mechanisms. This is a lightweight version that doesn\'t allow enumerating role\\\\n * members except through off-chain means by accessing the contract event logs. Some\\\\n * applications may benefit from on-chain enumerability, for those cases see\\\\n * {AccessControlEnumerable}.\\\\n *\\\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\\\n * in the external API and be unique. The best way to achieve this is by\\\\n * using `public constant` hash digests:\\\\n *\\\\n * ```\\\\n * bytes32 public constant MY_ROLE = keccak256(\\\\\\"MY_ROLE\\\\\\");\\\\n * ```\\\\n *\\\\n * Roles can be used to represent a set of permissions. To restrict access to a\\\\n * function call, use {hasRole}:\\\\n *\\\\n * ```\\\\n * function foo() public {\\\\n *     require(hasRole(MY_ROLE, msg.sender));\\\\n *     ...\\\\n * }\\\\n * ```\\\\n *\\\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\\\n * {revokeRole} functions. Each role has an associated admin role, and only\\\\n * accounts that have a role\'s admin role can call {grantRole} and {revokeRole}.\\\\n *\\\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\\\n * that only accounts with this role will be able to grant or revoke other\\\\n * roles. More complex role relationships can be created by using\\\\n * {_setRoleAdmin}.\\\\n *\\\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\\\n * grant and revoke this role. Extra precautions should be taken to secure\\\\n * accounts that have been granted it.\\\\n */\\\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\\\n    struct RoleData {\\\\n        mapping(address => bool) members;\\\\n        bytes32 adminRole;\\\\n    }\\\\n\\\\n    mapping(bytes32 => RoleData) private _roles;\\\\n\\\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\\\n\\\\n    /**\\\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\\\n     * with a standardized message including the required role.\\\\n     *\\\\n     * The format of the revert reason is given by the following regular expression:\\\\n     *\\\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\\\n     *\\\\n     * _Available since v4.1._\\\\n     */\\\\n    modifier onlyRole(bytes32 role) {\\\\n        _checkRole(role);\\\\n        _;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC165-supportsInterface}.\\\\n     */\\\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns `true` if `account` has been granted `role`.\\\\n     */\\\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\\\n        return _roles[role].members[account];\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\\\n     *\\\\n     * Format of the revert message is described in {_checkRole}.\\\\n     *\\\\n     * _Available since v4.6._\\\\n     */\\\\n    function _checkRole(bytes32 role) internal view virtual {\\\\n        _checkRole(role, _msgSender());\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Revert with a standard message if `account` is missing `role`.\\\\n     *\\\\n     * The format of the revert reason is given by the following regular expression:\\\\n     *\\\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\\\n     */\\\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\\\n        if (!hasRole(role, account)) {\\\\n            revert(\\\\n                string(\\\\n                    abi.encodePacked(\\\\n                        \\\\\\"AccessControl: account \\\\\\",\\\\n                        Strings.toHexString(uint160(account), 20),\\\\n                        \\\\\\" is missing role \\\\\\",\\\\n                        Strings.toHexString(uint256(role), 32)\\\\n                    )\\\\n                )\\\\n            );\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\\\n     * {revokeRole}.\\\\n     *\\\\n     * To change a role\'s admin, use {_setRoleAdmin}.\\\\n     */\\\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\\\n        return _roles[role].adminRole;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Grants `role` to `account`.\\\\n     *\\\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\\\n     * event.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - the caller must have ``role``\'s admin role.\\\\n     */\\\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\\\n        _grantRole(role, account);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Revokes `role` from `account`.\\\\n     *\\\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - the caller must have ``role``\'s admin role.\\\\n     */\\\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\\\n        _revokeRole(role, account);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Revokes `role` from the calling account.\\\\n     *\\\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function\'s\\\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\\\n     * if they are compromised (such as when a trusted device is misplaced).\\\\n     *\\\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\\\n     * event.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - the caller must be `account`.\\\\n     */\\\\n    function renounceRole(bytes32 role, address account) public virtual override {\\\\n        require(account == _msgSender(), \\\\\\"AccessControl: can only renounce roles for self\\\\\\");\\\\n\\\\n        _revokeRole(role, account);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Grants `role` to `account`.\\\\n     *\\\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\\\n     * event. Note that unlike {grantRole}, this function doesn\'t perform any\\\\n     * checks on the calling account.\\\\n     *\\\\n     * [WARNING]\\\\n     * ====\\\\n     * This function should only be called from the constructor when setting\\\\n     * up the initial roles for the system.\\\\n     *\\\\n     * Using this function in any other way is effectively circumventing the admin\\\\n     * system imposed by {AccessControl}.\\\\n     * ====\\\\n     *\\\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\\\n     */\\\\n    function _setupRole(bytes32 role, address account) internal virtual {\\\\n        _grantRole(role, account);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Sets `adminRole` as ``role``\'s admin role.\\\\n     *\\\\n     * Emits a {RoleAdminChanged} event.\\\\n     */\\\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\\\n        _roles[role].adminRole = adminRole;\\\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Grants `role` to `account`.\\\\n     *\\\\n     * Internal function without access restriction.\\\\n     */\\\\n    function _grantRole(bytes32 role, address account) internal virtual {\\\\n        if (!hasRole(role, account)) {\\\\n            _roles[role].members[account] = true;\\\\n            emit RoleGranted(role, account, _msgSender());\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Revokes `role` from `account`.\\\\n     *\\\\n     * Internal function without access restriction.\\\\n     */\\\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\\\n        if (hasRole(role, account)) {\\\\n            _roles[role].members[account] = false;\\\\n            emit RoleRevoked(role, account, _msgSender());\\\\n        }\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xb4d87ee2ead4bd192b41c128f287d4b7f24b9e0cd740cc9b476881c461286007\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/access/IAccessControl.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\\\n */\\\\ninterface IAccessControl {\\\\n    /**\\\\n     * @dev Emitted when `newAdminRole` is set as ``role``\'s admin role, replacing `previousAdminRole`\\\\n     *\\\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\\\n     * {RoleAdminChanged} not being emitted signaling this.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\\\n\\\\n    /**\\\\n     * @dev Emitted when `account` is granted `role`.\\\\n     *\\\\n     * `sender` is the account that originated the contract call, an admin role\\\\n     * bearer except when using {AccessControl-_setupRole}.\\\\n     */\\\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\\\n\\\\n    /**\\\\n     * @dev Emitted when `account` is revoked `role`.\\\\n     *\\\\n     * `sender` is the account that originated the contract call:\\\\n     *   - if using `revokeRole`, it is the admin role bearer\\\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\\\n     */\\\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\\\n\\\\n    /**\\\\n     * @dev Returns `true` if `account` has been granted `role`.\\\\n     */\\\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\\\n     * {revokeRole}.\\\\n     *\\\\n     * To change a role\'s admin, use {AccessControl-_setRoleAdmin}.\\\\n     */\\\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\\\n\\\\n    /**\\\\n     * @dev Grants `role` to `account`.\\\\n     *\\\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\\\n     * event.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - the caller must have ``role``\'s admin role.\\\\n     */\\\\n    function grantRole(bytes32 role, address account) external;\\\\n\\\\n    /**\\\\n     * @dev Revokes `role` from `account`.\\\\n     *\\\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - the caller must have ``role``\'s admin role.\\\\n     */\\\\n    function revokeRole(bytes32 role, address account) external;\\\\n\\\\n    /**\\\\n     * @dev Revokes `role` from the calling account.\\\\n     *\\\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function\'s\\\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\\\n     * if they are compromised (such as when a trusted device is misplaced).\\\\n     *\\\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\\\n     * event.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - the caller must be `account`.\\\\n     */\\\\n    function renounceRole(bytes32 role, address account) external;\\\\n}\\\\n\\",\\"keccak256\\":\\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/access/Ownable.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"../utils/Context.sol\\\\\\";\\\\n\\\\n/**\\\\n * @dev Contract module which provides a basic access control mechanism, where\\\\n * there is an account (an owner) that can be granted exclusive access to\\\\n * specific functions.\\\\n *\\\\n * By default, the owner account will be the one that deploys the contract. This\\\\n * can later be changed with {transferOwnership}.\\\\n *\\\\n * This module is used through inheritance. It will make available the modifier\\\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\\\n * the owner.\\\\n */\\\\nabstract contract Ownable is Context {\\\\n    address private _owner;\\\\n\\\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\\\n\\\\n    /**\\\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\\\n     */\\\\n    constructor() {\\\\n        _transferOwnership(_msgSender());\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the address of the current owner.\\\\n     */\\\\n    function owner() public view virtual returns (address) {\\\\n        return _owner;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Throws if called by any account other than the owner.\\\\n     */\\\\n    modifier onlyOwner() {\\\\n        require(owner() == _msgSender(), \\\\\\"Ownable: caller is not the owner\\\\\\");\\\\n        _;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Leaves the contract without owner. It will not be possible to call\\\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\\\n     *\\\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\\\n     * thereby removing any functionality that is only available to the owner.\\\\n     */\\\\n    function renounceOwnership() public virtual onlyOwner {\\\\n        _transferOwnership(address(0));\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\\\n     * Can only be called by the current owner.\\\\n     */\\\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\\\n        require(newOwner != address(0), \\\\\\"Ownable: new owner is the zero address\\\\\\");\\\\n        _transferOwnership(newOwner);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\\\n     * Internal function without access restriction.\\\\n     */\\\\n    function _transferOwnership(address newOwner) internal virtual {\\\\n        address oldOwner = _owner;\\\\n        _owner = newOwner;\\\\n        emit OwnershipTransferred(oldOwner, newOwner);\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"./IERC721.sol\\\\\\";\\\\nimport \\\\\\"./IERC721Receiver.sol\\\\\\";\\\\nimport \\\\\\"./extensions/IERC721Metadata.sol\\\\\\";\\\\nimport \\\\\\"../../utils/Address.sol\\\\\\";\\\\nimport \\\\\\"../../utils/Context.sol\\\\\\";\\\\nimport \\\\\\"../../utils/Strings.sol\\\\\\";\\\\nimport \\\\\\"../../utils/introspection/ERC165.sol\\\\\\";\\\\n\\\\n/**\\\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\\\n * {ERC721Enumerable}.\\\\n */\\\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\\\n    using Address for address;\\\\n    using Strings for uint256;\\\\n\\\\n    // Token name\\\\n    string private _name;\\\\n\\\\n    // Token symbol\\\\n    string private _symbol;\\\\n\\\\n    // Mapping from token ID to owner address\\\\n    mapping(uint256 => address) private _owners;\\\\n\\\\n    // Mapping owner address to token count\\\\n    mapping(address => uint256) private _balances;\\\\n\\\\n    // Mapping from token ID to approved address\\\\n    mapping(uint256 => address) private _tokenApprovals;\\\\n\\\\n    // Mapping from owner to operator approvals\\\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\\\n\\\\n    /**\\\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\\\n     */\\\\n    constructor(string memory name_, string memory symbol_) {\\\\n        _name = name_;\\\\n        _symbol = symbol_;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC165-supportsInterface}.\\\\n     */\\\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\\\n        return\\\\n            interfaceId == type(IERC721).interfaceId ||\\\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\\\n            super.supportsInterface(interfaceId);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC721-balanceOf}.\\\\n     */\\\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\\\n        require(owner != address(0), \\\\\\"ERC721: balance query for the zero address\\\\\\");\\\\n        return _balances[owner];\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC721-ownerOf}.\\\\n     */\\\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\\\n        address owner = _owners[tokenId];\\\\n        require(owner != address(0), \\\\\\"ERC721: owner query for nonexistent token\\\\\\");\\\\n        return owner;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC721Metadata-name}.\\\\n     */\\\\n    function name() public view virtual override returns (string memory) {\\\\n        return _name;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC721Metadata-symbol}.\\\\n     */\\\\n    function symbol() public view virtual override returns (string memory) {\\\\n        return _symbol;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC721Metadata-tokenURI}.\\\\n     */\\\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\\\n        require(_exists(tokenId), \\\\\\"ERC721Metadata: URI query for nonexistent token\\\\\\");\\\\n\\\\n        string memory baseURI = _baseURI();\\\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\\\\"\\\\\\";\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\\\n     * by default, can be overridden in child contracts.\\\\n     */\\\\n    function _baseURI() internal view virtual returns (string memory) {\\\\n        return \\\\\\"\\\\\\";\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC721-approve}.\\\\n     */\\\\n    function approve(address to, uint256 tokenId) public virtual override {\\\\n        address owner = ERC721.ownerOf(tokenId);\\\\n        require(to != owner, \\\\\\"ERC721: approval to current owner\\\\\\");\\\\n\\\\n        require(\\\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\\\n            \\\\\\"ERC721: approve caller is not owner nor approved for all\\\\\\"\\\\n        );\\\\n\\\\n        _approve(to, tokenId);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC721-getApproved}.\\\\n     */\\\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\\\n        require(_exists(tokenId), \\\\\\"ERC721: approved query for nonexistent token\\\\\\");\\\\n\\\\n        return _tokenApprovals[tokenId];\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC721-setApprovalForAll}.\\\\n     */\\\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\\\n        _setApprovalForAll(_msgSender(), operator, approved);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC721-isApprovedForAll}.\\\\n     */\\\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\\\n        return _operatorApprovals[owner][operator];\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC721-transferFrom}.\\\\n     */\\\\n    function transferFrom(\\\\n        address from,\\\\n        address to,\\\\n        uint256 tokenId\\\\n    ) public virtual override {\\\\n        //solhint-disable-next-line max-line-length\\\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\\\\"ERC721: transfer caller is not owner nor approved\\\\\\");\\\\n\\\\n        _transfer(from, to, tokenId);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC721-safeTransferFrom}.\\\\n     */\\\\n    function safeTransferFrom(\\\\n        address from,\\\\n        address to,\\\\n        uint256 tokenId\\\\n    ) public virtual override {\\\\n        safeTransferFrom(from, to, tokenId, \\\\\\"\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC721-safeTransferFrom}.\\\\n     */\\\\n    function safeTransferFrom(\\\\n        address from,\\\\n        address to,\\\\n        uint256 tokenId,\\\\n        bytes memory _data\\\\n    ) public virtual override {\\\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\\\\"ERC721: transfer caller is not owner nor approved\\\\\\");\\\\n        _safeTransfer(from, to, tokenId, _data);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\\\n     *\\\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\\\n     *\\\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `from` cannot be the zero address.\\\\n     * - `to` cannot be the zero address.\\\\n     * - `tokenId` token must exist and be owned by `from`.\\\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function _safeTransfer(\\\\n        address from,\\\\n        address to,\\\\n        uint256 tokenId,\\\\n        bytes memory _data\\\\n    ) internal virtual {\\\\n        _transfer(from, to, tokenId);\\\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\\\\"ERC721: transfer to non ERC721Receiver implementer\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns whether `tokenId` exists.\\\\n     *\\\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\\\n     *\\\\n     * Tokens start existing when they are minted (`_mint`),\\\\n     * and stop existing when they are burned (`_burn`).\\\\n     */\\\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\\\n        return _owners[tokenId] != address(0);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `tokenId` must exist.\\\\n     */\\\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\\\n        require(_exists(tokenId), \\\\\\"ERC721: operator query for nonexistent token\\\\\\");\\\\n        address owner = ERC721.ownerOf(tokenId);\\\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `tokenId` must not exist.\\\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\\\n        _safeMint(to, tokenId, \\\\\\"\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\\\n     */\\\\n    function _safeMint(\\\\n        address to,\\\\n        uint256 tokenId,\\\\n        bytes memory _data\\\\n    ) internal virtual {\\\\n        _mint(to, tokenId);\\\\n        require(\\\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\\\n            \\\\\\"ERC721: transfer to non ERC721Receiver implementer\\\\\\"\\\\n        );\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Mints `tokenId` and transfers it to `to`.\\\\n     *\\\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `tokenId` must not exist.\\\\n     * - `to` cannot be the zero address.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function _mint(address to, uint256 tokenId) internal virtual {\\\\n        require(to != address(0), \\\\\\"ERC721: mint to the zero address\\\\\\");\\\\n        require(!_exists(tokenId), \\\\\\"ERC721: token already minted\\\\\\");\\\\n\\\\n        _beforeTokenTransfer(address(0), to, tokenId);\\\\n\\\\n        _balances[to] += 1;\\\\n        _owners[tokenId] = to;\\\\n\\\\n        emit Transfer(address(0), to, tokenId);\\\\n\\\\n        _afterTokenTransfer(address(0), to, tokenId);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Destroys `tokenId`.\\\\n     * The approval is cleared when the token is burned.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `tokenId` must exist.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function _burn(uint256 tokenId) internal virtual {\\\\n        address owner = ERC721.ownerOf(tokenId);\\\\n\\\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\\\n\\\\n        // Clear approvals\\\\n        _approve(address(0), tokenId);\\\\n\\\\n        _balances[owner] -= 1;\\\\n        delete _owners[tokenId];\\\\n\\\\n        emit Transfer(owner, address(0), tokenId);\\\\n\\\\n        _afterTokenTransfer(owner, address(0), tokenId);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Transfers `tokenId` from `from` to `to`.\\\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `to` cannot be the zero address.\\\\n     * - `tokenId` token must be owned by `from`.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function _transfer(\\\\n        address from,\\\\n        address to,\\\\n        uint256 tokenId\\\\n    ) internal virtual {\\\\n        require(ERC721.ownerOf(tokenId) == from, \\\\\\"ERC721: transfer from incorrect owner\\\\\\");\\\\n        require(to != address(0), \\\\\\"ERC721: transfer to the zero address\\\\\\");\\\\n\\\\n        _beforeTokenTransfer(from, to, tokenId);\\\\n\\\\n        // Clear approvals from the previous owner\\\\n        _approve(address(0), tokenId);\\\\n\\\\n        _balances[from] -= 1;\\\\n        _balances[to] += 1;\\\\n        _owners[tokenId] = to;\\\\n\\\\n        emit Transfer(from, to, tokenId);\\\\n\\\\n        _afterTokenTransfer(from, to, tokenId);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Approve `to` to operate on `tokenId`\\\\n     *\\\\n     * Emits a {Approval} event.\\\\n     */\\\\n    function _approve(address to, uint256 tokenId) internal virtual {\\\\n        _tokenApprovals[tokenId] = to;\\\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\\\n     *\\\\n     * Emits a {ApprovalForAll} event.\\\\n     */\\\\n    function _setApprovalForAll(\\\\n        address owner,\\\\n        address operator,\\\\n        bool approved\\\\n    ) internal virtual {\\\\n        require(owner != operator, \\\\\\"ERC721: approve to caller\\\\\\");\\\\n        _operatorApprovals[owner][operator] = approved;\\\\n        emit ApprovalForAll(owner, operator, approved);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\\\n     * The call is not executed if the target address is not a contract.\\\\n     *\\\\n     * @param from address representing the previous owner of the given token ID\\\\n     * @param to target address that will receive the tokens\\\\n     * @param tokenId uint256 ID of the token to be transferred\\\\n     * @param _data bytes optional data to send along with the call\\\\n     * @return bool whether the call correctly returned the expected magic value\\\\n     */\\\\n    function _checkOnERC721Received(\\\\n        address from,\\\\n        address to,\\\\n        uint256 tokenId,\\\\n        bytes memory _data\\\\n    ) private returns (bool) {\\\\n        if (to.isContract()) {\\\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\\\n                return retval == IERC721Receiver.onERC721Received.selector;\\\\n            } catch (bytes memory reason) {\\\\n                if (reason.length == 0) {\\\\n                    revert(\\\\\\"ERC721: transfer to non ERC721Receiver implementer\\\\\\");\\\\n                } else {\\\\n                    assembly {\\\\n                        revert(add(32, reason), mload(reason))\\\\n                    }\\\\n                }\\\\n            }\\\\n        } else {\\\\n            return true;\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Hook that is called before any token transfer. This includes minting\\\\n     * and burning.\\\\n     *\\\\n     * Calling conditions:\\\\n     *\\\\n     * - When `from` and `to` are both non-zero, ``from``\'s `tokenId` will be\\\\n     * transferred to `to`.\\\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\\\n     * - When `to` is zero, ``from``\'s `tokenId` will be burned.\\\\n     * - `from` and `to` are never both zero.\\\\n     *\\\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\\\n     */\\\\n    function _beforeTokenTransfer(\\\\n        address from,\\\\n        address to,\\\\n        uint256 tokenId\\\\n    ) internal virtual {}\\\\n\\\\n    /**\\\\n     * @dev Hook that is called after any transfer of tokens. This includes\\\\n     * minting and burning.\\\\n     *\\\\n     * Calling conditions:\\\\n     *\\\\n     * - when `from` and `to` are both non-zero.\\\\n     * - `from` and `to` are never both zero.\\\\n     *\\\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\\\n     */\\\\n    function _afterTokenTransfer(\\\\n        address from,\\\\n        address to,\\\\n        uint256 tokenId\\\\n    ) internal virtual {}\\\\n}\\\\n\\",\\"keccak256\\":\\"0x921f012325281f7d81e29c53a13824cf6c2c5d77232065d0d4f3f912e97af6ea\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"../../utils/introspection/IERC165.sol\\\\\\";\\\\n\\\\n/**\\\\n * @dev Required interface of an ERC721 compliant contract.\\\\n */\\\\ninterface IERC721 is IERC165 {\\\\n    /**\\\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\\\n     */\\\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\\\n\\\\n    /**\\\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\\\n     */\\\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\\\n\\\\n    /**\\\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\\\n     */\\\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\\\n\\\\n    /**\\\\n     * @dev Returns the number of tokens in ``owner``\'s account.\\\\n     */\\\\n    function balanceOf(address owner) external view returns (uint256 balance);\\\\n\\\\n    /**\\\\n     * @dev Returns the owner of the `tokenId` token.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `tokenId` must exist.\\\\n     */\\\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\\\n\\\\n    /**\\\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `from` cannot be the zero address.\\\\n     * - `to` cannot be the zero address.\\\\n     * - `tokenId` token must exist and be owned by `from`.\\\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function safeTransferFrom(\\\\n        address from,\\\\n        address to,\\\\n        uint256 tokenId,\\\\n        bytes calldata data\\\\n    ) external;\\\\n\\\\n    /**\\\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `from` cannot be the zero address.\\\\n     * - `to` cannot be the zero address.\\\\n     * - `tokenId` token must exist and be owned by `from`.\\\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function safeTransferFrom(\\\\n        address from,\\\\n        address to,\\\\n        uint256 tokenId\\\\n    ) external;\\\\n\\\\n    /**\\\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\\\n     *\\\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `from` cannot be the zero address.\\\\n     * - `to` cannot be the zero address.\\\\n     * - `tokenId` token must be owned by `from`.\\\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function transferFrom(\\\\n        address from,\\\\n        address to,\\\\n        uint256 tokenId\\\\n    ) external;\\\\n\\\\n    /**\\\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\\\n     * The approval is cleared when the token is transferred.\\\\n     *\\\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The caller must own the token or be an approved operator.\\\\n     * - `tokenId` must exist.\\\\n     *\\\\n     * Emits an {Approval} event.\\\\n     */\\\\n    function approve(address to, uint256 tokenId) external;\\\\n\\\\n    /**\\\\n     * @dev Approve or remove `operator` as an operator for the caller.\\\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The `operator` cannot be the caller.\\\\n     *\\\\n     * Emits an {ApprovalForAll} event.\\\\n     */\\\\n    function setApprovalForAll(address operator, bool _approved) external;\\\\n\\\\n    /**\\\\n     * @dev Returns the account approved for `tokenId` token.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `tokenId` must exist.\\\\n     */\\\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\\\n\\\\n    /**\\\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\\\n     *\\\\n     * See {setApprovalForAll}\\\\n     */\\\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n * @title ERC721 token receiver interface\\\\n * @dev Interface for any contract that wants to support safeTransfers\\\\n * from ERC721 asset contracts.\\\\n */\\\\ninterface IERC721Receiver {\\\\n    /**\\\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\\\n     * by `operator` from `from`, this function is called.\\\\n     *\\\\n     * It must return its Solidity selector to confirm the token transfer.\\\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\\\n     *\\\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\\\n     */\\\\n    function onERC721Received(\\\\n        address operator,\\\\n        address from,\\\\n        uint256 tokenId,\\\\n        bytes calldata data\\\\n    ) external returns (bytes4);\\\\n}\\\\n\\",\\"keccak256\\":\\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"../IERC721.sol\\\\\\";\\\\n\\\\n/**\\\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\\\n */\\\\ninterface IERC721Metadata is IERC721 {\\\\n    /**\\\\n     * @dev Returns the token collection name.\\\\n     */\\\\n    function name() external view returns (string memory);\\\\n\\\\n    /**\\\\n     * @dev Returns the token collection symbol.\\\\n     */\\\\n    function symbol() external view returns (string memory);\\\\n\\\\n    /**\\\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\\\n     */\\\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/utils/Address.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\\\n\\\\npragma solidity ^0.8.1;\\\\n\\\\n/**\\\\n * @dev Collection of functions related to the address type\\\\n */\\\\nlibrary Address {\\\\n    /**\\\\n     * @dev Returns true if `account` is a contract.\\\\n     *\\\\n     * [IMPORTANT]\\\\n     * ====\\\\n     * It is unsafe to assume that an address for which this function returns\\\\n     * false is an externally-owned account (EOA) and not a contract.\\\\n     *\\\\n     * Among others, `isContract` will return false for the following\\\\n     * types of addresses:\\\\n     *\\\\n     *  - an externally-owned account\\\\n     *  - a contract in construction\\\\n     *  - an address where a contract will be created\\\\n     *  - an address where a contract lived, but was destroyed\\\\n     * ====\\\\n     *\\\\n     * [IMPORTANT]\\\\n     * ====\\\\n     * You shouldn\'t rely on `isContract` to protect against flash loan attacks!\\\\n     *\\\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\\\n     * constructor.\\\\n     * ====\\\\n     */\\\\n    function isContract(address account) internal view returns (bool) {\\\\n        // This method relies on extcodesize/address.code.length, which returns 0\\\\n        // for contracts in construction, since the code is only stored at the end\\\\n        // of the constructor execution.\\\\n\\\\n        return account.code.length > 0;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Replacement for Solidity\'s `transfer`: sends `amount` wei to\\\\n     * `recipient`, forwarding all available gas and reverting on errors.\\\\n     *\\\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\\\n     * imposed by `transfer`, making them unable to receive funds via\\\\n     * `transfer`. {sendValue} removes this limitation.\\\\n     *\\\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\\\n     *\\\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\\\n     * taken to not create reentrancy vulnerabilities. Consider using\\\\n     * {ReentrancyGuard} or the\\\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\\\n     */\\\\n    function sendValue(address payable recipient, uint256 amount) internal {\\\\n        require(address(this).balance >= amount, \\\\\\"Address: insufficient balance\\\\\\");\\\\n\\\\n        (bool success, ) = recipient.call{value: amount}(\\\\\\"\\\\\\");\\\\n        require(success, \\\\\\"Address: unable to send value, recipient may have reverted\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Performs a Solidity function call using a low level `call`. A\\\\n     * plain `call` is an unsafe replacement for a function call: use this\\\\n     * function instead.\\\\n     *\\\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\\\n     * function (like regular Solidity function calls).\\\\n     *\\\\n     * Returns the raw returned data. To convert to the expected return value,\\\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `target` must be a contract.\\\\n     * - calling `target` with `data` must not revert.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\\\n        return functionCall(target, data, \\\\\\"Address: low-level call failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCall(\\\\n        address target,\\\\n        bytes memory data,\\\\n        string memory errorMessage\\\\n    ) internal returns (bytes memory) {\\\\n        return functionCallWithValue(target, data, 0, errorMessage);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\\\n     * but also transferring `value` wei to `target`.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - the calling contract must have an ETH balance of at least `value`.\\\\n     * - the called Solidity function must be `payable`.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCallWithValue(\\\\n        address target,\\\\n        bytes memory data,\\\\n        uint256 value\\\\n    ) internal returns (bytes memory) {\\\\n        return functionCallWithValue(target, data, value, \\\\\\"Address: low-level call with value failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCallWithValue(\\\\n        address target,\\\\n        bytes memory data,\\\\n        uint256 value,\\\\n        string memory errorMessage\\\\n    ) internal returns (bytes memory) {\\\\n        require(address(this).balance >= value, \\\\\\"Address: insufficient balance for call\\\\\\");\\\\n        require(isContract(target), \\\\\\"Address: call to non-contract\\\\\\");\\\\n\\\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\\\n        return verifyCallResult(success, returndata, errorMessage);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\\\n     * but performing a static call.\\\\n     *\\\\n     * _Available since v3.3._\\\\n     */\\\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\\\n        return functionStaticCall(target, data, \\\\\\"Address: low-level static call failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\\\n     * but performing a static call.\\\\n     *\\\\n     * _Available since v3.3._\\\\n     */\\\\n    function functionStaticCall(\\\\n        address target,\\\\n        bytes memory data,\\\\n        string memory errorMessage\\\\n    ) internal view returns (bytes memory) {\\\\n        require(isContract(target), \\\\\\"Address: static call to non-contract\\\\\\");\\\\n\\\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\\\n        return verifyCallResult(success, returndata, errorMessage);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\\\n     * but performing a delegate call.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\\\n        return functionDelegateCall(target, data, \\\\\\"Address: low-level delegate call failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\\\n     * but performing a delegate call.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function functionDelegateCall(\\\\n        address target,\\\\n        bytes memory data,\\\\n        string memory errorMessage\\\\n    ) internal returns (bytes memory) {\\\\n        require(isContract(target), \\\\\\"Address: delegate call to non-contract\\\\\\");\\\\n\\\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\\\n        return verifyCallResult(success, returndata, errorMessage);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\'t, either by bubbling the\\\\n     * revert reason using the provided one.\\\\n     *\\\\n     * _Available since v4.3._\\\\n     */\\\\n    function verifyCallResult(\\\\n        bool success,\\\\n        bytes memory returndata,\\\\n        string memory errorMessage\\\\n    ) internal pure returns (bytes memory) {\\\\n        if (success) {\\\\n            return returndata;\\\\n        } else {\\\\n            // Look for revert reason and bubble it up if present\\\\n            if (returndata.length > 0) {\\\\n                // The easiest way to bubble the revert reason is using memory via assembly\\\\n\\\\n                assembly {\\\\n                    let returndata_size := mload(returndata)\\\\n                    revert(add(32, returndata), returndata_size)\\\\n                }\\\\n            } else {\\\\n                revert(errorMessage);\\\\n            }\\\\n        }\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/utils/Context.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n * @dev Provides information about the current execution context, including the\\\\n * sender of the transaction and its data. While these are generally available\\\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\\\n * manner, since when dealing with meta-transactions the account sending and\\\\n * paying for execution may not be the actual sender (as far as an application\\\\n * is concerned).\\\\n *\\\\n * This contract is only required for intermediate, library-like contracts.\\\\n */\\\\nabstract contract Context {\\\\n    function _msgSender() internal view virtual returns (address) {\\\\n        return msg.sender;\\\\n    }\\\\n\\\\n    function _msgData() internal view virtual returns (bytes calldata) {\\\\n        return msg.data;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/utils/Strings.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n * @dev String operations.\\\\n */\\\\nlibrary Strings {\\\\n    bytes16 private constant _HEX_SYMBOLS = \\\\\\"0123456789abcdef\\\\\\";\\\\n\\\\n    /**\\\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\\\n     */\\\\n    function toString(uint256 value) internal pure returns (string memory) {\\\\n        // Inspired by OraclizeAPI\'s implementation - MIT licence\\\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\\\n\\\\n        if (value == 0) {\\\\n            return \\\\\\"0\\\\\\";\\\\n        }\\\\n        uint256 temp = value;\\\\n        uint256 digits;\\\\n        while (temp != 0) {\\\\n            digits++;\\\\n            temp /= 10;\\\\n        }\\\\n        bytes memory buffer = new bytes(digits);\\\\n        while (value != 0) {\\\\n            digits -= 1;\\\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\\\n            value /= 10;\\\\n        }\\\\n        return string(buffer);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\\\n     */\\\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\\\n        if (value == 0) {\\\\n            return \\\\\\"0x00\\\\\\";\\\\n        }\\\\n        uint256 temp = value;\\\\n        uint256 length = 0;\\\\n        while (temp != 0) {\\\\n            length++;\\\\n            temp >>= 8;\\\\n        }\\\\n        return toHexString(value, length);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\\\n     */\\\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\\\n        bytes memory buffer = new bytes(2 * length + 2);\\\\n        buffer[0] = \\\\\\"0\\\\\\";\\\\n        buffer[1] = \\\\\\"x\\\\\\";\\\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\\\n            value >>= 4;\\\\n        }\\\\n        require(value == 0, \\\\\\"Strings: hex length insufficient\\\\\\");\\\\n        return string(buffer);\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"./IERC165.sol\\\\\\";\\\\n\\\\n/**\\\\n * @dev Implementation of the {IERC165} interface.\\\\n *\\\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\\\n * for the additional interface id that will be supported. For example:\\\\n *\\\\n * ```solidity\\\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\\\n * }\\\\n * ```\\\\n *\\\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\\\n */\\\\nabstract contract ERC165 is IERC165 {\\\\n    /**\\\\n     * @dev See {IERC165-supportsInterface}.\\\\n     */\\\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\\\n        return interfaceId == type(IERC165).interfaceId;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n * @dev Interface of the ERC165 standard, as defined in the\\\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\\\n *\\\\n * Implementers can declare support of contract interfaces, which can then be\\\\n * queried by others ({ERC165Checker}).\\\\n *\\\\n * For an implementation, see {ERC165}.\\\\n */\\\\ninterface IERC165 {\\\\n    /**\\\\n     * @dev Returns true if this contract implements the interface defined by\\\\n     * `interfaceId`. See the corresponding\\\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\\\n     * to learn more about how these ids are created.\\\\n     *\\\\n     * This function call must use less than 30 000 gas.\\\\n     */\\\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\\",\\"license\\":\\"MIT\\"},\\"base64-sol/base64.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity >=0.6.0;\\\\n\\\\n/// @title Base64\\\\n/// @author Brecht Devos - <brecht@loopring.org>\\\\n/// @notice Provides functions for encoding/decoding base64\\\\nlibrary Base64 {\\\\n    string internal constant TABLE_ENCODE = \'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\';\\\\n    bytes  internal constant TABLE_DECODE = hex\\\\\\"0000000000000000000000000000000000000000000000000000000000000000\\\\\\"\\\\n                                            hex\\\\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\\\\"\\\\n                                            hex\\\\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\\\\"\\\\n                                            hex\\\\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\\\\";\\\\n\\\\n    function encode(bytes memory data) internal pure returns (string memory) {\\\\n        if (data.length == 0) return \'\';\\\\n\\\\n        // load the table into memory\\\\n        string memory table = TABLE_ENCODE;\\\\n\\\\n        // multiply by 4/3 rounded up\\\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\\\n\\\\n        // add some extra buffer at the end required for the writing\\\\n        string memory result = new string(encodedLen + 32);\\\\n\\\\n        assembly {\\\\n            // set the actual output length\\\\n            mstore(result, encodedLen)\\\\n\\\\n            // prepare the lookup table\\\\n            let tablePtr := add(table, 1)\\\\n\\\\n            // input ptr\\\\n            let dataPtr := data\\\\n            let endPtr := add(dataPtr, mload(data))\\\\n\\\\n            // result ptr, jump over length\\\\n            let resultPtr := add(result, 32)\\\\n\\\\n            // run over the input, 3 bytes at a time\\\\n            for {} lt(dataPtr, endPtr) {}\\\\n            {\\\\n                // read 3 bytes\\\\n                dataPtr := add(dataPtr, 3)\\\\n                let input := mload(dataPtr)\\\\n\\\\n                // write 4 characters\\\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\\\n                resultPtr := add(resultPtr, 1)\\\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\\\n                resultPtr := add(resultPtr, 1)\\\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\\\n                resultPtr := add(resultPtr, 1)\\\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\\\n                resultPtr := add(resultPtr, 1)\\\\n            }\\\\n\\\\n            // padding with \'=\'\\\\n            switch mod(mload(data), 3)\\\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\\\n        }\\\\n\\\\n        return result;\\\\n    }\\\\n\\\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\\\n        bytes memory data = bytes(_data);\\\\n\\\\n        if (data.length == 0) return new bytes(0);\\\\n        require(data.length % 4 == 0, \\\\\\"invalid base64 decoder input\\\\\\");\\\\n\\\\n        // load the table into memory\\\\n        bytes memory table = TABLE_DECODE;\\\\n\\\\n        // every 4 characters represent 3 bytes\\\\n        uint256 decodedLen = (data.length / 4) * 3;\\\\n\\\\n        // add some extra buffer at the end required for the writing\\\\n        bytes memory result = new bytes(decodedLen + 32);\\\\n\\\\n        assembly {\\\\n            // padding with \'=\'\\\\n            let lastBytes := mload(add(data, mload(data)))\\\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\\\n                decodedLen := sub(decodedLen, 1)\\\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\\\n                    decodedLen := sub(decodedLen, 1)\\\\n                }\\\\n            }\\\\n\\\\n            // set the actual output length\\\\n            mstore(result, decodedLen)\\\\n\\\\n            // prepare the lookup table\\\\n            let tablePtr := add(table, 1)\\\\n\\\\n            // input ptr\\\\n            let dataPtr := data\\\\n            let endPtr := add(dataPtr, mload(data))\\\\n\\\\n            // result ptr, jump over length\\\\n            let resultPtr := add(result, 32)\\\\n\\\\n            // run over the input, 4 characters at a time\\\\n            for {} lt(dataPtr, endPtr) {}\\\\n            {\\\\n               // read 4 characters\\\\n               dataPtr := add(dataPtr, 4)\\\\n               let input := mload(dataPtr)\\\\n\\\\n               // write 3 bytes\\\\n               let output := add(\\\\n                   add(\\\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\\\n                   add(\\\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\\\n                    )\\\\n                )\\\\n                mstore(resultPtr, shl(232, output))\\\\n                resultPtr := add(resultPtr, 3)\\\\n            }\\\\n        }\\\\n\\\\n        return result;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xa73959e6ef0b693e4423a562e612370160b934a75e618361ddd8c9c4b8ddbaaf\\",\\"license\\":\\"MIT\\"},\\"contracts/CitizenAlpha.sol\\":{\\"content\\":\\"//SPDX-License-Identifier: MIT\\\\npragma solidity 0.8.15;\\\\n\\\\nimport { Base64 } from \\\\\\"base64-sol/base64.sol\\\\\\";\\\\nimport { Strings } from \\\\\\"@openzeppelin/contracts/utils/Strings.sol\\\\\\";\\\\nimport { AccessControl } from \\\\\\"@openzeppelin/contracts/access/AccessControl.sol\\\\\\";\\\\nimport { ERC721 } from \\\\\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\\\\";\\\\nimport { CitizenAlphaMetadata } from \\\\\\"./CitizenAlphaMetadata.sol\\\\\\";\\\\n\\\\n/**\\\\n * @notice CitizenAlpha\\\\n * @author Kames Geraghty\\\\n * @dev CitizenAlpha is a Web3 of Trust experiment: combining Soulbound (non-transferable) with Decentralized Identity.\\\\n */\\\\ncontract CitizenAlpha is ERC721, AccessControl {\\\\n  using Strings for uint256;\\\\n  using Strings for address;\\\\n\\\\n  address[] private founders;\\\\n  uint256 public totalCitizens;\\\\n  CitizenAlphaMetadata private metadata;\\\\n  mapping(address => uint256) private _tokens;\\\\n  mapping(address => address) private _citizenLinks;\\\\n  bytes32 public constant FOUNDER = keccak256(\\\\\\"FOUNDER\\\\\\");\\\\n\\\\n  event Issued(uint256 id, address indexed citizen, address indexed link);\\\\n  event Revoked(uint256 id, address indexed citizen, address indexed link);\\\\n\\\\n  constructor(CitizenAlphaMetadata _metadata, address[] memory _founders) ERC721(\\\\\\"Citizen\\\\\\", \\\\\\"CIZ\\\\\\") {\\\\n    metadata = _metadata;\\\\n    founders = _founders;\\\\n    for (uint256 i = 0; i < _founders.length; i++) {\\\\n      _issue(_founders[i], 0x0000000000000000000000000000000000000000);\\\\n      _setupRole(DEFAULT_ADMIN_ROLE, _founders[i]);\\\\n      _setupRole(FOUNDER, _founders[i]);\\\\n    }\\\\n  }\\\\n\\\\n  modifier isAuthorizedCitizen(address _citizen) {\\\\n    require(balanceOf(_citizen) == 1, \\\\\\"CitizenAlpha:unauthorized-access\\\\\\");\\\\n    _;\\\\n  }\\\\n\\\\n  /* ================================================================================ */\\\\n  /* External Functions                                                               */\\\\n  /* ================================================================================ */\\\\n\\\\n  function isCitizen(address citizen) external view returns (bool) {\\\\n    return balanceOf(citizen) == 1 ? true : false;\\\\n  }\\\\n\\\\n  function getId(address citizen) external view returns (uint256) {\\\\n    require(_isCitizen(citizen), \\\\\\"CitizenAlpha:not-active-citizen\\\\\\");\\\\n    return _tokens[citizen];\\\\n  }\\\\n\\\\n  function issue(address to) external isAuthorizedCitizen(msg.sender) {\\\\n    require(!_isCitizen(to), \\\\\\"CitizenAlpha:active-citizenship\\\\\\");\\\\n    require(!_isPreviouslyIssued(to), \\\\\\"CitizenAlpha:revoked-citizenship\\\\\\");\\\\n    _issue(to, msg.sender);\\\\n  }\\\\n\\\\n  function revoke(address from) external onlyRole(FOUNDER) isAuthorizedCitizen(msg.sender) {\\\\n    require(_isCitizen(from), \\\\\\"CitizenAlpha:not-active-citizen\\\\\\");\\\\n    uint256 tokenId = _tokens[from];\\\\n    _burn(tokenId);\\\\n    emit Revoked(tokenId, from, msg.sender);\\\\n  }\\\\n\\\\n  function addFounder(address citizen) external onlyRole(DEFAULT_ADMIN_ROLE) {\\\\n    require(_isCitizen(citizen), \\\\\\"CitizenAlpha:not-active-citizen\\\\\\");\\\\n    grantRole(FOUNDER, citizen);\\\\n  }\\\\n\\\\n  function removeFounder(address citizen) external onlyRole(DEFAULT_ADMIN_ROLE) {\\\\n    revokeRole(FOUNDER, citizen);\\\\n  }\\\\n\\\\n  function isFounder(address citizen) external view returns (bool) {\\\\n    return hasRole(FOUNDER, citizen);\\\\n  }\\\\n\\\\n  function getLink(address downstreamlink) external view returns (address upstreamLink) {\\\\n    return _citizenLinks[downstreamlink];\\\\n  }\\\\n\\\\n  function transferFrom(\\\\n    address,\\\\n    address,\\\\n    uint256\\\\n  ) public virtual override {\\\\n    require(false, \\\\\\"CitizenAlpha: Soulbound\\\\\\");\\\\n  }\\\\n\\\\n  function tokenURI(uint256 tokenId) public view override returns (string memory) {\\\\n    return metadata.tokenURI(tokenId);\\\\n  }\\\\n\\\\n  /* ================================================================================ */\\\\n  /* Internal Functions                                                               */\\\\n  /* ================================================================================ */\\\\n  function supportsInterface(bytes4 interfaceId)\\\\n    public\\\\n    view\\\\n    virtual\\\\n    override(ERC721, AccessControl)\\\\n    returns (bool)\\\\n  {\\\\n    return super.supportsInterface(interfaceId);\\\\n  }\\\\n\\\\n  function _isCitizen(address citizen) internal view returns (bool) {\\\\n    return balanceOf(citizen) == 1 ? true : false;\\\\n  }\\\\n\\\\n  /**\\\\n   * @dev First Founder can be issued<>revoked<>issued.\\\\n   *      All other address can only be issued<>revoked.\\\\n   */\\\\n  function _isPreviouslyIssued(address citizen) internal view returns (bool) {\\\\n    return _tokens[citizen] != 0 ? true : false;\\\\n  }\\\\n\\\\n  function _issue(address to, address link) internal {\\\\n    uint256 _totalCitizens = totalCitizens++;\\\\n    _citizenLinks[to] = link;\\\\n    _tokens[to] = _totalCitizens;\\\\n    _mint(to, _totalCitizens);\\\\n    emit Issued(_totalCitizens, to, msg.sender);\\\\n  }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xf6f058ab81f9cdae10ec3eefd55f3dc9c212fd41dcb5f5e5e52f6c2fdb98f584\\",\\"license\\":\\"MIT\\"},\\"contracts/CitizenAlphaMetadata.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: GPL-3.0\\\\npragma solidity ^0.8.6;\\\\n\\\\nimport \\\\\\"hardhat/console.sol\\\\\\";\\\\nimport { Base64 } from \\\\\\"base64-sol/base64.sol\\\\\\";\\\\nimport { Ownable } from \\\\\\"@openzeppelin/contracts/access/Ownable.sol\\\\\\";\\\\nimport { Strings } from \\\\\\"@openzeppelin/contracts/utils/Strings.sol\\\\\\";\\\\nimport { IERC721 } from \\\\\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\\\\";\\\\nimport \\\\\\"./lib/SVG.sol\\\\\\";\\\\nimport \\\\\\"./lib/SVGUtils.sol\\\\\\";\\\\nimport \\\\\\"./lib/SVGColor.sol\\\\\\";\\\\nimport { ENS } from \\\\\\"./interfaces/ENS.sol\\\\\\";\\\\nimport { NameEncoder } from \\\\\\"./lib/NameEncoder.sol\\\\\\";\\\\nimport { IReverseRegistrar } from \\\\\\"./interfaces/IReverseRegistrar.sol\\\\\\";\\\\nimport { ITextResolver } from \\\\\\"./interfaces/ITextResolver.sol\\\\\\";\\\\nimport { IDefaultReverseResolver } from \\\\\\"./interfaces/IDefaultReverseResolver.sol\\\\\\";\\\\n\\\\ncontract CitizenAlphaMetadata is Ownable {\\\\n  using NameEncoder for string;\\\\n  using Strings for address;\\\\n  using Strings for uint256;\\\\n  using Strings for uint8;\\\\n\\\\n  IERC721 private token;\\\\n  SVGColor public svgColor;\\\\n  address private ens = 0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e;\\\\n  address private resolver = 0x4976fb03C32e5B8cfe2b6cCB31c09Ba78EBaBa41;\\\\n  address private reverseRegistrar = 0x084b1c3C81545d370f3634392De611CaaBFf8148;\\\\n  address private defaultReverseResolver = 0xA2C122BE93b0074270ebeE7f6b7292C7deB45047;\\\\n\\\\n  constructor(SVGColor _svgColor) public {\\\\n    svgColor = _svgColor;\\\\n  }\\\\n\\\\n  function tokenURI(uint256 tokenId) external view returns (string memory) {\\\\n    return _constructTokenURI(tokenId);\\\\n  }\\\\n\\\\n  function setToken(IERC721 _token) external onlyOwner {\\\\n    token = _token;\\\\n  }\\\\n\\\\n  /* ================================================================================ */\\\\n  /* Internal Functions                                                               */\\\\n  /* ================================================================================ */\\\\n\\\\n  function _generateImage(\\\\n    string memory _avatar,\\\\n    uint256 tokenId,\\\\n    string memory alias_\\\\n  ) internal view returns (string memory) {\\\\n    if (bytes(_avatar).length == 0) {\\\\n      return\\\\n        string(\\\\n          abi.encodePacked(\\\\n            \\\\\\"data:image/svg+xml;base64,\\\\\\",\\\\n            Base64.encode(bytes(_generate(tokenId, alias_)))\\\\n          )\\\\n        );\\\\n    }\\\\n    return _avatar;\\\\n  }\\\\n\\\\n  function _tokenIdOwnerOfEnsNode(address owner_)\\\\n    internal\\\\n    view\\\\n    returns (\\\\n      string memory,\\\\n      bytes32,\\\\n      ITextResolver\\\\n    )\\\\n  {\\\\n    bytes32 node_ = IReverseRegistrar(reverseRegistrar).node(owner_);\\\\n    string memory _name = IDefaultReverseResolver(defaultReverseResolver).name(node_);\\\\n    (, bytes32 _node) = _name.dnsEncodeName();\\\\n    ITextResolver _resolver = ITextResolver(resolver);\\\\n    return (_name, _node, _resolver);\\\\n  }\\\\n\\\\n  function _constructTokenURI(uint256 _tokenId) internal view returns (string memory) {\\\\n    address citizen_ = token.ownerOf(_tokenId);\\\\n    (string memory alias_, bytes32 node_, ITextResolver resolver_) = _tokenIdOwnerOfEnsNode(\\\\n      citizen_\\\\n    );\\\\n    string memory name_ = string(abi.encodePacked(\\\\\\"Citizen #\\\\\\", _tokenId.toString()));\\\\n    string memory description_ = resolver_.text(node_, \\\\\\"description\\\\\\");\\\\n    string memory did_ = resolver_.text(node_, \\\\\\"did\\\\\\");\\\\n    string memory image_ = _generateImage(resolver_.text(node_, \\\\\\"avatar\\\\\\"), _tokenId, alias_);\\\\n\\\\n    return\\\\n      string(\\\\n        abi.encodePacked(\\\\n          \\\\\\"data:application/json;base64,\\\\\\",\\\\n          Base64.encode(\\\\n            bytes(\\\\n              string.concat(\\\\n                \'{\\\\\\"name\\\\\\":\',\\\\n                \'\\\\\\"\',\\\\n                name_,\\\\n                \'\\\\\\",\',\\\\n                \'\\\\\\"description\\\\\\":\',\\\\n                \'\\\\\\"\',\\\\n                description_,\\\\n                \'\\\\\\",\',\\\\n                \'\\\\\\"image\\\\\\":\',\\\\n                \'\\\\\\"\',\\\\n                image_,\\\\n                \'\\\\\\",\',\\\\n                \'\\\\\\"attributes\\\\\\": [\',\\\\n                \'{\\\\\\"trait_type\\\\\\": \\\\\\"address\\\\\\",\',\\\\n                \'\\\\\\"value\\\\\\": \\\\\\"\',\\\\n                toString(abi.encodePacked(citizen_)),\\\\n                \'\\\\\\"},\',\\\\n                \'{\\\\\\"trait_type\\\\\\": \\\\\\"did\\\\\\",\',\\\\n                \'\\\\\\"value\\\\\\": \\\\\\"\',\\\\n                did_,\\\\n                \'\\\\\\"},\',\\\\n                \'{\\\\\\"trait_type\\\\\\": \\\\\\"alias\\\\\\",\',\\\\n                \'\\\\\\"value\\\\\\": \\\\\\"\',\\\\n                alias_,\\\\n                \'\\\\\\"}\',\\\\n                \\\\\\"]\\\\\\",\\\\n                \\\\\\"}\\\\\\"\\\\n              )\\\\n            )\\\\n          )\\\\n        )\\\\n      );\\\\n  }\\\\n\\\\n  function _generate(uint256 _tokenId, string memory _alias) internal view returns (string memory) {\\\\n    string memory _bgDef = svgUtils.getDefURL(\\\\\\"charcoal\\\\\\");\\\\n\\\\n    return\\\\n      string(\\\\n        abi.encodePacked(\\\\n          svg.start(),\\\\n          _getDefs(),\\\\n          svg.rect(\\\\n            string.concat(\\\\n              svg.prop(\\\\\\"fill\\\\\\", _bgDef),\\\\n              svg.prop(\\\\\\"x\\\\\\", \\\\\\"0\\\\\\"),\\\\n              svg.prop(\\\\\\"y\\\\\\", \\\\\\"0\\\\\\"),\\\\n              svg.prop(\\\\\\"width\\\\\\", \\\\\\"100%\\\\\\"),\\\\n              svg.prop(\\\\\\"height\\\\\\", \\\\\\"100%\\\\\\")\\\\n            ),\\\\n            svgUtils.NULL\\\\n          ),\\\\n          svg.text(\\\\n            string.concat(\\\\n              svg.prop(\\\\\\"x\\\\\\", \\\\\\"50%\\\\\\"),\\\\n              svg.prop(\\\\\\"y\\\\\\", \\\\\\"50%\\\\\\"),\\\\n              svg.prop(\\\\\\"dominant-baseline\\\\\\", \\\\\\"middle\\\\\\"),\\\\n              svg.prop(\\\\\\"text-anchor\\\\\\", \\\\\\"middle\\\\\\"),\\\\n              svg.prop(\\\\\\"font-size\\\\\\", \\\\\\"48px\\\\\\"),\\\\n              svg.prop(\\\\\\"fill\\\\\\", \\\\\\"white\\\\\\")\\\\n            ),\\\\n            string.concat(\\\\\\"CIV #\\\\\\", _tokenId.toString())\\\\n          ),\\\\n          svg.text(\\\\n            string.concat(\\\\n              svg.prop(\\\\\\"x\\\\\\", \\\\\\"50%\\\\\\"),\\\\n              svg.prop(\\\\\\"y\\\\\\", \\\\\\"60%\\\\\\"),\\\\n              svg.prop(\\\\\\"dominant-baseline\\\\\\", \\\\\\"middle\\\\\\"),\\\\n              svg.prop(\\\\\\"text-anchor\\\\\\", \\\\\\"middle\\\\\\"),\\\\n              svg.prop(\\\\\\"font-size\\\\\\", \\\\\\"22px\\\\\\"),\\\\n              svg.prop(\\\\\\"fill\\\\\\", \\\\\\"white\\\\\\")\\\\n            ),\\\\n            _alias\\\\n          ),\\\\n          svg.end()\\\\n        )\\\\n      );\\\\n  }\\\\n\\\\n  function _getDefs() internal view returns (string memory) {\\\\n    return\\\\n      svg.defs(\\\\n        string.concat(\\\\n          svg.linearGradient(\\\\n            string.concat(svg.prop(\\\\\\"id\\\\\\", \\\\\\"charcoal\\\\\\"), svg.prop(\\\\\\"gradientTransform\\\\\\", \\\\\\"rotate(140)\\\\\\")),\\\\n            string.concat(\\\\n              svg.stop(\\\\n                string.concat(\\\\n                  svg.prop(\\\\\\"offset\\\\\\", \\\\\\"0%\\\\\\"),\\\\n                  svg.prop(\\\\\\"stop-color\\\\\\", svgColor.getRgba(\\\\\\"Dark1\\\\\\"))\\\\n                )\\\\n              ),\\\\n              svg.stop(\\\\n                string.concat(\\\\n                  svg.prop(\\\\\\"offset\\\\\\", \\\\\\"70%\\\\\\"),\\\\n                  svg.prop(\\\\\\"stop-color\\\\\\", svgColor.getRgba(\\\\\\"Dark2\\\\\\"))\\\\n                )\\\\n              )\\\\n            )\\\\n          )\\\\n        )\\\\n      );\\\\n  }\\\\n\\\\n  function toRgba(bytes memory _rgba, uint256 offset) public pure returns (bytes memory) {\\\\n    return\\\\n      abi.encodePacked(\\\\n        \\\\\\"rgba(\\\\\\",\\\\n        byte2uint8(_rgba, offset).toString(),\\\\n        \\\\\\",\\\\\\",\\\\n        byte2uint8(_rgba, offset + 1).toString(),\\\\n        \\\\\\",\\\\\\",\\\\n        byte2uint8(_rgba, offset + 2).toString(),\\\\n        \\\\\\",\\\\\\",\\\\n        byte2uint8(_rgba, offset + 3).toString(),\\\\n        \\\\\\"%)\\\\\\"\\\\n      );\\\\n  }\\\\n\\\\n  function byte2uint8(bytes memory _data, uint256 _offset) public pure returns (uint8) {\\\\n    require(_data.length > _offset, \\\\\\"Out of range\\\\\\");\\\\n    return uint8(_data[_offset]);\\\\n  }\\\\n\\\\n  function toString(bytes memory data) public pure returns (string memory) {\\\\n    bytes memory alphabet = \\\\\\"0123456789abcdef\\\\\\";\\\\n\\\\n    bytes memory str = new bytes(2 + data.length * 2);\\\\n    str[0] = \\\\\\"0\\\\\\";\\\\n    str[1] = \\\\\\"x\\\\\\";\\\\n    for (uint256 i = 0; i < data.length; i++) {\\\\n      str[2 + i * 2] = alphabet[uint256(uint8(data[i] >> 4))];\\\\n      str[3 + i * 2] = alphabet[uint256(uint8(data[i] & 0x0f))];\\\\n    }\\\\n    return string(str);\\\\n  }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x1f6a11b443c6ce8db5a4041558aced9cb3d37cb21c7f84e85836aa0fa84bfbc6\\",\\"license\\":\\"GPL-3.0\\"},\\"contracts/interfaces/ENS.sol\\":{\\"content\\":\\"pragma solidity >=0.8.4;\\\\n\\\\ninterface ENS {\\\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\\\n\\\\n    // Logged when the owner of a node transfers ownership to a new account.\\\\n    event Transfer(bytes32 indexed node, address owner);\\\\n\\\\n    // Logged when the resolver for a node changes.\\\\n    event NewResolver(bytes32 indexed node, address resolver);\\\\n\\\\n    // Logged when the TTL of a node changes\\\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\\\n\\\\n    // Logged when an operator is added or removed.\\\\n    event ApprovalForAll(\\\\n        address indexed owner,\\\\n        address indexed operator,\\\\n        bool approved\\\\n    );\\\\n\\\\n    function setRecord(\\\\n        bytes32 node,\\\\n        address owner,\\\\n        address resolver,\\\\n        uint64 ttl\\\\n    ) external;\\\\n\\\\n    function setSubnodeRecord(\\\\n        bytes32 node,\\\\n        bytes32 label,\\\\n        address owner,\\\\n        address resolver,\\\\n        uint64 ttl\\\\n    ) external;\\\\n\\\\n    function setSubnodeOwner(\\\\n        bytes32 node,\\\\n        bytes32 label,\\\\n        address owner\\\\n    ) external returns (bytes32);\\\\n\\\\n    function setResolver(bytes32 node, address resolver) external;\\\\n\\\\n    function setOwner(bytes32 node, address owner) external;\\\\n\\\\n    function setTTL(bytes32 node, uint64 ttl) external;\\\\n\\\\n    function setApprovalForAll(address operator, bool approved) external;\\\\n\\\\n    function owner(bytes32 node) external view returns (address);\\\\n\\\\n    function resolver(bytes32 node) external view returns (address);\\\\n\\\\n    function ttl(bytes32 node) external view returns (uint64);\\\\n\\\\n    function recordExists(bytes32 node) external view returns (bool);\\\\n\\\\n    function isApprovedForAll(address owner, address operator)\\\\n        external\\\\n        view\\\\n        returns (bool);\\\\n}\\\\n\\",\\"keccak256\\":\\"0xf79be82c1a2eb0a77fba4e0972221912e803309081ca460fd2cf61653e55758a\\"},\\"contracts/interfaces/IDefaultReverseResolver.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity >=0.8.4;\\\\n\\\\ninterface IDefaultReverseResolver {\\\\n  function name(bytes32 input) external view returns (string calldata);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x925b12b523e5caf06f107ea15529c741bd6afaa8df5b9396783cff1aa5a4e21f\\",\\"license\\":\\"MIT\\"},\\"contracts/interfaces/IReverseRegistrar.sol\\":{\\"content\\":\\"pragma solidity >=0.8.4;\\\\n\\\\ninterface IReverseRegistrar {\\\\n  function setDefaultResolver(address resolver) external;\\\\n\\\\n  function claim(address owner) external returns (bytes32);\\\\n\\\\n  function claimForAddr(\\\\n    address addr,\\\\n    address owner,\\\\n    address resolver\\\\n  ) external returns (bytes32);\\\\n\\\\n  function claimWithResolver(address owner, address resolver) external returns (bytes32);\\\\n\\\\n  function setName(string memory name) external returns (bytes32);\\\\n\\\\n  function setNameForAddr(\\\\n    address addr,\\\\n    address owner,\\\\n    address resolver,\\\\n    string memory name\\\\n  ) external returns (bytes32);\\\\n\\\\n  function node(address addr) external pure returns (bytes32);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x722f2ccfa92f91c005f396f84de8f54213b93d992552e69a489167c55204558b\\"},\\"contracts/interfaces/ITextResolver.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity >=0.8.4;\\\\n\\\\ninterface ITextResolver {\\\\n  event TextChanged(bytes32 indexed node, string indexed indexedKey, string key);\\\\n\\\\n  /**\\\\n   * Returns the text data associated with an ENS node and key.\\\\n   * @param node The ENS node to query.\\\\n   * @param key The text data key to query.\\\\n   * @return The associated text data.\\\\n   */\\\\n  function text(bytes32 node, string calldata key) external view returns (string memory);\\\\n}\\\\n\\",\\"keccak256\\":\\"0xa99d8aa00bf995a18766905f6e4d72efdca1843fb7092e0222442379731347e5\\",\\"license\\":\\"MIT\\"},\\"contracts/lib/BytesUtils.sol\\":{\\"content\\":\\"//SPDX-License-Identifier: MIT\\\\npragma solidity >=0.8.4;\\\\n\\\\nlibrary BytesUtils {\\\\n  /*\\\\n   * @dev Returns the keccak-256 hash of a byte range.\\\\n   * @param self The byte string to hash.\\\\n   * @param offset The position to start hashing at.\\\\n   * @param len The number of bytes to hash.\\\\n   * @return The hash of the byte range.\\\\n   */\\\\n  function keccak(\\\\n    bytes memory self,\\\\n    uint256 offset,\\\\n    uint256 len\\\\n  ) internal pure returns (bytes32 ret) {\\\\n    require(offset + len <= self.length);\\\\n    assembly {\\\\n      ret := keccak256(add(add(self, 32), offset), len)\\\\n    }\\\\n  }\\\\n\\\\n  /**\\\\n   * @dev Returns the ENS namehash of a DNS-encoded name.\\\\n   * @param self The DNS-encoded name to hash.\\\\n   * @param offset The offset at which to start hashing.\\\\n   * @return The namehash of the name.\\\\n   */\\\\n  function namehash(bytes memory self, uint256 offset) internal pure returns (bytes32) {\\\\n    (bytes32 labelhash, uint256 newOffset) = readLabel(self, offset);\\\\n    if (labelhash == bytes32(0)) {\\\\n      require(offset == self.length - 1, \\\\\\"namehash: Junk at end of name\\\\\\");\\\\n      return bytes32(0);\\\\n    }\\\\n    return keccak256(abi.encodePacked(namehash(self, newOffset), labelhash));\\\\n  }\\\\n\\\\n  /**\\\\n   * @dev Returns the keccak-256 hash of a DNS-encoded label, and the offset to the start of the next label.\\\\n   * @param self The byte string to read a label from.\\\\n   * @param idx The index to read a label at.\\\\n   * @return labelhash The hash of the label at the specified index, or 0 if it is the last label.\\\\n   * @return newIdx The index of the start of the next label.\\\\n   */\\\\n  function readLabel(bytes memory self, uint256 idx)\\\\n    internal\\\\n    pure\\\\n    returns (bytes32 labelhash, uint256 newIdx)\\\\n  {\\\\n    require(idx < self.length, \\\\\\"readLabel: Index out of bounds\\\\\\");\\\\n    uint256 len = uint256(uint8(self[idx]));\\\\n    if (len > 0) {\\\\n      labelhash = keccak(self, idx + 1, len);\\\\n    } else {\\\\n      labelhash = bytes32(0);\\\\n    }\\\\n    newIdx = idx + len + 1;\\\\n  }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x319e6759879d5d686e11aa0b546c6fac08e2cb5e5c92b41bd852c48159f2f2b4\\",\\"license\\":\\"MIT\\"},\\"contracts/lib/NameEncoder.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity 0.8.15;\\\\n\\\\nimport \\\\\\"./BytesUtils.sol\\\\\\";\\\\n\\\\nlibrary NameEncoder {\\\\n  using BytesUtils for bytes;\\\\n\\\\n  function dnsEncodeName(string memory name)\\\\n    internal\\\\n    pure\\\\n    returns (bytes memory dnsName, bytes32 node)\\\\n  {\\\\n    uint8 labelLength = 0;\\\\n    bytes memory bytesName = bytes(name);\\\\n    uint256 length = bytesName.length;\\\\n    dnsName = new bytes(length + 2);\\\\n    node = 0;\\\\n    if (length == 0) {\\\\n      dnsName[0] = 0;\\\\n      return (dnsName, node);\\\\n    }\\\\n\\\\n    // use unchecked to save gas since we check for an underflow\\\\n    // and we check for the length before the loop\\\\n    unchecked {\\\\n      for (uint256 i = length - 1; i >= 0; i--) {\\\\n        if (bytesName[i] == \\\\\\".\\\\\\") {\\\\n          dnsName[i + 1] = bytes1(labelLength);\\\\n          node = keccak256(abi.encodePacked(node, bytesName.keccak(i + 1, labelLength)));\\\\n          labelLength = 0;\\\\n        } else {\\\\n          labelLength += 1;\\\\n          dnsName[i + 1] = bytesName[i];\\\\n        }\\\\n        if (i == 0) {\\\\n          break;\\\\n        }\\\\n      }\\\\n    }\\\\n\\\\n    node = keccak256(abi.encodePacked(node, bytesName.keccak(0, labelLength)));\\\\n\\\\n    dnsName[0] = bytes1(labelLength);\\\\n    return (dnsName, node);\\\\n  }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x3226a3f83a46c88c88218c261c9002571acd4cdce39c7acabdb59d00c91142ac\\",\\"license\\":\\"MIT\\"},\\"contracts/lib/SVG.sol\\":{\\"content\\":\\"//SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.13;\\\\nimport \\\\\\"@openzeppelin/contracts/utils/Strings.sol\\\\\\";\\\\nimport \\\\\\"./SVGUtils.sol\\\\\\";\\\\n/**\\\\n    * @title SVG\\\\n    * @author Kames Geraghty\\\\n    * @notice SVG construction library using web-like API.\\\\n    * @dev Original code from w1nt3r-eth/hot-chain-svg (https://github.com/w1nt3r-eth/hot-chain-svg)\\\\n*/\\\\nlibrary svg {\\\\n    using Strings for uint256;\\\\n    using Strings for uint8;\\\\n\\\\n    function g(string memory _props, string memory _children)\\\\n        internal\\\\n        pure\\\\n        returns (string memory)\\\\n    {\\\\n        return el(\'g\', _props, _children);\\\\n    }\\\\n\\\\n    function path(string memory _props, string memory _children)\\\\n        internal\\\\n        pure\\\\n        returns (string memory)\\\\n    {\\\\n        return el(\'path\', _props, _children);\\\\n    }\\\\n\\\\n    function text(string memory _props, string memory _children)\\\\n        internal\\\\n        pure\\\\n        returns (string memory)\\\\n    {\\\\n        return el(\'text\', _props, _children);\\\\n    }\\\\n\\\\n    function line(string memory _props, string memory _children)\\\\n        internal\\\\n        pure\\\\n        returns (string memory)\\\\n    {\\\\n        return el(\'line\', _props, _children);\\\\n    }\\\\n\\\\n    function circle(string memory _props, string memory _children)\\\\n        internal\\\\n        pure\\\\n        returns (string memory)\\\\n    {\\\\n        return el(\'circle\', _props, _children);\\\\n    }\\\\n\\\\n    function circle(string memory _props)\\\\n        internal\\\\n        pure\\\\n        returns (string memory)\\\\n    {\\\\n        return el(\'circle\', _props);\\\\n    }\\\\n\\\\n    function rect(string memory _props, string memory _children)\\\\n        internal\\\\n        pure\\\\n        returns (string memory)\\\\n    {\\\\n        return el(\'rect\', _props, _children);\\\\n    }\\\\n\\\\n    function rect(string memory _props)\\\\n        internal\\\\n        pure\\\\n        returns (string memory)\\\\n    {\\\\n        return el(\'rect\', _props);\\\\n    }\\\\n    \\\\n    function stop(string memory _props)\\\\n        internal\\\\n        pure\\\\n        returns (string memory)\\\\n    {\\\\n        return el(\'stop\', _props);\\\\n    }\\\\n\\\\n    function filter(string memory _props, string memory _children)\\\\n        internal\\\\n        pure\\\\n        returns (string memory)\\\\n    {\\\\n        return el(\'filter\', _props, _children);\\\\n    }\\\\n    \\\\n    function defs(string memory _children)\\\\n        internal\\\\n        pure\\\\n        returns (string memory)\\\\n    {\\\\n        return el(\'defs\', \\\\\\"\\\\\\", _children);\\\\n    }\\\\n\\\\n    function cdata(string memory _content)\\\\n        internal\\\\n        pure\\\\n        returns (string memory)\\\\n    {\\\\n        return string.concat(\'<![CDATA[\', _content, \']]>\');\\\\n    }\\\\n\\\\n    /* GRADIENTS */\\\\n    function radialGradient(string memory _props, string memory _children)\\\\n        internal\\\\n        pure\\\\n        returns (string memory)\\\\n    {\\\\n        return el(\'radialGradient\', _props, _children);\\\\n    }\\\\n\\\\n    function linearGradient(string memory _props, string memory _children)\\\\n        internal\\\\n        pure\\\\n        returns (string memory)\\\\n    {\\\\n        return el(\'linearGradient\', _props, _children);\\\\n    }\\\\n\\\\n    function gradientStop(\\\\n        uint256 offset,\\\\n        string memory stopColor,\\\\n        string memory _props\\\\n    ) internal pure returns (string memory) {\\\\n        return\\\\n            el(\\\\n                \'stop\',\\\\n                string.concat(\\\\n                    prop(\'stop-color\', stopColor),\\\\n                    \' \',\\\\n                    prop(\'offset\', string.concat(svgUtils.uint2str(offset), \'%\')),\\\\n                    \' \',\\\\n                    _props\\\\n                )\\\\n            );\\\\n    }\\\\n\\\\n    function animateTransform(string memory _props)\\\\n        internal\\\\n        pure\\\\n        returns (string memory)\\\\n    {\\\\n        return el(\'animateTransform\', _props);\\\\n    }\\\\n\\\\n    function image(string memory _href, string memory _props)\\\\n        internal\\\\n        pure\\\\n        returns (string memory)\\\\n    {\\\\n        return\\\\n            el(\\\\n                \'image\',\\\\n                string.concat(prop(\'href\', _href), \' \', _props)\\\\n            );\\\\n    }\\\\n\\\\n    function start(\\\\n    ) internal pure returns (string memory) {\\\\n        return string.concat(\\\\n            \'<svg width=\\\\\\"400\\\\\\" height=\\\\\\"400\\\\\\" style=\\\\\\"background:#541563\\\\\\" \', \'viewBox=\\\\\\"0 0 400 400\\\\\\" \', \'xmlns=\\\\\\"http://www.w3.org/2000/svg\\\\\\" \',\'>\'\\\\n        );\\\\n    }\\\\n\\\\n    function end(\\\\n    ) internal pure returns (bytes memory) {\\\\n        return(\'</svg>\');\\\\n    }\\\\n\\\\n    /* COMMON */\\\\n    // A generic element, can be used to construct any SVG (or HTML) element\\\\n    function el(\\\\n        string memory _tag,\\\\n        string memory _props,\\\\n        string memory _children\\\\n    ) internal pure returns (string memory) {\\\\n        return\\\\n            string.concat(\\\\n                \'<\',\\\\n                _tag,\\\\n                \' \',\\\\n                _props,\\\\n                \'>\',\\\\n                _children,\\\\n                \'</\',\\\\n                _tag,\\\\n                \'>\'\\\\n            );\\\\n    }\\\\n\\\\n    // A generic element, can be used to construct any SVG (or HTML) element without children\\\\n    function el(\\\\n        string memory _tag,\\\\n        string memory _props\\\\n    ) internal pure returns (string memory) {\\\\n        return\\\\n            string.concat(\\\\n                \'<\',\\\\n                _tag,\\\\n                \' \',\\\\n                _props,\\\\n                \'/>\'\\\\n            );\\\\n    }\\\\n\\\\n    // an SVG attribute\\\\n    function prop(string memory _key, string memory _val)\\\\n        internal\\\\n        pure\\\\n        returns (string memory)\\\\n    {\\\\n        return string.concat(_key, \'=\', \'\\\\\\"\', _val, \'\\\\\\" \');\\\\n    }\\\\n\\\\n    function stringifyIntSet(\\\\n        bytes memory _data,\\\\n        uint256 _offset,\\\\n        uint256 _len\\\\n    ) public pure returns (bytes memory) { \\\\n        bytes memory res;\\\\n        require (_data.length >= _offset + _len, \'Out of range\');\\\\n        for (uint i = _offset ; i < _offset + _len ; i++) {\\\\n            res = abi.encodePacked(\\\\n                res,\\\\n                byte2uint8(_data, i).toString(),\\\\n                \' \'\\\\n            );\\\\n        }\\\\n        return res;\\\\n    }\\\\n\\\\n    function byte2uint8(\\\\n        bytes memory _data,\\\\n        uint256 _offset\\\\n    ) public pure returns (uint8) { \\\\n        require (_data.length > _offset, \'Out of range\');\\\\n        return uint8(_data[_offset]);\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xaa0e20fc8263e947ea85d889d510d3a61be1fff67998ff7658d98b875fa9122d\\",\\"license\\":\\"MIT\\"},\\"contracts/lib/SVGColor.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.13;\\\\nimport \\\\\\"@openzeppelin/contracts/utils/Strings.sol\\\\\\";\\\\n\\\\ncontract SVGColor {\\\\n  using Strings for uint256;\\\\n  using Strings for uint8;\\\\n\\\\n  mapping(string => bytes) public colors;\\\\n\\\\n  constructor() {\\\\n    colors[\\\\\\"Black\\\\\\"] = hex\\\\\\"000000\\\\\\";\\\\n    colors[\\\\\\"White\\\\\\"] = hex\\\\\\"FFFFFF\\\\\\";\\\\n    colors[\\\\\\"Dark1\\\\\\"] = hex\\\\\\"232323\\\\\\";\\\\n    colors[\\\\\\"Dark2\\\\\\"] = hex\\\\\\"464646\\\\\\";\\\\n  }\\\\n\\\\n  function getColor(string memory _colorName) public view returns (bytes memory) {\\\\n    require(colors[_colorName].length == 3, \\\\\\"Unknown color\\\\\\");\\\\n    return abi.encodePacked(colors[_colorName], hex\\\\\\"64\\\\\\");\\\\n  }\\\\n\\\\n  function getColor(string memory _colorName, uint8 _alpha) public view returns (bytes memory) {\\\\n    require(colors[_colorName].length == 3, \\\\\\"Unknown color\\\\\\");\\\\n    return abi.encodePacked(colors[_colorName], _alpha);\\\\n  }\\\\n\\\\n  function getRgba(string memory _colorName) public view returns (string memory) {\\\\n    return string(toRgba(getColor(_colorName), 0));\\\\n  }\\\\n\\\\n  // Input: array of colors (without alpha)\\\\n  // Ouputs a linearGradient\\\\n  function autoLinearGradient(\\\\n    bytes memory _colors,\\\\n    bytes memory _id,\\\\n    bytes memory _customAttributes\\\\n  ) public view returns (bytes memory) {\\\\n    return this.autoLinearGradient(\\\\\\"\\\\\\", _colors, _id, _customAttributes);\\\\n  }\\\\n\\\\n  function autoLinearGradient(\\\\n    bytes memory _coordinates,\\\\n    bytes memory _colors,\\\\n    bytes memory _id,\\\\n    bytes memory _customAttributes\\\\n  ) external view returns (bytes memory) {\\\\n    bytes memory _b;\\\\n    if (_coordinates.length > 3) {\\\\n      _b = abi.encodePacked(uint8(128), _coordinates);\\\\n    } else {\\\\n      _b = hex\\\\\\"00\\\\\\";\\\\n    }\\\\n    // Count the number of colors passed, each on 4 byte\\\\n    uint256 colorCount = _colors.length / 4;\\\\n    uint8 i = 0;\\\\n    while (i < colorCount) {\\\\n      _b = abi.encodePacked(\\\\n        _b,\\\\n        uint8(i * (100 / (colorCount - 1))), // grad. stop %\\\\n        uint8(_colors[i * 4]),\\\\n        uint8(_colors[i * 4 + 1]),\\\\n        uint8(_colors[i * 4 + 2]),\\\\n        uint8(_colors[i * 4 + 3])\\\\n      );\\\\n      i++;\\\\n    }\\\\n    return linearGradient(_b, _id, _customAttributes);\\\\n  }\\\\n\\\\n  function linearGradient(\\\\n    bytes memory _lg,\\\\n    bytes memory _id,\\\\n    bytes memory _customAttributes\\\\n  ) public pure returns (bytes memory) {\\\\n    bytes memory grdata;\\\\n    uint8 offset = 1;\\\\n\\\\n    if (uint8(_lg[0]) & 128 == 128) {\\\\n      grdata = abi.encodePacked(\\\\n        \'x1=\\\\\\"\',\\\\n        byte2uint8(_lg, 1).toString(),\\\\n        \'%\\\\\\" x2=\\\\\\"\',\\\\n        byte2uint8(_lg, 2).toString(),\\\\n        \'%\\\\\\" y1=\\\\\\"\',\\\\n        byte2uint8(_lg, 3).toString(),\\\\n        \'%\\\\\\" y2=\\\\\\"\',\\\\n        byte2uint8(_lg, 4).toString(),\\\\n        \'%\\\\\\"\'\\\\n      );\\\\n      offset = 5;\\\\n    }\\\\n    grdata = abi.encodePacked(\'<linearGradient id=\\\\\\"\', _id, \'\\\\\\" \', _customAttributes, grdata, \\\\\\">\\\\\\");\\\\n    for (uint256 i = offset; i < _lg.length; i += 5) {\\\\n      grdata = abi.encodePacked(\\\\n        grdata,\\\\n        \'<stop offset=\\\\\\"\',\\\\n        byte2uint8(_lg, i).toString(),\\\\n        \'%\\\\\\" stop-color=\\\\\\"\',\\\\n        toRgba(_lg, i + 1),\\\\n        \'\\\\\\" id=\\\\\\"\',\\\\n        _id,\\\\n        byte2uint8(_lg, i).toString(),\\\\n        \'\\\\\\"/>\'\\\\n      );\\\\n    }\\\\n    return abi.encodePacked(grdata, \\\\\\"</linearGradient>\\\\\\");\\\\n  }\\\\n\\\\n  function toRgba(bytes memory _rgba, uint256 offset) public pure returns (bytes memory) {\\\\n    return\\\\n      abi.encodePacked(\\\\n        \\\\\\"rgba(\\\\\\",\\\\n        byte2uint8(_rgba, offset).toString(),\\\\n        \\\\\\",\\\\\\",\\\\n        byte2uint8(_rgba, offset + 1).toString(),\\\\n        \\\\\\",\\\\\\",\\\\n        byte2uint8(_rgba, offset + 2).toString(),\\\\n        \\\\\\",\\\\\\",\\\\n        byte2uint8(_rgba, offset + 3).toString(),\\\\n        \\\\\\"%)\\\\\\"\\\\n      );\\\\n  }\\\\n\\\\n  function byte2uint8(bytes memory _data, uint256 _offset) public pure returns (uint8) {\\\\n    require(_data.length > _offset, \\\\\\"Out of range\\\\\\");\\\\n    return uint8(_data[_offset]);\\\\n  }\\\\n\\\\n  // formats rgba white with a specified opacity / alpha\\\\n  function white_a(uint256 _a) internal pure returns (string memory) {\\\\n    return rgba(255, 255, 255, _a);\\\\n  }\\\\n\\\\n  // formats rgba black with a specified opacity / alpha\\\\n  function black_a(uint256 _a) internal pure returns (string memory) {\\\\n    return rgba(0, 0, 0, _a);\\\\n  }\\\\n\\\\n  // formats generic rgba color in css\\\\n  function rgba(\\\\n    uint256 _r,\\\\n    uint256 _g,\\\\n    uint256 _b,\\\\n    uint256 _a\\\\n  ) internal pure returns (string memory) {\\\\n    string memory formattedA = _a < 100 ? string.concat(\\\\\\"0.\\\\\\", uint2str(_a)) : \\\\\\"1\\\\\\";\\\\n    return\\\\n      string.concat(\\\\n        \\\\\\"rgba(\\\\\\",\\\\n        uint2str(_r),\\\\n        \\\\\\",\\\\\\",\\\\n        uint2str(_g),\\\\n        \\\\\\",\\\\\\",\\\\n        uint2str(_b),\\\\n        \\\\\\",\\\\\\",\\\\n        formattedA,\\\\n        \\\\\\")\\\\\\"\\\\n      );\\\\n  }\\\\n\\\\n  function uint2str(uint256 _i) internal pure returns (string memory _uintAsString) {\\\\n    if (_i == 0) {\\\\n      return \\\\\\"0\\\\\\";\\\\n    }\\\\n    uint256 j = _i;\\\\n    uint256 len;\\\\n    while (j != 0) {\\\\n      len++;\\\\n      j /= 10;\\\\n    }\\\\n    bytes memory bstr = new bytes(len);\\\\n    uint256 k = len;\\\\n    while (_i != 0) {\\\\n      k = k - 1;\\\\n      uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\\\n      bytes1 b1 = bytes1(temp);\\\\n      bstr[k] = b1;\\\\n      _i /= 10;\\\\n    }\\\\n    return string(bstr);\\\\n  }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x2e33aeee09dbb045bc969ba9b9bc119394b12f0c1d9014172fea986df942af9c\\",\\"license\\":\\"MIT\\"},\\"contracts/lib/SVGUtils.sol\\":{\\"content\\":\\"//SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.13;\\\\nimport \\\\\\"@openzeppelin/contracts/utils/Strings.sol\\\\\\";\\\\n/**\\\\n  * @title  SVG Utilities\\\\n  * @author Kames Geraghty\\\\n  * @notice The SVG Utilities Library provides functions for constructing SVG; format CSS and numbers.\\\\n  * @dev Original code from w1nt3r-eth/hot-chain-svg (https://github.com/w1nt3r-eth/hot-chain-svg)\\\\n*/\\\\nlibrary svgUtils {\\\\n    using Strings for uint256;\\\\n    using Strings for uint8;\\\\n    \\\\n    /// @notice Empty SVG element\\\\n    string internal constant NULL = \\\\\\"\\\\\\";\\\\n\\\\n    /**\\\\n     * @notice Formats a CSS variable line. Includes a semicolon for formatting.\\\\n     * @param _key User for which to calculate prize amount.\\\\n     * @param _val User for which to calculate prize amount.\\\\n     * @return string Generated CSS variable.\\\\n    */\\\\n    function setCssVar(string memory _key, string memory _val)\\\\n        internal\\\\n        pure\\\\n        returns (string memory)\\\\n    {\\\\n        return string.concat(\\\\\\"--\\\\\\", _key, \\\\\\":\\\\\\", _val, \\\\\\";\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Formats getting a css variable\\\\n     * @param _key User for which to calculate prize amount.\\\\n     * @return string Generated CSS variable.\\\\n    */\\\\n    function getCssVar(string memory _key)\\\\n        internal\\\\n        pure\\\\n        returns (string memory)\\\\n    {\\\\n        return string.concat(\\\\\\"var(--\\\\\\", _key, \\\\\\")\\\\\\");\\\\n    }\\\\n\\\\n    // formats getting a def URL\\\\n    function getDefURL(string memory _id)\\\\n        internal\\\\n        pure\\\\n        returns (string memory)\\\\n    {\\\\n        return string.concat(\\\\\\"url(#\\\\\\", _id, \\\\\\")\\\\\\");\\\\n    }\\\\n\\\\n    // checks if two strings are equal\\\\n    function stringsEqual(string memory _a, string memory _b)\\\\n        internal\\\\n        pure\\\\n        returns (bool)\\\\n    {\\\\n        return\\\\n            keccak256(abi.encodePacked(_a)) == keccak256(abi.encodePacked(_b));\\\\n    }\\\\n\\\\n    // returns the length of a string in characters\\\\n    function utfStringLength(string memory _str)\\\\n        internal\\\\n        pure\\\\n        returns (uint256 length)\\\\n    {\\\\n        uint256 i = 0;\\\\n        bytes memory string_rep = bytes(_str);\\\\n\\\\n        while (i < string_rep.length) {\\\\n            if (string_rep[i] >> 7 == 0) i += 1;\\\\n            else if (string_rep[i] >> 5 == bytes1(uint8(0x6))) i += 2;\\\\n            else if (string_rep[i] >> 4 == bytes1(uint8(0xE))) i += 3;\\\\n            else if (string_rep[i] >> 3 == bytes1(uint8(0x1E)))\\\\n                i += 4;\\\\n                //For safety\\\\n            else i += 1;\\\\n\\\\n            length++;\\\\n        }\\\\n    }\\\\n\\\\n    function round2Txt(\\\\n        uint256 _value,\\\\n        uint8 _decimals,\\\\n        uint8 _prec\\\\n    ) internal pure returns (bytes memory) {\\\\n        return abi.encodePacked(\\\\n            (_value / 10 ** _decimals).toString(), \\\\n            \\\\\\".\\\\\\",\\\\n            ( _value / 10 ** (_decimals - _prec) -\\\\n                _value / 10 ** (_decimals ) * 10 ** _prec\\\\n            ).toString()\\\\n        );\\\\n    }\\\\n\\\\n     // converts an unsigned integer to a string\\\\n     function uint2str(uint256 _i)\\\\n     internal\\\\n     pure\\\\n     returns (string memory _uintAsString)\\\\n {\\\\n     if (_i == 0) {\\\\n         return \\\\\\"0\\\\\\";\\\\n     }\\\\n     uint256 j = _i;\\\\n     uint256 len;\\\\n     while (j != 0) {\\\\n         len++;\\\\n         j /= 10;\\\\n     }\\\\n     bytes memory bstr = new bytes(len);\\\\n     uint256 k = len;\\\\n     while (_i != 0) {\\\\n         k = k - 1;\\\\n         uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\\\n         bytes1 b1 = bytes1(temp);\\\\n         bstr[k] = b1;\\\\n         _i /= 10;\\\\n     }\\\\n     return string(bstr);\\\\n }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xe8ac1b5676a5d9850445e97799a09a1a30026f03728cb2286eeba23bc57b06e0\\",\\"license\\":\\"MIT\\"},\\"hardhat/console.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity >= 0.4.22 <0.9.0;\\\\n\\\\nlibrary console {\\\\n\\\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\\\n\\\\n\\\\tfunction _sendLogPayload(bytes memory payload) private view {\\\\n\\\\t\\\\tuint256 payloadLength = payload.length;\\\\n\\\\t\\\\taddress consoleAddress = CONSOLE_ADDRESS;\\\\n\\\\t\\\\tassembly {\\\\n\\\\t\\\\t\\\\tlet payloadStart := add(payload, 32)\\\\n\\\\t\\\\t\\\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\\\n\\\\t\\\\t}\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log() internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log()\\\\\\"));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction logInt(int p0) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(int)\\\\\\", p0));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction logUint(uint p0) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint)\\\\\\", p0));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction logString(string memory p0) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string)\\\\\\", p0));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction logBool(bool p0) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool)\\\\\\", p0));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction logAddress(address p0) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address)\\\\\\", p0));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction logBytes(bytes memory p0) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bytes)\\\\\\", p0));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction logBytes1(bytes1 p0) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bytes1)\\\\\\", p0));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction logBytes2(bytes2 p0) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bytes2)\\\\\\", p0));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction logBytes3(bytes3 p0) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bytes3)\\\\\\", p0));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction logBytes4(bytes4 p0) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bytes4)\\\\\\", p0));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction logBytes5(bytes5 p0) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bytes5)\\\\\\", p0));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction logBytes6(bytes6 p0) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bytes6)\\\\\\", p0));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction logBytes7(bytes7 p0) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bytes7)\\\\\\", p0));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction logBytes8(bytes8 p0) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bytes8)\\\\\\", p0));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction logBytes9(bytes9 p0) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bytes9)\\\\\\", p0));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction logBytes10(bytes10 p0) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bytes10)\\\\\\", p0));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction logBytes11(bytes11 p0) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bytes11)\\\\\\", p0));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction logBytes12(bytes12 p0) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bytes12)\\\\\\", p0));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction logBytes13(bytes13 p0) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bytes13)\\\\\\", p0));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction logBytes14(bytes14 p0) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bytes14)\\\\\\", p0));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction logBytes15(bytes15 p0) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bytes15)\\\\\\", p0));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction logBytes16(bytes16 p0) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bytes16)\\\\\\", p0));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction logBytes17(bytes17 p0) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bytes17)\\\\\\", p0));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction logBytes18(bytes18 p0) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bytes18)\\\\\\", p0));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction logBytes19(bytes19 p0) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bytes19)\\\\\\", p0));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction logBytes20(bytes20 p0) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bytes20)\\\\\\", p0));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction logBytes21(bytes21 p0) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bytes21)\\\\\\", p0));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction logBytes22(bytes22 p0) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bytes22)\\\\\\", p0));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction logBytes23(bytes23 p0) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bytes23)\\\\\\", p0));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction logBytes24(bytes24 p0) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bytes24)\\\\\\", p0));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction logBytes25(bytes25 p0) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bytes25)\\\\\\", p0));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction logBytes26(bytes26 p0) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bytes26)\\\\\\", p0));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction logBytes27(bytes27 p0) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bytes27)\\\\\\", p0));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction logBytes28(bytes28 p0) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bytes28)\\\\\\", p0));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction logBytes29(bytes29 p0) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bytes29)\\\\\\", p0));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction logBytes30(bytes30 p0) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bytes30)\\\\\\", p0));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction logBytes31(bytes31 p0) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bytes31)\\\\\\", p0));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction logBytes32(bytes32 p0) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bytes32)\\\\\\", p0));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint)\\\\\\", p0));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string)\\\\\\", p0));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool)\\\\\\", p0));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address)\\\\\\", p0));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, uint p1) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,uint)\\\\\\", p0, p1));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, string memory p1) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,string)\\\\\\", p0, p1));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, bool p1) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,bool)\\\\\\", p0, p1));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, address p1) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,address)\\\\\\", p0, p1));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, uint p1) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,uint)\\\\\\", p0, p1));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, string memory p1) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,string)\\\\\\", p0, p1));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, bool p1) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,bool)\\\\\\", p0, p1));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, address p1) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,address)\\\\\\", p0, p1));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, uint p1) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,uint)\\\\\\", p0, p1));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, string memory p1) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,string)\\\\\\", p0, p1));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, bool p1) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,bool)\\\\\\", p0, p1));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, address p1) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,address)\\\\\\", p0, p1));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, uint p1) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,uint)\\\\\\", p0, p1));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, string memory p1) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,string)\\\\\\", p0, p1));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, bool p1) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,bool)\\\\\\", p0, p1));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, address p1) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,address)\\\\\\", p0, p1));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, uint p1, uint p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,uint,uint)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,uint,string)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, uint p1, bool p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,uint,bool)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, uint p1, address p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,uint,address)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,string,uint)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,string,string)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,string,bool)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, string memory p1, address p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,string,address)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, bool p1, uint p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,bool,uint)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,bool,string)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, bool p1, bool p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,bool,bool)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, bool p1, address p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,bool,address)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, address p1, uint p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,address,uint)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, address p1, string memory p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,address,string)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, address p1, bool p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,address,bool)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, address p1, address p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,address,address)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,uint,uint)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,uint,string)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,uint,bool)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, uint p1, address p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,uint,address)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,string,uint)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,string,string)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,string,bool)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,string,address)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,bool,uint)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,bool,string)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,bool,bool)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, bool p1, address p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,bool,address)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, address p1, uint p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,address,uint)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,address,string)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, address p1, bool p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,address,bool)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, address p1, address p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,address,address)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, uint p1, uint p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,uint,uint)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,uint,string)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, uint p1, bool p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,uint,bool)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, uint p1, address p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,uint,address)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,string,uint)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,string,string)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,string,bool)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, string memory p1, address p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,string,address)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, bool p1, uint p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,bool,uint)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,bool,string)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, bool p1, bool p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,bool,bool)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, bool p1, address p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,bool,address)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, address p1, uint p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,address,uint)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, address p1, string memory p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,address,string)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, address p1, bool p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,address,bool)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, address p1, address p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,address,address)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, uint p1, uint p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,uint,uint)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, uint p1, string memory p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,uint,string)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, uint p1, bool p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,uint,bool)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, uint p1, address p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,uint,address)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, string memory p1, uint p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,string,uint)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,string,string)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, string memory p1, bool p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,string,bool)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, string memory p1, address p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,string,address)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, bool p1, uint p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,bool,uint)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, bool p1, string memory p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,bool,string)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, bool p1, bool p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,bool,bool)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, bool p1, address p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,bool,address)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, address p1, uint p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,address,uint)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, address p1, string memory p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,address,string)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, address p1, bool p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,address,bool)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, address p1, address p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,address,address)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,uint,uint,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,uint,uint,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,uint,uint,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,uint,uint,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,uint,string,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,uint,string,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,uint,string,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,uint,string,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,uint,bool,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,uint,bool,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,uint,bool,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,uint,bool,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,uint,address,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,uint,address,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,uint,address,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,uint,address,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,string,uint,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,string,uint,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,string,uint,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,string,uint,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,string,string,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,string,string,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,string,string,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,string,string,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,string,bool,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,string,bool,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,string,bool,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,string,bool,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,string,address,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,string,address,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,string,address,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,string,address,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,bool,uint,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,bool,uint,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,bool,uint,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,bool,uint,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,bool,string,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,bool,string,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,bool,string,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,bool,string,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,bool,bool,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,bool,bool,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,bool,bool,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,bool,bool,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,bool,address,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,bool,address,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,bool,address,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,bool,address,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,address,uint,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,address,uint,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,address,uint,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,address,uint,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,address,string,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,address,string,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,address,string,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,address,string,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,address,bool,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,address,bool,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,address,bool,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,address,bool,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,address,address,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,address,address,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,address,address,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,address,address,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,uint,uint,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,uint,uint,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,uint,uint,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,uint,uint,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,uint,string,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,uint,string,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,uint,string,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,uint,string,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,uint,bool,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,uint,bool,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,uint,bool,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,uint,bool,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,uint,address,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,uint,address,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,uint,address,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,uint,address,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,string,uint,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,string,uint,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,string,uint,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,string,uint,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,string,string,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,string,string,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,string,string,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,string,string,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,string,bool,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,string,bool,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,string,bool,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,string,bool,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,string,address,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,string,address,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,string,address,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,string,address,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,bool,uint,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,bool,uint,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,bool,uint,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,bool,uint,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,bool,string,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,bool,string,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,bool,string,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,bool,string,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,bool,bool,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,bool,bool,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,bool,bool,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,bool,bool,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,bool,address,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,bool,address,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,bool,address,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,bool,address,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,address,uint,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,address,uint,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,address,uint,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,address,uint,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,address,string,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,address,string,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,address,string,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,address,string,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,address,bool,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,address,bool,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,address,bool,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,address,bool,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,address,address,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,address,address,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,address,address,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,address,address,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,uint,uint,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,uint,uint,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,uint,uint,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,uint,uint,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,uint,string,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,uint,string,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,uint,string,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,uint,string,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,uint,bool,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,uint,bool,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,uint,bool,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,uint,bool,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,uint,address,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,uint,address,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,uint,address,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,uint,address,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,string,uint,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,string,uint,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,string,uint,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,string,uint,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,string,string,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,string,string,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,string,string,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,string,string,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,string,bool,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,string,bool,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,string,bool,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,string,bool,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,string,address,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,string,address,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,string,address,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,string,address,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,bool,uint,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,bool,uint,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,bool,uint,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,bool,uint,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,bool,string,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,bool,string,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,bool,string,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,bool,string,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,bool,bool,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,bool,bool,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,bool,bool,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,bool,bool,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,bool,address,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,bool,address,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,bool,address,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,bool,address,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,address,uint,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,address,uint,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,address,uint,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,address,uint,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,address,string,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,address,string,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,address,string,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,address,string,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,address,bool,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,address,bool,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,address,bool,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,address,bool,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,address,address,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,address,address,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,address,address,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,address,address,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,uint,uint,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,uint,uint,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,uint,uint,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,uint,uint,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,uint,string,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,uint,string,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,uint,string,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,uint,string,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,uint,bool,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,uint,bool,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,uint,bool,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,uint,bool,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,uint,address,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,uint,address,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,uint,address,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,uint,address,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,string,uint,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,string,uint,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,string,uint,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,string,uint,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,string,string,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,string,string,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,string,string,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,string,string,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,string,bool,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,string,bool,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,string,bool,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,string,bool,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,string,address,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,string,address,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,string,address,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,string,address,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,bool,uint,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,bool,uint,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,bool,uint,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,bool,uint,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,bool,string,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,bool,string,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,bool,string,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,bool,string,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,bool,bool,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,bool,bool,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,bool,bool,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,bool,bool,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,bool,address,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,bool,address,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,bool,address,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,bool,address,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,address,uint,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,address,uint,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,address,uint,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,address,uint,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,address,string,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,address,string,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,address,string,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,address,string,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,address,bool,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,address,bool,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,address,bool,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,address,bool,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,address,address,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,address,address,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,address,address,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,address,address,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\\",\\"license\\":\\"MIT\\"}},\\"version\\":1}","bytecode":"0x60806040523480156200001157600080fd5b50604051620025e2380380620025e28339810160408190526200003491620004f4565b6040518060400160405280600781526020016621b4ba34bd32b760c91b8152506040518060400160405280600381526020016221a4ad60e91b81525081600090816200008191906200066d565b5060016200009082826200066d565b5050600980546001600160a01b0319166001600160a01b038516179055508051620000c390600790602084019062000432565b5060005b8151811015620001805762000100828281518110620000ea57620000ea62000739565b602002602001015160006200018960201b60201c565b620001316000801b8383815181106200011d576200011d62000739565b60200260200101516200022d60201b60201c565b6200016b7f75c8926d5f068ebc530646119a6c8b65785c321705e3a39f3f7898e9030b9c808383815181106200011d576200011d62000739565b80620001778162000765565b915050620000c7565b5050506200079c565b60088054600091826200019c8362000765565b909155506001600160a01b038481166000908152600b6020908152604080832080546001600160a01b03191694881694909417909355600a9052208190559050620001e883826200023d565b60405181815233906001600160a01b038516907f7533f62ec6601bf9c87f8d96bf756b4b495e2a0e26ec9284e4927926ed6b3afd9060200160405180910390a3505050565b62000239828262000389565b5050565b6001600160a01b038216620002995760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064015b60405180910390fd5b6000818152600260205260409020546001600160a01b031615620003005760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640162000290565b6001600160a01b03821660009081526003602052604081208054600192906200032b90849062000781565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60008281526006602090815260408083206001600160a01b038516845290915290205460ff16620002395760008281526006602090815260408083206001600160a01b03851684529091529020805460ff19166001179055620003e93390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b505050565b8280548282559060005260206000209081019282156200048a579160200282015b828111156200048a57825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019062000453565b50620004989291506200049c565b5090565b5b808211156200049857600081556001016200049d565b6001600160a01b0381168114620004c957600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b8051620004ef81620004b3565b919050565b600080604083850312156200050857600080fd5b82516200051581620004b3565b602084810151919350906001600160401b03808211156200053557600080fd5b818601915086601f8301126200054a57600080fd5b8151818111156200055f576200055f620004cc565b8060051b604051601f19603f83011681018181108582111715620005875762000587620004cc565b604052918252848201925083810185019189831115620005a657600080fd5b938501935b82851015620005cf57620005bf85620004e2565b84529385019392850192620005ab565b8096505050505050509250929050565b600181811c90821680620005f457607f821691505b6020821081036200061557634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200042d57600081815260208120601f850160051c81016020861015620006445750805b601f850160051c820191505b81811015620006655782815560010162000650565b505050505050565b81516001600160401b03811115620006895762000689620004cc565b620006a1816200069a8454620005df565b846200061b565b602080601f831160018114620006d95760008415620006c05750858301515b600019600386901b1c1916600185901b17855562000665565b600085815260208120601f198616915b828110156200070a57888601518255948401946001909101908401620006e9565b5085821015620007295787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016200077a576200077a6200074f565b5060010190565b600082198211156200079757620007976200074f565b500190565b611e3680620007ac6000396000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c806374a8f10311610104578063bd7b09e4116100a2578063d547741f11610071578063d547741f146103f9578063e985e9c51461040c578063ef4ec04714610448578063f3caad031461045b57600080fd5b8063bd7b09e4146103b5578063c7b57841146103be578063c87b56dd146103d1578063ca58f2d3146103e457600080fd5b80639d6abe4f116100de5780639d6abe4f1461035b578063a217fddf14610387578063a22cb4651461038f578063b88d4fde146103a257600080fd5b806374a8f1031461032d57806391d148541461034057806395d89b411461035357600080fd5b80632f2ff15d116101715780636352211e1161014b5780636352211e146102e157806365f68c89146102f457806370a082311461030757806371e928af1461031a57600080fd5b80632f2ff15d146102a857806336568abe146102bb57806342842e0e146102ce57600080fd5b8063095ea7b3116101ad578063095ea7b31461023c5780632267b30d1461025157806323b872dd14610264578063248a9ca31461027757600080fd5b806301ffc9a7146101d457806306fdde03146101fc578063081812fc14610211575b600080fd5b6101e76101e2366004611843565b61046e565b60405190151581526020015b60405180910390f35b61020461047f565b6040516101f391906118b8565b61022461021f3660046118cb565b610511565b6040516001600160a01b0390911681526020016101f3565b61024f61024a366004611900565b6105ab565b005b61024f61025f36600461192a565b6106c0565b61024f610272366004611945565b6106e7565b61029a6102853660046118cb565b60009081526006602052604090206001015490565b6040519081526020016101f3565b61024f6102b6366004611981565b61072f565b61024f6102c9366004611981565b610754565b61024f6102dc366004611945565b6107ce565b6102246102ef3660046118cb565b6107e9565b61029a61030236600461192a565b610860565b61029a61031536600461192a565b6108a3565b61024f61032836600461192a565b61092a565b61024f61033b36600461192a565b610a39565b6101e761034e366004611981565b610b37565b610204610b62565b61022461036936600461192a565b6001600160a01b039081166000908152600b60205260409020541690565b61029a600081565b61024f61039d3660046119ad565b610b71565b61024f6103b0366004611a58565b610b7c565b61029a60085481565b6101e76103cc36600461192a565b610bfe565b6102046103df3660046118cb565b610c18565b61029a600080516020611de183398151915281565b61024f610407366004611981565b610c8a565b6101e761041a366004611b03565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b61024f61045636600461192a565b610caf565b6101e761046936600461192a565b610cf7565b600061047982610d18565b92915050565b60606000805461048e90611b2d565b80601f01602080910402602001604051908101604052809291908181526020018280546104ba90611b2d565b80156105075780601f106104dc57610100808354040283529160200191610507565b820191906000526020600020905b8154815290600101906020018083116104ea57829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b031661058f5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b60006105b6826107e9565b9050806001600160a01b0316836001600160a01b0316036106235760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610586565b336001600160a01b038216148061063f575061063f813361041a565b6106b15760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610586565b6106bb8383610d3d565b505050565b60006106cb81610dab565b6106e3600080516020611de183398151915283610c8a565b5050565b60405162461bcd60e51b815260206004820152601760248201527f436974697a656e416c7068613a20536f756c626f756e640000000000000000006044820152606401610586565b60008281526006602052604090206001015461074a81610dab565b6106bb8383610db8565b6001600160a01b03811633146107c45760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610586565b6106e38282610e3e565b6106bb83838360405180602001604052806000815250610b7c565b6000818152600260205260408120546001600160a01b0316806104795760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610586565b600061086b82610cf7565b6108875760405162461bcd60e51b815260040161058690611b67565b506001600160a01b03166000908152600a602052604090205490565b60006001600160a01b03821661090e5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610586565b506001600160a01b031660009081526003602052604090205490565b33610934816108a3565b6001146109835760405162461bcd60e51b815260206004820181905260248201527f436974697a656e416c7068613a756e617574686f72697a65642d6163636573736044820152606401610586565b61098c82610cf7565b156109d95760405162461bcd60e51b815260206004820152601f60248201527f436974697a656e416c7068613a6163746976652d636974697a656e73686970006044820152606401610586565b6109e282610ea5565b15610a2f5760405162461bcd60e51b815260206004820181905260248201527f436974697a656e416c7068613a7265766f6b65642d636974697a656e736869706044820152606401610586565b6106e38233610ecb565b600080516020611de1833981519152610a5181610dab565b33610a5b816108a3565b600114610aaa5760405162461bcd60e51b815260206004820181905260248201527f436974697a656e416c7068613a756e617574686f72697a65642d6163636573736044820152606401610586565b610ab383610cf7565b610acf5760405162461bcd60e51b815260040161058690611b67565b6001600160a01b0383166000908152600a6020526040902054610af181610f6c565b60405181815233906001600160a01b038616907fa96db3edccc72000dff77fc380cfbabe1646529eadd835eb11f2f8315669ec769060200160405180910390a350505050565b60009182526006602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60606001805461048e90611b2d565b6106e3338383611007565b610b8633836110cd565b610bec5760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6044820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b6064820152608401610586565b610bf8848484846111c4565b50505050565b6000610479600080516020611de183398151915283610b37565b60095460405163c87b56dd60e01b8152600481018390526060916001600160a01b03169063c87b56dd90602401600060405180830381865afa158015610c62573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104799190810190611b9e565b600082815260066020526040902060010154610ca581610dab565b6106bb8383610e3e565b6000610cba81610dab565b610cc382610cf7565b610cdf5760405162461bcd60e51b815260040161058690611b67565b6106e3600080516020611de18339815191528361072f565b6000610d02826108a3565b600114610d10576000610479565b600192915050565b60006001600160e01b03198216637965db0b60e01b14806104795750610479826111f7565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610d72826107e9565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b610db58133611247565b50565b610dc28282610b37565b6106e35760008281526006602090815260408083206001600160a01b03851684529091529020805460ff19166001179055610dfa3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b610e488282610b37565b156106e35760008281526006602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6001600160a01b0381166000908152600a60205260408120548103610d10576000610479565b6008805460009182610edc83611c2b565b909155506001600160a01b038481166000908152600b6020908152604080832080546001600160a01b03191694881694909417909355600a9052208190559050610f2683826112ab565b60405181815233906001600160a01b038516907f7533f62ec6601bf9c87f8d96bf756b4b495e2a0e26ec9284e4927926ed6b3afd906020015b60405180910390a3505050565b6000610f77826107e9565b9050610f84600083610d3d565b6001600160a01b0381166000908152600360205260408120805460019290610fad908490611c44565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b816001600160a01b0316836001600160a01b0316036110685760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610586565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c319101610f5f565b6000818152600260205260408120546001600160a01b03166111465760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610586565b6000611151836107e9565b9050806001600160a01b0316846001600160a01b0316148061119857506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b806111bc5750836001600160a01b03166111b184610511565b6001600160a01b0316145b949350505050565b6111cf8484846113ed565b6111db84848484611589565b610bf85760405162461bcd60e51b815260040161058690611c5b565b60006001600160e01b031982166380ac58cd60e01b148061122857506001600160e01b03198216635b5e139f60e01b145b8061047957506301ffc9a760e01b6001600160e01b0319831614610479565b6112518282610b37565b6106e357611269816001600160a01b0316601461168a565b61127483602061168a565b604051602001611285929190611cad565b60408051601f198184030181529082905262461bcd60e51b8252610586916004016118b8565b6001600160a01b0382166113015760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610586565b6000818152600260205260409020546001600160a01b0316156113665760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610586565b6001600160a01b038216600090815260036020526040812080546001929061138f908490611d22565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b826001600160a01b0316611400826107e9565b6001600160a01b0316146114645760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610586565b6001600160a01b0382166114c65760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610586565b6114d1600082610d3d565b6001600160a01b03831660009081526003602052604081208054600192906114fa908490611c44565b90915550506001600160a01b0382166000908152600360205260408120805460019290611528908490611d22565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b60006001600160a01b0384163b1561167f57604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906115cd903390899088908890600401611d3a565b6020604051808303816000875af1925050508015611608575060408051601f3d908101601f1916820190925261160591810190611d77565b60015b611665573d808015611636576040519150601f19603f3d011682016040523d82523d6000602084013e61163b565b606091505b50805160000361165d5760405162461bcd60e51b815260040161058690611c5b565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506111bc565b506001949350505050565b60606000611699836002611d94565b6116a4906002611d22565b67ffffffffffffffff8111156116bc576116bc6119e9565b6040519080825280601f01601f1916602001820160405280156116e6576020820181803683370190505b509050600360fc1b8160008151811061170157611701611db3565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061173057611730611db3565b60200101906001600160f81b031916908160001a9053506000611754846002611d94565b61175f906001611d22565b90505b60018111156117d7576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061179357611793611db3565b1a60f81b8282815181106117a9576117a9611db3565b60200101906001600160f81b031916908160001a90535060049490941c936117d081611dc9565b9050611762565b5083156118265760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610586565b9392505050565b6001600160e01b031981168114610db557600080fd5b60006020828403121561185557600080fd5b81356118268161182d565b60005b8381101561187b578181015183820152602001611863565b83811115610bf85750506000910152565b600081518084526118a4816020860160208601611860565b601f01601f19169290920160200192915050565b602081526000611826602083018461188c565b6000602082840312156118dd57600080fd5b5035919050565b80356001600160a01b03811681146118fb57600080fd5b919050565b6000806040838503121561191357600080fd5b61191c836118e4565b946020939093013593505050565b60006020828403121561193c57600080fd5b611826826118e4565b60008060006060848603121561195a57600080fd5b611963846118e4565b9250611971602085016118e4565b9150604084013590509250925092565b6000806040838503121561199457600080fd5b823591506119a4602084016118e4565b90509250929050565b600080604083850312156119c057600080fd5b6119c9836118e4565b9150602083013580151581146119de57600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611a2857611a286119e9565b604052919050565b600067ffffffffffffffff821115611a4a57611a4a6119e9565b50601f01601f191660200190565b60008060008060808587031215611a6e57600080fd5b611a77856118e4565b9350611a85602086016118e4565b925060408501359150606085013567ffffffffffffffff811115611aa857600080fd5b8501601f81018713611ab957600080fd5b8035611acc611ac782611a30565b6119ff565b818152886020838501011115611ae157600080fd5b8160208401602083013760006020838301015280935050505092959194509250565b60008060408385031215611b1657600080fd5b611b1f836118e4565b91506119a4602084016118e4565b600181811c90821680611b4157607f821691505b602082108103611b6157634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252601f908201527f436974697a656e416c7068613a6e6f742d6163746976652d636974697a656e00604082015260600190565b600060208284031215611bb057600080fd5b815167ffffffffffffffff811115611bc757600080fd5b8201601f81018413611bd857600080fd5b8051611be6611ac782611a30565b818152856020838501011115611bfb57600080fd5b611c0c826020830160208601611860565b95945050505050565b634e487b7160e01b600052601160045260246000fd5b600060018201611c3d57611c3d611c15565b5060010190565b600082821015611c5657611c56611c15565b500390565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351611ce5816017850160208801611860565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351611d16816028840160208801611860565b01602801949350505050565b60008219821115611d3557611d35611c15565b500190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611d6d9083018461188c565b9695505050505050565b600060208284031215611d8957600080fd5b81516118268161182d565b6000816000190483118215151615611dae57611dae611c15565b500290565b634e487b7160e01b600052603260045260246000fd5b600081611dd857611dd8611c15565b50600019019056fe75c8926d5f068ebc530646119a6c8b65785c321705e3a39f3f7898e9030b9c80a2646970667358221220ea5035b3fc59d233716c410e2fe72c525c5eb3fbaee0ad85612dd5220b3baf1c64736f6c634300080f0033","deployedBytecode":"0x608060405234801561001057600080fd5b50600436106101cf5760003560e01c806374a8f10311610104578063bd7b09e4116100a2578063d547741f11610071578063d547741f146103f9578063e985e9c51461040c578063ef4ec04714610448578063f3caad031461045b57600080fd5b8063bd7b09e4146103b5578063c7b57841146103be578063c87b56dd146103d1578063ca58f2d3146103e457600080fd5b80639d6abe4f116100de5780639d6abe4f1461035b578063a217fddf14610387578063a22cb4651461038f578063b88d4fde146103a257600080fd5b806374a8f1031461032d57806391d148541461034057806395d89b411461035357600080fd5b80632f2ff15d116101715780636352211e1161014b5780636352211e146102e157806365f68c89146102f457806370a082311461030757806371e928af1461031a57600080fd5b80632f2ff15d146102a857806336568abe146102bb57806342842e0e146102ce57600080fd5b8063095ea7b3116101ad578063095ea7b31461023c5780632267b30d1461025157806323b872dd14610264578063248a9ca31461027757600080fd5b806301ffc9a7146101d457806306fdde03146101fc578063081812fc14610211575b600080fd5b6101e76101e2366004611843565b61046e565b60405190151581526020015b60405180910390f35b61020461047f565b6040516101f391906118b8565b61022461021f3660046118cb565b610511565b6040516001600160a01b0390911681526020016101f3565b61024f61024a366004611900565b6105ab565b005b61024f61025f36600461192a565b6106c0565b61024f610272366004611945565b6106e7565b61029a6102853660046118cb565b60009081526006602052604090206001015490565b6040519081526020016101f3565b61024f6102b6366004611981565b61072f565b61024f6102c9366004611981565b610754565b61024f6102dc366004611945565b6107ce565b6102246102ef3660046118cb565b6107e9565b61029a61030236600461192a565b610860565b61029a61031536600461192a565b6108a3565b61024f61032836600461192a565b61092a565b61024f61033b36600461192a565b610a39565b6101e761034e366004611981565b610b37565b610204610b62565b61022461036936600461192a565b6001600160a01b039081166000908152600b60205260409020541690565b61029a600081565b61024f61039d3660046119ad565b610b71565b61024f6103b0366004611a58565b610b7c565b61029a60085481565b6101e76103cc36600461192a565b610bfe565b6102046103df3660046118cb565b610c18565b61029a600080516020611de183398151915281565b61024f610407366004611981565b610c8a565b6101e761041a366004611b03565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b61024f61045636600461192a565b610caf565b6101e761046936600461192a565b610cf7565b600061047982610d18565b92915050565b60606000805461048e90611b2d565b80601f01602080910402602001604051908101604052809291908181526020018280546104ba90611b2d565b80156105075780601f106104dc57610100808354040283529160200191610507565b820191906000526020600020905b8154815290600101906020018083116104ea57829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b031661058f5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b60006105b6826107e9565b9050806001600160a01b0316836001600160a01b0316036106235760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610586565b336001600160a01b038216148061063f575061063f813361041a565b6106b15760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610586565b6106bb8383610d3d565b505050565b60006106cb81610dab565b6106e3600080516020611de183398151915283610c8a565b5050565b60405162461bcd60e51b815260206004820152601760248201527f436974697a656e416c7068613a20536f756c626f756e640000000000000000006044820152606401610586565b60008281526006602052604090206001015461074a81610dab565b6106bb8383610db8565b6001600160a01b03811633146107c45760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610586565b6106e38282610e3e565b6106bb83838360405180602001604052806000815250610b7c565b6000818152600260205260408120546001600160a01b0316806104795760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610586565b600061086b82610cf7565b6108875760405162461bcd60e51b815260040161058690611b67565b506001600160a01b03166000908152600a602052604090205490565b60006001600160a01b03821661090e5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610586565b506001600160a01b031660009081526003602052604090205490565b33610934816108a3565b6001146109835760405162461bcd60e51b815260206004820181905260248201527f436974697a656e416c7068613a756e617574686f72697a65642d6163636573736044820152606401610586565b61098c82610cf7565b156109d95760405162461bcd60e51b815260206004820152601f60248201527f436974697a656e416c7068613a6163746976652d636974697a656e73686970006044820152606401610586565b6109e282610ea5565b15610a2f5760405162461bcd60e51b815260206004820181905260248201527f436974697a656e416c7068613a7265766f6b65642d636974697a656e736869706044820152606401610586565b6106e38233610ecb565b600080516020611de1833981519152610a5181610dab565b33610a5b816108a3565b600114610aaa5760405162461bcd60e51b815260206004820181905260248201527f436974697a656e416c7068613a756e617574686f72697a65642d6163636573736044820152606401610586565b610ab383610cf7565b610acf5760405162461bcd60e51b815260040161058690611b67565b6001600160a01b0383166000908152600a6020526040902054610af181610f6c565b60405181815233906001600160a01b038616907fa96db3edccc72000dff77fc380cfbabe1646529eadd835eb11f2f8315669ec769060200160405180910390a350505050565b60009182526006602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60606001805461048e90611b2d565b6106e3338383611007565b610b8633836110cd565b610bec5760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6044820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b6064820152608401610586565b610bf8848484846111c4565b50505050565b6000610479600080516020611de183398151915283610b37565b60095460405163c87b56dd60e01b8152600481018390526060916001600160a01b03169063c87b56dd90602401600060405180830381865afa158015610c62573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104799190810190611b9e565b600082815260066020526040902060010154610ca581610dab565b6106bb8383610e3e565b6000610cba81610dab565b610cc382610cf7565b610cdf5760405162461bcd60e51b815260040161058690611b67565b6106e3600080516020611de18339815191528361072f565b6000610d02826108a3565b600114610d10576000610479565b600192915050565b60006001600160e01b03198216637965db0b60e01b14806104795750610479826111f7565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610d72826107e9565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b610db58133611247565b50565b610dc28282610b37565b6106e35760008281526006602090815260408083206001600160a01b03851684529091529020805460ff19166001179055610dfa3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b610e488282610b37565b156106e35760008281526006602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6001600160a01b0381166000908152600a60205260408120548103610d10576000610479565b6008805460009182610edc83611c2b565b909155506001600160a01b038481166000908152600b6020908152604080832080546001600160a01b03191694881694909417909355600a9052208190559050610f2683826112ab565b60405181815233906001600160a01b038516907f7533f62ec6601bf9c87f8d96bf756b4b495e2a0e26ec9284e4927926ed6b3afd906020015b60405180910390a3505050565b6000610f77826107e9565b9050610f84600083610d3d565b6001600160a01b0381166000908152600360205260408120805460019290610fad908490611c44565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b816001600160a01b0316836001600160a01b0316036110685760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610586565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c319101610f5f565b6000818152600260205260408120546001600160a01b03166111465760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610586565b6000611151836107e9565b9050806001600160a01b0316846001600160a01b0316148061119857506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b806111bc5750836001600160a01b03166111b184610511565b6001600160a01b0316145b949350505050565b6111cf8484846113ed565b6111db84848484611589565b610bf85760405162461bcd60e51b815260040161058690611c5b565b60006001600160e01b031982166380ac58cd60e01b148061122857506001600160e01b03198216635b5e139f60e01b145b8061047957506301ffc9a760e01b6001600160e01b0319831614610479565b6112518282610b37565b6106e357611269816001600160a01b0316601461168a565b61127483602061168a565b604051602001611285929190611cad565b60408051601f198184030181529082905262461bcd60e51b8252610586916004016118b8565b6001600160a01b0382166113015760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610586565b6000818152600260205260409020546001600160a01b0316156113665760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610586565b6001600160a01b038216600090815260036020526040812080546001929061138f908490611d22565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b826001600160a01b0316611400826107e9565b6001600160a01b0316146114645760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610586565b6001600160a01b0382166114c65760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610586565b6114d1600082610d3d565b6001600160a01b03831660009081526003602052604081208054600192906114fa908490611c44565b90915550506001600160a01b0382166000908152600360205260408120805460019290611528908490611d22565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b60006001600160a01b0384163b1561167f57604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906115cd903390899088908890600401611d3a565b6020604051808303816000875af1925050508015611608575060408051601f3d908101601f1916820190925261160591810190611d77565b60015b611665573d808015611636576040519150601f19603f3d011682016040523d82523d6000602084013e61163b565b606091505b50805160000361165d5760405162461bcd60e51b815260040161058690611c5b565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506111bc565b506001949350505050565b60606000611699836002611d94565b6116a4906002611d22565b67ffffffffffffffff8111156116bc576116bc6119e9565b6040519080825280601f01601f1916602001820160405280156116e6576020820181803683370190505b509050600360fc1b8160008151811061170157611701611db3565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061173057611730611db3565b60200101906001600160f81b031916908160001a9053506000611754846002611d94565b61175f906001611d22565b90505b60018111156117d7576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061179357611793611db3565b1a60f81b8282815181106117a9576117a9611db3565b60200101906001600160f81b031916908160001a90535060049490941c936117d081611dc9565b9050611762565b5083156118265760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610586565b9392505050565b6001600160e01b031981168114610db557600080fd5b60006020828403121561185557600080fd5b81356118268161182d565b60005b8381101561187b578181015183820152602001611863565b83811115610bf85750506000910152565b600081518084526118a4816020860160208601611860565b601f01601f19169290920160200192915050565b602081526000611826602083018461188c565b6000602082840312156118dd57600080fd5b5035919050565b80356001600160a01b03811681146118fb57600080fd5b919050565b6000806040838503121561191357600080fd5b61191c836118e4565b946020939093013593505050565b60006020828403121561193c57600080fd5b611826826118e4565b60008060006060848603121561195a57600080fd5b611963846118e4565b9250611971602085016118e4565b9150604084013590509250925092565b6000806040838503121561199457600080fd5b823591506119a4602084016118e4565b90509250929050565b600080604083850312156119c057600080fd5b6119c9836118e4565b9150602083013580151581146119de57600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611a2857611a286119e9565b604052919050565b600067ffffffffffffffff821115611a4a57611a4a6119e9565b50601f01601f191660200190565b60008060008060808587031215611a6e57600080fd5b611a77856118e4565b9350611a85602086016118e4565b925060408501359150606085013567ffffffffffffffff811115611aa857600080fd5b8501601f81018713611ab957600080fd5b8035611acc611ac782611a30565b6119ff565b818152886020838501011115611ae157600080fd5b8160208401602083013760006020838301015280935050505092959194509250565b60008060408385031215611b1657600080fd5b611b1f836118e4565b91506119a4602084016118e4565b600181811c90821680611b4157607f821691505b602082108103611b6157634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252601f908201527f436974697a656e416c7068613a6e6f742d6163746976652d636974697a656e00604082015260600190565b600060208284031215611bb057600080fd5b815167ffffffffffffffff811115611bc757600080fd5b8201601f81018413611bd857600080fd5b8051611be6611ac782611a30565b818152856020838501011115611bfb57600080fd5b611c0c826020830160208601611860565b95945050505050565b634e487b7160e01b600052601160045260246000fd5b600060018201611c3d57611c3d611c15565b5060010190565b600082821015611c5657611c56611c15565b500390565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351611ce5816017850160208801611860565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351611d16816028840160208801611860565b01602801949350505050565b60008219821115611d3557611d35611c15565b500190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611d6d9083018461188c565b9695505050505050565b600060208284031215611d8957600080fd5b81516118268161182d565b6000816000190483118215151615611dae57611dae611c15565b500290565b634e487b7160e01b600052603260045260246000fd5b600081611dd857611dd8611c15565b50600019019056fe75c8926d5f068ebc530646119a6c8b65785c321705e3a39f3f7898e9030b9c80a2646970667358221220ea5035b3fc59d233716c410e2fe72c525c5eb3fbaee0ad85612dd5220b3baf1c64736f6c634300080f0033","devdoc":{"author":"Kames Geraghty","details":"CitizenAlpha is a Web3 of Trust experiment: combining Soulbound (non-transferable) with Decentralized Identity.","kind":"dev","methods":{"approve(address,uint256)":{"details":"See {IERC721-approve}."},"balanceOf(address)":{"details":"See {IERC721-balanceOf}."},"getApproved(uint256)":{"details":"See {IERC721-getApproved}."},"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role\'s admin, use {_setRoleAdmin}."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``\'s admin role."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"isApprovedForAll(address,address)":{"details":"See {IERC721-isApprovedForAll}."},"name()":{"details":"See {IERC721Metadata-name}."},"ownerOf(uint256)":{"details":"See {IERC721-ownerOf}."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function\'s purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``\'s admin role."},"safeTransferFrom(address,address,uint256)":{"details":"See {IERC721-safeTransferFrom}."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"See {IERC721-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC721-setApprovalForAll}."},"symbol()":{"details":"See {IERC721Metadata-symbol}."},"tokenURI(uint256)":{"details":"See {IERC721Metadata-tokenURI}."}},"version":1},"userdoc":{"kind":"user","methods":{},"notice":"CitizenAlpha","version":1},"storageLayout":{"storage":[{"astId":523,"contract":"contracts/CitizenAlpha.sol:CitizenAlpha","label":"_name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":525,"contract":"contracts/CitizenAlpha.sol:CitizenAlpha","label":"_symbol","offset":0,"slot":"1","type":"t_string_storage"},{"astId":529,"contract":"contracts/CitizenAlpha.sol:CitizenAlpha","label":"_owners","offset":0,"slot":"2","type":"t_mapping(t_uint256,t_address)"},{"astId":533,"contract":"contracts/CitizenAlpha.sol:CitizenAlpha","label":"_balances","offset":0,"slot":"3","type":"t_mapping(t_address,t_uint256)"},{"astId":537,"contract":"contracts/CitizenAlpha.sol:CitizenAlpha","label":"_tokenApprovals","offset":0,"slot":"4","type":"t_mapping(t_uint256,t_address)"},{"astId":543,"contract":"contracts/CitizenAlpha.sol:CitizenAlpha","label":"_operatorApprovals","offset":0,"slot":"5","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"},{"astId":24,"contract":"contracts/CitizenAlpha.sol:CitizenAlpha","label":"_roles","offset":0,"slot":"6","type":"t_mapping(t_bytes32,t_struct(RoleData)19_storage)"},{"astId":2221,"contract":"contracts/CitizenAlpha.sol:CitizenAlpha","label":"founders","offset":0,"slot":"7","type":"t_array(t_address)dyn_storage"},{"astId":2223,"contract":"contracts/CitizenAlpha.sol:CitizenAlpha","label":"totalCitizens","offset":0,"slot":"8","type":"t_uint256"},{"astId":2226,"contract":"contracts/CitizenAlpha.sol:CitizenAlpha","label":"metadata","offset":0,"slot":"9","type":"t_contract(CitizenAlphaMetadata)3306"},{"astId":2230,"contract":"contracts/CitizenAlpha.sol:CitizenAlpha","label":"_tokens","offset":0,"slot":"10","type":"t_mapping(t_address,t_uint256)"},{"astId":2234,"contract":"contracts/CitizenAlpha.sol:CitizenAlpha","label":"_citizenLinks","offset":0,"slot":"11","type":"t_mapping(t_address,t_address)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_address)dyn_storage":{"base":"t_address","encoding":"dynamic_array","label":"address[]","numberOfBytes":"32"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_contract(CitizenAlphaMetadata)3306":{"encoding":"inplace","label":"contract CitizenAlphaMetadata","numberOfBytes":"20"},"t_mapping(t_address,t_address)":{"encoding":"mapping","key":"t_address","label":"mapping(address => address)","numberOfBytes":"32","value":"t_address"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_bytes32,t_struct(RoleData)19_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct AccessControl.RoleData)","numberOfBytes":"32","value":"t_struct(RoleData)19_storage"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(RoleData)19_storage":{"encoding":"inplace","label":"struct AccessControl.RoleData","members":[{"astId":16,"contract":"contracts/CitizenAlpha.sol:CitizenAlpha","label":"members","offset":0,"slot":"0","type":"t_mapping(t_address,t_bool)"},{"astId":18,"contract":"contracts/CitizenAlpha.sol:CitizenAlpha","label":"adminRole","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}}}')}}]);