/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { CitizenResolver, CitizenResolverInterface } from "../CitizenResolver";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_metadata_",
        type: "address",
      },
      {
        internalType: "address",
        name: "_notary_",
        type: "address",
      },
      {
        internalType: "address",
        name: "_token_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "getCitizen",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "string",
            name: "description",
            type: "string",
          },
          {
            internalType: "string",
            name: "avatar",
            type: "string",
          },
          {
            internalType: "string",
            name: "did",
            type: "string",
          },
        ],
        internalType: "struct CitizenResolver.CitizenObject",
        name: "member",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "getCitizenMetadata",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "ensAlias",
            type: "string",
          },
          {
            internalType: "string",
            name: "ensNode",
            type: "string",
          },
          {
            internalType: "string",
            name: "ensResolver",
            type: "string",
          },
        ],
        internalType: "struct CitizenResolver.CitizenMetadata",
        name: "member",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "address",
        name: "guild",
        type: "address",
      },
    ],
    name: "getMember",
    outputs: [
      {
        internalType: "address",
        name: "member",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "guild",
        type: "address",
      },
    ],
    name: "getMembers",
    outputs: [
      {
        internalType: "address[]",
        name: "members",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "address",
        name: "guild",
        type: "address",
      },
    ],
    name: "isMember",
    outputs: [
      {
        internalType: "address",
        name: "member",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60e060405234801561001057600080fd5b50604051610c5f380380610c5f83398101604081905261002f916100c1565b61003833610055565b6001600160a01b0392831660805290821660a0521660c052610104565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146100bc57600080fd5b919050565b6000806000606084860312156100d657600080fd5b6100df846100a5565b92506100ed602085016100a5565b91506100fb604085016100a5565b90509250925092565b60805160a05160c051610b2b6101346000396000505060005050600081816101c301526103290152610b2b6000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063785446291161005b57806378544629146100fa5780638da5cb5b1461011a578063c2411dab1461012b578063f2fde38b1461014b57600080fd5b80630a55fbfe1461008d57806339ac7a08146100bd578063694d6b90146100d0578063715018a6146100f0575b600080fd5b6100a061009b36600461060a565b61015e565b6040516001600160a01b0390911681526020015b60405180910390f35b6100a06100cb36600461060a565b610171565b6100e36100de366004610643565b61017d565b6040516100b491906106bc565b6100f8610260565b005b61010d610108366004610643565b6102cb565b6040516100b4919061071d565b6000546001600160a01b03166100a0565b61013e610139366004610643565b6102dc565b6040516100b4919061076a565b6100f8610159366004610643565b6103d1565b600061016a838361049c565b9392505050565b600061016a838361050b565b6101a160405180606001604052806060815260200160608152602001606081525090565b60405163152860a360e11b81526001600160a01b0383811660048301526000917f000000000000000000000000000000000000000000000000000000000000000090911690632a50c14690602401600060405180830381865afa15801561020c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261023491908101906108bc565b604080516060810182526080830151815260a0830151602082015260c090920151908201529392505050565b6000546001600160a01b031633146102bf5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6102c9600061053d565b565b60606102d68261058d565b92915050565b6103076040518060800160405280606081526020016060815260200160608152602001606081525090565b60405163152860a360e11b81526001600160a01b0383811660048301526000917f000000000000000000000000000000000000000000000000000000000000000090911690632a50c14690602401600060405180830381865afa158015610372573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261039a91908101906108bc565b6040805160808101825282518152602080840151908201528183015191810191909152606091820151918101919091529392505050565b6000546001600160a01b0316331461042b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102b6565b6001600160a01b0381166104905760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102b6565b6104998161053d565b50565b60405163156d12cb60e11b81526001600160a01b03838116600483015260009190831690632ada2596906024015b602060405180830381865afa1580156104e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061016a9190610a26565b60405163288c314960e21b81526001600160a01b0383811660048301526000919083169063a230c524906024016104ca565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6060816001600160a01b0316639eab52536040518163ffffffff1660e01b8152600401600060405180830381865afa1580156105cd573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102d69190810190610a43565b6001600160a01b038116811461049957600080fd5b6000806040838503121561061d57600080fd5b8235610628816105f5565b91506020830135610638816105f5565b809150509250929050565b60006020828403121561065557600080fd5b813561016a816105f5565b60005b8381101561067b578181015183820152602001610663565b8381111561068a576000848401525b50505050565b600081518084526106a8816020860160208601610660565b601f01601f19169290920160200192915050565b6020815260008251606060208401526106d86080840182610690565b90506020840151601f19808584030160408601526106f68383610690565b92506040860151915080858403016060860152506107148282610690565b95945050505050565b6020808252825182820181905260009190848201906040850190845b8181101561075e5783516001600160a01b031683529284019291840191600101610739565b50909695505050505050565b60208152600082516080602084015261078660a0840182610690565b90506020840151601f19808584030160408601526107a48383610690565b925060408601519150808584030160608601526107c18383610690565b92506060860151915080858403016080860152506107148282610690565b634e487b7160e01b600052604160045260246000fd5b604051610100810167ffffffffffffffff81118282101715610819576108196107df565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610848576108486107df565b604052919050565b600082601f83011261086157600080fd5b815167ffffffffffffffff81111561087b5761087b6107df565b61088e601f8201601f191660200161081f565b8181528460208386010111156108a357600080fd5b6108b4826020830160208701610660565b949350505050565b6000602082840312156108ce57600080fd5b815167ffffffffffffffff808211156108e657600080fd5b9083019061010082860312156108fb57600080fd5b6109036107f5565b82518281111561091257600080fd5b61091e87828601610850565b82525060208301518281111561093357600080fd5b61093f87828601610850565b60208301525060408301518281111561095757600080fd5b61096387828601610850565b60408301525060608301518281111561097b57600080fd5b61098787828601610850565b60608301525060808301518281111561099f57600080fd5b6109ab87828601610850565b60808301525060a0830151828111156109c357600080fd5b6109cf87828601610850565b60a08301525060c0830151828111156109e757600080fd5b6109f387828601610850565b60c08301525060e083015182811115610a0b57600080fd5b610a1787828601610850565b60e08301525095945050505050565b600060208284031215610a3857600080fd5b815161016a816105f5565b60006020808385031215610a5657600080fd5b825167ffffffffffffffff80821115610a6e57600080fd5b818501915085601f830112610a8257600080fd5b815181811115610a9457610a946107df565b8060051b9150610aa584830161081f565b8181529183018401918481019088841115610abf57600080fd5b938501935b83851015610ae95784519250610ad9836105f5565b8282529385019390850190610ac4565b9897505050505050505056fea264697066735822122027649e71c54988860ac7ba98ce9c587c5f8a40f4fe37d072498cf9778f73691264736f6c634300080f0033";

type CitizenResolverConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CitizenResolverConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CitizenResolver__factory extends ContractFactory {
  constructor(...args: CitizenResolverConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "CitizenResolver";
  }

  deploy(
    _metadata_: string,
    _notary_: string,
    _token_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<CitizenResolver> {
    return super.deploy(_metadata_, _notary_, _token_, overrides || {}) as Promise<CitizenResolver>;
  }
  getDeployTransaction(
    _metadata_: string,
    _notary_: string,
    _token_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_metadata_, _notary_, _token_, overrides || {});
  }
  attach(address: string): CitizenResolver {
    return super.attach(address) as CitizenResolver;
  }
  connect(signer: Signer): CitizenResolver__factory {
    return super.connect(signer) as CitizenResolver__factory;
  }
  static readonly contractName: "CitizenResolver";
  public readonly contractName: "CitizenResolver";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CitizenResolverInterface {
    return new utils.Interface(_abi) as CitizenResolverInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): CitizenResolver {
    return new Contract(address, _abi, signerOrProvider) as CitizenResolver;
  }
}
