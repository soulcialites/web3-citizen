/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Web3TrustResolver, Web3TrustResolverInterface } from "../Web3TrustResolver";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_metadata_",
        type: "address",
      },
      {
        internalType: "address",
        name: "_notary_",
        type: "address",
      },
      {
        internalType: "address",
        name: "_token_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "getCitizen",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "string",
            name: "description",
            type: "string",
          },
          {
            internalType: "string",
            name: "avatar",
            type: "string",
          },
          {
            internalType: "string",
            name: "did",
            type: "string",
          },
        ],
        internalType: "struct Web3TrustResolver.CitizenObject",
        name: "member",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "address",
        name: "guild",
        type: "address",
      },
    ],
    name: "getMember",
    outputs: [
      {
        internalType: "address",
        name: "member",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "guild",
        type: "address",
      },
    ],
    name: "getMembers",
    outputs: [
      {
        internalType: "address[]",
        name: "members",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "getMetadata",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "ensAlias",
            type: "string",
          },
          {
            internalType: "string",
            name: "ensNode",
            type: "string",
          },
          {
            internalType: "string",
            name: "ensResolver",
            type: "string",
          },
        ],
        internalType: "struct Web3TrustResolver.CitizenMetadata",
        name: "member",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "address",
        name: "guild",
        type: "address",
      },
    ],
    name: "isMember",
    outputs: [
      {
        internalType: "address",
        name: "member",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "tokenURI",
    outputs: [
      {
        internalType: "string",
        name: "tokenURI",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60e06040523480156200001157600080fd5b506040516200130938038062001309833981810160405281019062000037919062000232565b620000576200004b620000fc60201b60201c565b6200010460201b60201c565b8273ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508173ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff16815250508073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250505050506200028e565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001fa82620001cd565b9050919050565b6200020c81620001ed565b81146200021857600080fd5b50565b6000815190506200022c8162000201565b92915050565b6000806000606084860312156200024e576200024d620001c8565b5b60006200025e868287016200021b565b935050602062000271868287016200021b565b925050604062000284868287016200021b565b9150509250925092565b60805160a05160c051611047620002c2600039600050506000818161021c015261035f0152600061044101526110476000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063785446291161006657806378544629146101325780638da5cb5b14610162578063c2411dab14610180578063c87b56dd146101b0578063f2fde38b146101e057610093565b80630a55fbfe146100985780632a50c146146100c857806339ac7a08146100f8578063715018a614610128575b600080fd5b6100b260048036038101906100ad9190610784565b6101fc565b6040516100bf91906107d3565b60405180910390f35b6100e260048036038101906100dd91906107ee565b610210565b6040516100ef9190610912565b60405180910390f35b610112600480360381019061010d9190610784565b6102f0565b60405161011f91906107d3565b60405180910390f35b610130610304565b005b61014c600480360381019061014791906107ee565b610318565b60405161015991906109f2565b60405180910390f35b61016a61032a565b60405161017791906107d3565b60405180910390f35b61019a600480360381019061019591906107ee565b610353565b6040516101a79190610a8c565b60405180910390f35b6101ca60048036038101906101c59190610ae4565b61043d565b6040516101d79190610b5b565b60405180910390f35b6101fa60048036038101906101f591906107ee565b6104e5565b005b60006102088383610568565b905092915050565b6102186106c9565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632a50c146846040518263ffffffff1660e01b815260040161027391906107d3565b600060405180830381865afa158015610290573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906102b99190610e57565b905060006040518060600160405280836080015181526020018360a0015181526020018360c0015181525090508092505050919050565b60006102fc8383610570565b905092915050565b61030c610578565b61031660006105f6565b565b6060610323826106ba565b9050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61035b6106ea565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632a50c146846040518263ffffffff1660e01b81526004016103b691906107d3565b600060405180830381865afa1580156103d3573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906103fc9190610e57565b905060006040518060800160405280836000015181526020018360200151815260200183604001518152602001836060015181525090508092505050919050565b60607f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663c87b56dd836040518263ffffffff1660e01b81526004016104989190610eaf565b600060405180830381865afa1580156104b5573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906104de9190610eca565b9050919050565b6104ed610578565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361055c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055390610f85565b60405180910390fd5b610565816105f6565b50565b600092915050565b600092915050565b6105806106c1565b73ffffffffffffffffffffffffffffffffffffffff1661059e61032a565b73ffffffffffffffffffffffffffffffffffffffff16146105f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105eb90610ff1565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6060919050565b600033905090565b60405180606001604052806060815260200160608152602001606081525090565b6040518060800160405280606081526020016060815260200160608152602001606081525090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061075182610726565b9050919050565b61076181610746565b811461076c57600080fd5b50565b60008135905061077e81610758565b92915050565b6000806040838503121561079b5761079a61071c565b5b60006107a98582860161076f565b92505060206107ba8582860161076f565b9150509250929050565b6107cd81610746565b82525050565b60006020820190506107e860008301846107c4565b92915050565b6000602082840312156108045761080361071c565b5b60006108128482850161076f565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561085557808201518184015260208101905061083a565b83811115610864576000848401525b50505050565b6000601f19601f8301169050919050565b60006108868261081b565b6108908185610826565b93506108a0818560208601610837565b6108a98161086a565b840191505092915050565b600060608301600083015184820360008601526108d1828261087b565b915050602083015184820360208601526108eb828261087b565b91505060408301518482036040860152610905828261087b565b9150508091505092915050565b6000602082019050818103600083015261092c81846108b4565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61096981610746565b82525050565b600061097b8383610960565b60208301905092915050565b6000602082019050919050565b600061099f82610934565b6109a9818561093f565b93506109b483610950565b8060005b838110156109e55781516109cc888261096f565b97506109d783610987565b9250506001810190506109b8565b5085935050505092915050565b60006020820190508181036000830152610a0c8184610994565b905092915050565b60006080830160008301518482036000860152610a31828261087b565b91505060208301518482036020860152610a4b828261087b565b91505060408301518482036040860152610a65828261087b565b91505060608301518482036060860152610a7f828261087b565b9150508091505092915050565b60006020820190508181036000830152610aa68184610a14565b905092915050565b6000819050919050565b610ac181610aae565b8114610acc57600080fd5b50565b600081359050610ade81610ab8565b92915050565b600060208284031215610afa57610af961071c565b5b6000610b0884828501610acf565b91505092915050565b600082825260208201905092915050565b6000610b2d8261081b565b610b378185610b11565b9350610b47818560208601610837565b610b508161086a565b840191505092915050565b60006020820190508181036000830152610b758184610b22565b905092915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610bba8261086a565b810181811067ffffffffffffffff82111715610bd957610bd8610b82565b5b80604052505050565b6000610bec610712565b9050610bf88282610bb1565b919050565b600080fd5b600080fd5b600080fd5b600067ffffffffffffffff821115610c2757610c26610b82565b5b610c308261086a565b9050602081019050919050565b6000610c50610c4b84610c0c565b610be2565b905082815260208101848484011115610c6c57610c6b610c07565b5b610c77848285610837565b509392505050565b600082601f830112610c9457610c93610c02565b5b8151610ca4848260208601610c3d565b91505092915050565b60006101008284031215610cc457610cc3610b7d565b5b610ccf610100610be2565b9050600082015167ffffffffffffffff811115610cef57610cee610bfd565b5b610cfb84828501610c7f565b600083015250602082015167ffffffffffffffff811115610d1f57610d1e610bfd565b5b610d2b84828501610c7f565b602083015250604082015167ffffffffffffffff811115610d4f57610d4e610bfd565b5b610d5b84828501610c7f565b604083015250606082015167ffffffffffffffff811115610d7f57610d7e610bfd565b5b610d8b84828501610c7f565b606083015250608082015167ffffffffffffffff811115610daf57610dae610bfd565b5b610dbb84828501610c7f565b60808301525060a082015167ffffffffffffffff811115610ddf57610dde610bfd565b5b610deb84828501610c7f565b60a08301525060c082015167ffffffffffffffff811115610e0f57610e0e610bfd565b5b610e1b84828501610c7f565b60c08301525060e082015167ffffffffffffffff811115610e3f57610e3e610bfd565b5b610e4b84828501610c7f565b60e08301525092915050565b600060208284031215610e6d57610e6c61071c565b5b600082015167ffffffffffffffff811115610e8b57610e8a610721565b5b610e9784828501610cad565b91505092915050565b610ea981610aae565b82525050565b6000602082019050610ec46000830184610ea0565b92915050565b600060208284031215610ee057610edf61071c565b5b600082015167ffffffffffffffff811115610efe57610efd610721565b5b610f0a84828501610c7f565b91505092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610f6f602683610b11565b9150610f7a82610f13565b604082019050919050565b60006020820190508181036000830152610f9e81610f62565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610fdb602083610b11565b9150610fe682610fa5565b602082019050919050565b6000602082019050818103600083015261100a81610fce565b905091905056fea26469706673582212203d4a4388d0d72279a07109cbe16e8f5b22fe6fb2716fdc090aae9eaf1f290eb064736f6c634300080f0033";

type Web3TrustResolverConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Web3TrustResolverConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Web3TrustResolver__factory extends ContractFactory {
  constructor(...args: Web3TrustResolverConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Web3TrustResolver";
  }

  deploy(
    _metadata_: string,
    _notary_: string,
    _token_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Web3TrustResolver> {
    return super.deploy(
      _metadata_,
      _notary_,
      _token_,
      overrides || {}
    ) as Promise<Web3TrustResolver>;
  }
  getDeployTransaction(
    _metadata_: string,
    _notary_: string,
    _token_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_metadata_, _notary_, _token_, overrides || {});
  }
  attach(address: string): Web3TrustResolver {
    return super.attach(address) as Web3TrustResolver;
  }
  connect(signer: Signer): Web3TrustResolver__factory {
    return super.connect(signer) as Web3TrustResolver__factory;
  }
  static readonly contractName: "Web3TrustResolver";
  public readonly contractName: "Web3TrustResolver";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Web3TrustResolverInterface {
    return new utils.Interface(_abi) as Web3TrustResolverInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Web3TrustResolver {
    return new Contract(address, _abi, signerOrProvider) as Web3TrustResolver;
  }
}
