/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ERC20Allowance,
  ERC20AllowanceInterface,
} from "../ERC20Allowance";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes",
        name: "terms",
        type: "bytes",
      },
      {
        components: [
          {
            internalType: "address",
            name: "to",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "gasLimit",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct Transaction",
        name: "transaction",
        type: "tuple",
      },
      {
        internalType: "bytes32",
        name: "delegationHash",
        type: "bytes32",
      },
    ],
    name: "enforceCaveat",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610531806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80635068de4c14610030575b600080fd5b61004361003e3660046101fd565b610057565b604051901515815260200160405180910390f35b600080610067604085018561029e565b610076916004916000916102ec565b61007f91610316565b905063a9059cbb60e01b60006100986020870187610346565b905060006100db89898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061017892505050565b336000908152602081815260408083208a845290915290205490915081811061013f5760405162461bcd60e51b8152602060048201526012602482015271105b1b1bddd85b98d948195e18d95959195960721b604482015260640160405180910390fd5b336000908152602081815260408083208a845290915281208054916101638361038c565b9091555060019b9a5050505050505050505050565b60008060005b83518110156101f6576101928160016103a5565b845161019e91906103bd565b6101a99060086103d4565b6101b49060026104d9565b8482815181106101c6576101c66104e5565b01602001516101d8919060f81c6103d4565b6101e290836103a5565b9150806101ee8161038c565b91505061017e565b5092915050565b6000806000806060858703121561021357600080fd5b843567ffffffffffffffff8082111561022b57600080fd5b818701915087601f83011261023f57600080fd5b81358181111561024e57600080fd5b88602082850101111561026057600080fd5b60209283019650945090860135908082111561027b57600080fd5b5085016060818803121561028e57600080fd5b9396929550929360400135925050565b6000808335601e198436030181126102b557600080fd5b83018035915067ffffffffffffffff8211156102d057600080fd5b6020019150368190038213156102e557600080fd5b9250929050565b600080858511156102fc57600080fd5b8386111561030957600080fd5b5050820193919092039150565b6001600160e01b0319813581811691600485101561033e5780818660040360031b1b83161692505b505092915050565b60006020828403121561035857600080fd5b81356001600160a01b038116811461036f57600080fd5b9392505050565b634e487b7160e01b600052601160045260246000fd5b60006001820161039e5761039e610376565b5060010190565b600082198211156103b8576103b8610376565b500190565b6000828210156103cf576103cf610376565b500390565b60008160001904831182151516156103ee576103ee610376565b500290565b600181815b8085111561042e57816000190482111561041457610414610376565b8085161561042157918102915b93841c93908002906103f8565b509250929050565b600082610445575060016104d3565b81610452575060006104d3565b816001811461046857600281146104725761048e565b60019150506104d3565b60ff84111561048357610483610376565b50506001821b6104d3565b5060208310610133831016604e8410600b84101617156104b1575081810a6104d3565b6104bb83836103f3565b80600019048211156104cf576104cf610376565b0290505b92915050565b600061036f8383610436565b634e487b7160e01b600052603260045260246000fdfea2646970667358221220688250f26cdc78c3ae9b4b0a970962ac5df36e8b8a5298a275c3124fec0e720d64736f6c634300080f0033";

type ERC20AllowanceConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC20AllowanceConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC20Allowance__factory extends ContractFactory {
  constructor(...args: ERC20AllowanceConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "ERC20Allowance";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ERC20Allowance> {
    return super.deploy(overrides || {}) as Promise<ERC20Allowance>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ERC20Allowance {
    return super.attach(address) as ERC20Allowance;
  }
  connect(signer: Signer): ERC20Allowance__factory {
    return super.connect(signer) as ERC20Allowance__factory;
  }
  static readonly contractName: "ERC20Allowance";
  public readonly contractName: "ERC20Allowance";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC20AllowanceInterface {
    return new utils.Interface(_abi) as ERC20AllowanceInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC20Allowance {
    return new Contract(address, _abi, signerOrProvider) as ERC20Allowance;
  }
}
