/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { NationFactory, NationFactoryInterface } from "../NationFactory";

const _abi = [
  {
    inputs: [],
    name: "createNation",
    outputs: [
      {
        internalType: "address",
        name: "guild",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b50607780601d6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063a1b7c57814602d575b600080fd5b604080516000815290519081900360200190f3fea264697066735822122014e0f13bf5c40119d901e9ecd25ed5561dc555f4aa9aadaf15ecd7ee5a362db364736f6c634300080f0033";

type NationFactoryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: NationFactoryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class NationFactory__factory extends ContractFactory {
  constructor(...args: NationFactoryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "NationFactory";
  }

  deploy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<NationFactory> {
    return super.deploy(overrides || {}) as Promise<NationFactory>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): NationFactory {
    return super.attach(address) as NationFactory;
  }
  connect(signer: Signer): NationFactory__factory {
    return super.connect(signer) as NationFactory__factory;
  }
  static readonly contractName: "NationFactory";
  public readonly contractName: "NationFactory";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): NationFactoryInterface {
    return new utils.Interface(_abi) as NationFactoryInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): NationFactory {
    return new Contract(address, _abi, signerOrProvider) as NationFactory;
  }
}
