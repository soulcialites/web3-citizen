/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface SourceENSInterface extends utils.Interface {
  contractName: "SourceENS";
  functions: {
    "appendKey(string)": FunctionFragment;
    "count(address)": FunctionFragment;
    "getData(address)": FunctionFragment;
    "getKeys()": FunctionFragment;
    "getMetadata(address)": FunctionFragment;
    "getValue(address,string)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateKey(uint256,string)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "appendKey", values: [string]): string;
  encodeFunctionData(functionFragment: "count", values: [string]): string;
  encodeFunctionData(functionFragment: "getData", values: [string]): string;
  encodeFunctionData(functionFragment: "getKeys", values?: undefined): string;
  encodeFunctionData(functionFragment: "getMetadata", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getValue",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateKey",
    values: [BigNumberish, string]
  ): string;

  decodeFunctionResult(functionFragment: "appendKey", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "count", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getData", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getKeys", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getValue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateKey", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface SourceENS extends BaseContract {
  contractName: "SourceENS";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SourceENSInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    appendKey(
      key: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    count(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { count: BigNumber }>;

    getData(
      user: string,
      overrides?: CallOverrides
    ): Promise<[string[], string[]] & { keys: string[]; values: string[] }>;

    getKeys(
      overrides?: CallOverrides
    ): Promise<[string[]] & { keys: string[] }>;

    getMetadata(
      _address: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        node: string;
        name: string;
        resolver: string;
      }
    >;

    getValue(
      user: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateKey(
      idx: BigNumberish,
      key: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  appendKey(
    key: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  count(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  getData(
    user: string,
    overrides?: CallOverrides
  ): Promise<[string[], string[]] & { keys: string[]; values: string[] }>;

  getKeys(overrides?: CallOverrides): Promise<string[]>;

  getMetadata(
    _address: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string] & { node: string; name: string; resolver: string }
  >;

  getValue(
    user: string,
    key: string,
    overrides?: CallOverrides
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateKey(
    idx: BigNumberish,
    key: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    appendKey(key: string, overrides?: CallOverrides): Promise<void>;

    count(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    getData(
      user: string,
      overrides?: CallOverrides
    ): Promise<[string[], string[]] & { keys: string[]; values: string[] }>;

    getKeys(overrides?: CallOverrides): Promise<string[]>;

    getMetadata(
      _address: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        node: string;
        name: string;
        resolver: string;
      }
    >;

    getValue(
      user: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateKey(
      idx: BigNumberish,
      key: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    appendKey(
      key: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    count(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    getData(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    getKeys(overrides?: CallOverrides): Promise<BigNumber>;

    getMetadata(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getValue(
      user: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateKey(
      idx: BigNumberish,
      key: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    appendKey(
      key: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    count(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getData(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getKeys(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMetadata(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getValue(
      user: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateKey(
      idx: BigNumberish,
      key: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
