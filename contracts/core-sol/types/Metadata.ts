/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace Metadata {
  export type MetadataStruct = {
    name: string;
    description: string;
    avatar: string;
    did: string;
    ensAlias: string;
    ensNode: string;
    ensResolver: string;
    traits: string;
  };

  export type MetadataStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string
  ] & {
    name: string;
    description: string;
    avatar: string;
    did: string;
    ensAlias: string;
    ensNode: string;
    ensResolver: string;
    traits: string;
  };
}

export interface MetadataInterface extends utils.Interface {
  contractName: "Metadata";
  functions: {
    "appendSource(address)": FunctionFragment;
    "getAvatar(address)": FunctionFragment;
    "getImage(address)": FunctionFragment;
    "getMetadata(address)": FunctionFragment;
    "getSVGRender()": FunctionFragment;
    "getSourceData(uint256,address)": FunctionFragment;
    "getSourcesData(address)": FunctionFragment;
    "getToken()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setSVGRender(address)": FunctionFragment;
    "setToken(address)": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "tokenURIResolver(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateSource(uint256,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "appendSource",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getAvatar", values: [string]): string;
  encodeFunctionData(functionFragment: "getImage", values: [string]): string;
  encodeFunctionData(functionFragment: "getMetadata", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getSVGRender",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSourceData",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSourcesData",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setSVGRender",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setToken", values: [string]): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURIResolver",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSource",
    values: [BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "appendSource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAvatar", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getImage", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSVGRender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSourceData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSourcesData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSVGRender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenURIResolver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSource",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface Metadata extends BaseContract {
  contractName: "Metadata";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MetadataInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    appendSource(
      source: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAvatar(user: string, overrides?: CallOverrides): Promise<[string]>;

    getImage(user: string, overrides?: CallOverrides): Promise<[string]>;

    getMetadata(
      user: string,
      overrides?: CallOverrides
    ): Promise<[Metadata.MetadataStructOutput]>;

    getSVGRender(
      overrides?: CallOverrides
    ): Promise<[string] & { token: string }>;

    getSourceData(
      idx: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<[string[], string[]]>;

    getSourcesData(
      user: string,
      overrides?: CallOverrides
    ): Promise<[string[], string[]]>;

    getToken(overrides?: CallOverrides): Promise<[string] & { token: string }>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSVGRender(
      svgRender_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setToken(
      token_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    tokenURIResolver(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateSource(
      idx: BigNumberish,
      source: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  appendSource(
    source: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAvatar(user: string, overrides?: CallOverrides): Promise<string>;

  getImage(user: string, overrides?: CallOverrides): Promise<string>;

  getMetadata(
    user: string,
    overrides?: CallOverrides
  ): Promise<Metadata.MetadataStructOutput>;

  getSVGRender(overrides?: CallOverrides): Promise<string>;

  getSourceData(
    idx: BigNumberish,
    user: string,
    overrides?: CallOverrides
  ): Promise<[string[], string[]]>;

  getSourcesData(
    user: string,
    overrides?: CallOverrides
  ): Promise<[string[], string[]]>;

  getToken(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSVGRender(
    svgRender_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setToken(
    token_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  tokenURIResolver(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateSource(
    idx: BigNumberish,
    source: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    appendSource(source: string, overrides?: CallOverrides): Promise<void>;

    getAvatar(user: string, overrides?: CallOverrides): Promise<string>;

    getImage(user: string, overrides?: CallOverrides): Promise<string>;

    getMetadata(
      user: string,
      overrides?: CallOverrides
    ): Promise<Metadata.MetadataStructOutput>;

    getSVGRender(overrides?: CallOverrides): Promise<string>;

    getSourceData(
      idx: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<[string[], string[]]>;

    getSourcesData(
      user: string,
      overrides?: CallOverrides
    ): Promise<[string[], string[]]>;

    getToken(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setSVGRender(svgRender_: string, overrides?: CallOverrides): Promise<void>;

    setToken(token_: string, overrides?: CallOverrides): Promise<void>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    tokenURIResolver(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSource(
      idx: BigNumberish,
      source: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    appendSource(
      source: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAvatar(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    getImage(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    getMetadata(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    getSVGRender(overrides?: CallOverrides): Promise<BigNumber>;

    getSourceData(
      idx: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSourcesData(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    getToken(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSVGRender(
      svgRender_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setToken(
      token_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURIResolver(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateSource(
      idx: BigNumberish,
      source: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    appendSource(
      source: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAvatar(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getImage(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMetadata(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSVGRender(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSourceData(
      idx: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSourcesData(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSVGRender(
      svgRender_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setToken(
      token_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenURIResolver(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateSource(
      idx: BigNumberish,
      source: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
