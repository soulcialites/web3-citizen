/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace CitizenResolver {
  export type CitizenObjectStruct = {
    name: string;
    description: string;
    avatar: string;
    did: string;
  };

  export type CitizenObjectStructOutput = [string, string, string, string] & {
    name: string;
    description: string;
    avatar: string;
    did: string;
  };

  export type CitizenMetadataStruct = {
    ensAlias: string;
    ensNode: string;
    ensResolver: string;
  };

  export type CitizenMetadataStructOutput = [string, string, string] & {
    ensAlias: string;
    ensNode: string;
    ensResolver: string;
  };
}

export interface CitizenResolverInterface extends utils.Interface {
  contractName: "CitizenResolver";
  functions: {
    "getCitizen(address)": FunctionFragment;
    "getCitizenMetadata(address)": FunctionFragment;
    "getMember(address,address)": FunctionFragment;
    "getMembers(address)": FunctionFragment;
    "isMember(address,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "getCitizen", values: [string]): string;
  encodeFunctionData(functionFragment: "getCitizenMetadata", values: [string]): string;
  encodeFunctionData(functionFragment: "getMember", values: [string, string]): string;
  encodeFunctionData(functionFragment: "getMembers", values: [string]): string;
  encodeFunctionData(functionFragment: "isMember", values: [string, string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
  encodeFunctionData(functionFragment: "transferOwnership", values: [string]): string;

  decodeFunctionResult(functionFragment: "getCitizen", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getCitizenMetadata", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getMember", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getMembers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isMember", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface CitizenResolver extends BaseContract {
  contractName: "CitizenResolver";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CitizenResolverInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getCitizen(
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [CitizenResolver.CitizenObjectStructOutput] & {
        member: CitizenResolver.CitizenObjectStructOutput;
      }
    >;

    getCitizenMetadata(
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [CitizenResolver.CitizenMetadataStructOutput] & {
        member: CitizenResolver.CitizenMetadataStructOutput;
      }
    >;

    getMember(
      user: string,
      guild: string,
      overrides?: CallOverrides
    ): Promise<[string] & { member: string }>;

    getMembers(
      guild: string,
      overrides?: CallOverrides
    ): Promise<[string[]] & { members: string[] }>;

    isMember(
      user: string,
      guild: string,
      overrides?: CallOverrides
    ): Promise<[string] & { member: string }>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getCitizen(
    user: string,
    overrides?: CallOverrides
  ): Promise<CitizenResolver.CitizenObjectStructOutput>;

  getCitizenMetadata(
    user: string,
    overrides?: CallOverrides
  ): Promise<CitizenResolver.CitizenMetadataStructOutput>;

  getMember(user: string, guild: string, overrides?: CallOverrides): Promise<string>;

  getMembers(guild: string, overrides?: CallOverrides): Promise<string[]>;

  isMember(user: string, guild: string, overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getCitizen(
      user: string,
      overrides?: CallOverrides
    ): Promise<CitizenResolver.CitizenObjectStructOutput>;

    getCitizenMetadata(
      user: string,
      overrides?: CallOverrides
    ): Promise<CitizenResolver.CitizenMetadataStructOutput>;

    getMember(user: string, guild: string, overrides?: CallOverrides): Promise<string>;

    getMembers(guild: string, overrides?: CallOverrides): Promise<string[]>;

    isMember(user: string, guild: string, overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    getCitizen(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    getCitizenMetadata(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    getMember(user: string, guild: string, overrides?: CallOverrides): Promise<BigNumber>;

    getMembers(guild: string, overrides?: CallOverrides): Promise<BigNumber>;

    isMember(user: string, guild: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getCitizen(user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCitizenMetadata(user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMember(
      user: string,
      guild: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMembers(guild: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isMember(user: string, guild: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
