/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ICitizenAlphaInterface extends utils.Interface {
  contractName: "ICitizenAlpha";
  functions: {
    "getId(address)": FunctionFragment;
    "getLink(address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "issue(address)": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "revoke(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "getId", values: [string]): string;
  encodeFunctionData(functionFragment: "getLink", values: [string]): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "issue", values: [string]): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "revoke", values: [string]): string;

  decodeFunctionResult(functionFragment: "getId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getLink", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "issue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revoke", data: BytesLike): Result;

  events: {};
}

export interface ICitizenAlpha extends BaseContract {
  contractName: "ICitizenAlpha";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ICitizenAlphaInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getId(citizen: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getLink(
      citizen: string,
      overrides?: CallOverrides
    ): Promise<[string] & { issuer: string }>;

    hasRole(
      role: BytesLike,
      citizen: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    issue(
      _citizen: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ownerOf(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { owner: string }>;

    revoke(
      _citizen: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getId(citizen: string, overrides?: CallOverrides): Promise<BigNumber>;

  getLink(citizen: string, overrides?: CallOverrides): Promise<string>;

  hasRole(
    role: BytesLike,
    citizen: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  issue(
    _citizen: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ownerOf(_id: BigNumberish, overrides?: CallOverrides): Promise<string>;

  revoke(
    _citizen: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getId(citizen: string, overrides?: CallOverrides): Promise<BigNumber>;

    getLink(citizen: string, overrides?: CallOverrides): Promise<string>;

    hasRole(
      role: BytesLike,
      citizen: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    issue(_citizen: string, overrides?: CallOverrides): Promise<void>;

    ownerOf(_id: BigNumberish, overrides?: CallOverrides): Promise<string>;

    revoke(_citizen: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    getId(citizen: string, overrides?: CallOverrides): Promise<BigNumber>;

    getLink(citizen: string, overrides?: CallOverrides): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      citizen: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    issue(
      _citizen: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ownerOf(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    revoke(
      _citizen: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getId(
      citizen: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLink(
      citizen: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      citizen: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    issue(
      _citizen: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ownerOf(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revoke(
      _citizen: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
