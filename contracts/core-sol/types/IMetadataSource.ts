/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IMetadataSourceInterface extends utils.Interface {
  contractName: "IMetadataSource";
  functions: {
    "count(address)": FunctionFragment;
    "getData(address)": FunctionFragment;
    "getTextField(address,string)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "count", values: [string]): string;
  encodeFunctionData(functionFragment: "getData", values: [string]): string;
  encodeFunctionData(functionFragment: "getTextField", values: [string, string]): string;

  decodeFunctionResult(functionFragment: "count", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getData", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getTextField", data: BytesLike): Result;

  events: {};
}

export interface IMetadataSource extends BaseContract {
  contractName: "IMetadataSource";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IMetadataSourceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    count(_address: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getData(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[string[], string[]] & { keys: string[]; values: string[] }>;

    getTextField(_address: string, _key: string, overrides?: CallOverrides): Promise<[string]>;
  };

  count(_address: string, overrides?: CallOverrides): Promise<BigNumber>;

  getData(
    _address: string,
    overrides?: CallOverrides
  ): Promise<[string[], string[]] & { keys: string[]; values: string[] }>;

  getTextField(_address: string, _key: string, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    count(_address: string, overrides?: CallOverrides): Promise<BigNumber>;

    getData(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[string[], string[]] & { keys: string[]; values: string[] }>;

    getTextField(_address: string, _key: string, overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    count(_address: string, overrides?: CallOverrides): Promise<BigNumber>;

    getData(_address: string, overrides?: CallOverrides): Promise<BigNumber>;

    getTextField(_address: string, _key: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    count(_address: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getData(_address: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTextField(
      _address: string,
      _key: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
