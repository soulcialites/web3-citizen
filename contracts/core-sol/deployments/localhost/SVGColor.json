{
  "address": "0x5257613B3fD1eB88a0CD21FF8cbAD87402AF86Cd",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_colors",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_id",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_customAttributes",
          "type": "bytes"
        }
      ],
      "name": "autoLinearGradient",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_coordinates",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_colors",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_id",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_customAttributes",
          "type": "bytes"
        }
      ],
      "name": "autoLinearGradient",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_offset",
          "type": "uint256"
        }
      ],
      "name": "byte2uint8",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "colors",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_colorName",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "_alpha",
          "type": "uint8"
        }
      ],
      "name": "getColor",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_colorName",
          "type": "string"
        }
      ],
      "name": "getColor",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_colorName",
          "type": "string"
        }
      ],
      "name": "getRgba",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_lg",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_id",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_customAttributes",
          "type": "bytes"
        }
      ],
      "name": "linearGradient",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_rgba",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "offset",
          "type": "uint256"
        }
      ],
      "name": "toRgba",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xcbd9b99ad36bd12c29e0e0699ce8adc803be459d2563d603575f08fe42f1e201",
  "receipt": {
    "to": null,
    "from": "0xfc4099eF10CC6255E8662eF85CF82067A7f2e3fd",
    "contractAddress": "0x5257613B3fD1eB88a0CD21FF8cbAD87402AF86Cd",
    "transactionIndex": 0,
    "gasUsed": "1194859",
    "logsBloom": "0x
    "blockHash": "0x6f49335f5447ae62833cd4704571eb104d752058d8eaab80ab518fd5eeafe191",
    "transactionHash": "0xcbd9b99ad36bd12c29e0e0699ce8adc803be459d2563d603575f08fe42f1e201",
    "logs": [],
    "blockNumber": 15173655,
    "cumulativeGasUsed": "1194859",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "dcdb068b33a37414041a673866438cbe",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_colors\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_id\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_customAttributes\",\"type\":\"bytes\"}],\"name\":\"autoLinearGradient\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_coordinates\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_colors\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_id\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_customAttributes\",\"type\":\"bytes\"}],\"name\":\"autoLinearGradient\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_offset\",\"type\":\"uint256\"}],\"name\":\"byte2uint8\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"colors\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_colorName\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_alpha\",\"type\":\"uint8\"}],\"name\":\"getColor\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_colorName\",\"type\":\"string\"}],\"name\":\"getColor\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_colorName\",\"type\":\"string\"}],\"name\":\"getRgba\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_lg\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_id\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_customAttributes\",\"type\":\"bytes\"}],\"name\":\"linearGradient\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_rgba\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"}],\"name\":\"toRgba\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/SVGColor.sol\":\"SVGColor\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"contracts/libraries/SVGColor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\ncontract SVGColor {\\n  using Strings for uint256;\\n  using Strings for uint8;\\n\\n  mapping(string => bytes) public colors;\\n\\n  constructor() {\\n    colors[\\\"Black\\\"] = hex\\\"000000\\\";\\n    colors[\\\"White\\\"] = hex\\\"FFFFFF\\\";\\n    colors[\\\"Dark1\\\"] = hex\\\"232323\\\";\\n    colors[\\\"Dark2\\\"] = hex\\\"464646\\\";\\n  }\\n\\n  function getColor(string memory _colorName) public view returns (bytes memory) {\\n    require(colors[_colorName].length == 3, \\\"Unknown color\\\");\\n    return abi.encodePacked(colors[_colorName], hex\\\"64\\\");\\n  }\\n\\n  function getColor(string memory _colorName, uint8 _alpha) public view returns (bytes memory) {\\n    require(colors[_colorName].length == 3, \\\"Unknown color\\\");\\n    return abi.encodePacked(colors[_colorName], _alpha);\\n  }\\n\\n  function getRgba(string memory _colorName) public view returns (string memory) {\\n    return string(toRgba(getColor(_colorName), 0));\\n  }\\n\\n  // Input: array of colors (without alpha)\\n  // Ouputs a linearGradient\\n  function autoLinearGradient(\\n    bytes memory _colors,\\n    bytes memory _id,\\n    bytes memory _customAttributes\\n  ) public view returns (bytes memory) {\\n    return this.autoLinearGradient(\\\"\\\", _colors, _id, _customAttributes);\\n  }\\n\\n  function autoLinearGradient(\\n    bytes memory _coordinates,\\n    bytes memory _colors,\\n    bytes memory _id,\\n    bytes memory _customAttributes\\n  ) external view returns (bytes memory) {\\n    bytes memory _b;\\n    if (_coordinates.length > 3) {\\n      _b = abi.encodePacked(uint8(128), _coordinates);\\n    } else {\\n      _b = hex\\\"00\\\";\\n    }\\n    // Count the number of colors passed, each on 4 byte\\n    uint256 colorCount = _colors.length / 4;\\n    uint8 i = 0;\\n    while (i < colorCount) {\\n      _b = abi.encodePacked(\\n        _b,\\n        uint8(i * (100 / (colorCount - 1))), // grad. stop %\\n        uint8(_colors[i * 4]),\\n        uint8(_colors[i * 4 + 1]),\\n        uint8(_colors[i * 4 + 2]),\\n        uint8(_colors[i * 4 + 3])\\n      );\\n      i++;\\n    }\\n    return linearGradient(_b, _id, _customAttributes);\\n  }\\n\\n  function linearGradient(\\n    bytes memory _lg,\\n    bytes memory _id,\\n    bytes memory _customAttributes\\n  ) public pure returns (bytes memory) {\\n    bytes memory grdata;\\n    uint8 offset = 1;\\n\\n    if (uint8(_lg[0]) & 128 == 128) {\\n      grdata = abi.encodePacked(\\n        'x1=\\\"',\\n        byte2uint8(_lg, 1).toString(),\\n        '%\\\" x2=\\\"',\\n        byte2uint8(_lg, 2).toString(),\\n        '%\\\" y1=\\\"',\\n        byte2uint8(_lg, 3).toString(),\\n        '%\\\" y2=\\\"',\\n        byte2uint8(_lg, 4).toString(),\\n        '%\\\"'\\n      );\\n      offset = 5;\\n    }\\n    grdata = abi.encodePacked('<linearGradient id=\\\"', _id, '\\\" ', _customAttributes, grdata, \\\">\\\");\\n    for (uint256 i = offset; i < _lg.length; i += 5) {\\n      grdata = abi.encodePacked(\\n        grdata,\\n        '<stop offset=\\\"',\\n        byte2uint8(_lg, i).toString(),\\n        '%\\\" stop-color=\\\"',\\n        toRgba(_lg, i + 1),\\n        '\\\" id=\\\"',\\n        _id,\\n        byte2uint8(_lg, i).toString(),\\n        '\\\"/>'\\n      );\\n    }\\n    return abi.encodePacked(grdata, \\\"</linearGradient>\\\");\\n  }\\n\\n  function toRgba(bytes memory _rgba, uint256 offset) public pure returns (bytes memory) {\\n    return\\n      abi.encodePacked(\\n        \\\"rgba(\\\",\\n        byte2uint8(_rgba, offset).toString(),\\n        \\\",\\\",\\n        byte2uint8(_rgba, offset + 1).toString(),\\n        \\\",\\\",\\n        byte2uint8(_rgba, offset + 2).toString(),\\n        \\\",\\\",\\n        byte2uint8(_rgba, offset + 3).toString(),\\n        \\\"%)\\\"\\n      );\\n  }\\n\\n  function byte2uint8(bytes memory _data, uint256 _offset) public pure returns (uint8) {\\n    require(_data.length > _offset, \\\"Out of range\\\");\\n    return uint8(_data[_offset]);\\n  }\\n\\n  // formats rgba white with a specified opacity / alpha\\n  function white_a(uint256 _a) internal pure returns (string memory) {\\n    return rgba(255, 255, 255, _a);\\n  }\\n\\n  // formats rgba black with a specified opacity / alpha\\n  function black_a(uint256 _a) internal pure returns (string memory) {\\n    return rgba(0, 0, 0, _a);\\n  }\\n\\n  // formats generic rgba color in css\\n  function rgba(\\n    uint256 _r,\\n    uint256 _g,\\n    uint256 _b,\\n    uint256 _a\\n  ) internal pure returns (string memory) {\\n    string memory formattedA = _a < 100 ? string.concat(\\\"0.\\\", uint2str(_a)) : \\\"1\\\";\\n    return\\n      string.concat(\\n        \\\"rgba(\\\",\\n        uint2str(_r),\\n        \\\",\\\",\\n        uint2str(_g),\\n        \\\",\\\",\\n        uint2str(_b),\\n        \\\",\\\",\\n        formattedA,\\n        \\\")\\\"\\n      );\\n  }\\n\\n  function uint2str(uint256 _i) internal pure returns (string memory _uintAsString) {\\n    if (_i == 0) {\\n      return \\\"0\\\";\\n    }\\n    uint256 j = _i;\\n    uint256 len;\\n    while (j != 0) {\\n      len++;\\n      j /= 10;\\n    }\\n    bytes memory bstr = new bytes(len);\\n    uint256 k = len;\\n    while (_i != 0) {\\n      k = k - 1;\\n      uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\n      bytes1 b1 = bytes1(temp);\\n      bstr[k] = b1;\\n      _i /= 10;\\n    }\\n    return string(bstr);\\n  }\\n}\\n\",\"keccak256\":\"0x2e33aeee09dbb045bc969ba9b9bc119394b12f0c1d9014172fea986df942af9c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405180604001604052806003815260200160008152506000604051620000449064426c61636b60d81b815260050190565b90815260200160405180910390209081620000609190620001e3565b50604080518082018252600381526001600160e81b03196020820152815164576869746560d81b81526000600582015291519182900360250190912090620000a99082620001e3565b50604080518082018252600381526223232360e81b60208201528151644461726b3160d81b81526000600582015291519182900360250190912090620000f09082620001e3565b50604080518082018252600381526223232360e91b60208201528151642230b9359960d91b81526000600582015291519182900360250190912090620001379082620001e3565b50620002af565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200016957607f821691505b6020821081036200018a57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620001de57600081815260208120601f850160051c81016020861015620001b95750805b601f850160051c820191505b81811015620001da57828155600101620001c5565b5050505b505050565b81516001600160401b03811115620001ff57620001ff6200013e565b620002178162000210845462000154565b8462000190565b602080601f8311600181146200024f5760008415620002365750858301515b600019600386901b1c1916600185901b178555620001da565b600085815260208120601f198616915b8281101562000280578886015182559484019460019091019084016200025f565b50858210156200029f5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6112ec80620002bf6000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063b018757011610066578063b01875701461010c578063cde589101461011f578063cf0eca0914610132578063d6412c2714610145578063e5d19e691461015857600080fd5b806340c629fe146100985780634b698358146100c15780635119ce4b146100d4578063525f3654146100f9575b600080fd5b6100ab6100a636600461099c565b61016b565b6040516100b89190610a2d565b60405180910390f35b6100ab6100cf366004610a40565b610210565b6100e76100e2366004610ac8565b610287565b60405160ff90911681526020016100b8565b6100ab610107366004610b0d565b6102ef565b6100ab61011a36600461099c565b6103a2565b6100ab61012d36600461099c565b610452565b6100ab610140366004610a40565b61046d565b6100ab610153366004610b65565b6105ca565b6100ab610166366004610ac8565b61076f565b80516020818301810180516000825292820191909301209152805461018f90610c12565b80601f01602080910402602001604051908101604052809291908181526020018280546101bb90610c12565b80156102085780601f106101dd57610100808354040283529160200191610208565b820191906000526020600020905b8154815290600101906020018083116101eb57829003601f168201915b505050505081565b60405163d6412c2760e01b8152606090309063d6412c279061023a90879087908790600401610c4c565b600060405180830381865afa158015610257573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261027f9190810190610c9d565b949350505050565b6000818351116102cd5760405162461bcd60e51b815260206004820152600c60248201526b4f7574206f662072616e676560a01b60448201526064015b60405180910390fd5b8282815181106102df576102df610d14565b016020015160f81c905092915050565b60606000836040516103019190610d2a565b9081526020016040518091039020805461031a90610c12565b905060031461035b5760405162461bcd60e51b815260206004820152600d60248201526c2ab735b737bbb71031b7b637b960991b60448201526064016102c4565b60008360405161036b9190610d2a565b90815260200160405180910390208260405160200161038b929190610de3565b604051602081830303815290604052905092915050565b60606000826040516103b49190610d2a565b908152602001604051809103902080546103cd90610c12565b905060031461040e5760405162461bcd60e51b815260206004820152600d60248201526c2ab735b737bbb71031b7b637b960991b60448201526064016102c4565b60008260405161041e9190610d2a565b908152602001604051809103902060405160200161043c9190610e0b565b6040516020818303038152906040529050919050565b6060610467610460836103a2565b600061076f565b92915050565b6060806000600190508560008151811061048957610489610d14565b60209101015160f81c60809081169003610506576104b36104ab876001610287565b60ff166107c7565b6104c16104ab886002610287565b6104cf6104ab896003610287565b6104dd6104ab8a6004610287565b6040516020016104f09493929190610e28565b6040516020818303038152906040529150600590505b84848360405160200161051b93929190610ee0565b60408051601f19818403018152919052915060ff81165b865181101561059e57826105496104ab8984610287565b61055889610166856001610f79565b886105666104ab8c87610287565b60405160200161057a959493929190610f91565b60408051601f198184030181529190529250610597600582610f79565b9050610532565b50816040516020016105b09190611060565b604051602081830303815290604052925050509392505050565b606080600386511115610601576080866040516020016105eb929190611095565b6040516020818303038152906040529050610618565b506040805180820190915260018152600060208201525b60006004865161062891906110da565b905060005b818160ff16101561075857826106446001846110ee565b61064f9060646110da565b61065c9060ff8416611105565b88610668846004611124565b60ff168151811061067b5761067b610d14565b016020015160f81c8961068f856004611124565b61069a90600161114d565b60ff16815181106106ad576106ad610d14565b016020015160f81c8a6106c1866004611124565b6106cc90600261114d565b60ff16815181106106df576106df610d14565b016020015160f81c8b6106f3876004611124565b6106fe90600361114d565b60ff168151811061071157610711610d14565b602001015160f81c60f81b60f81c60405160200161073496959493929190611172565b60405160208183030381529060405292508080610750906111cc565b91505061062d565b61076383878761046d565b98975050505050505050565b606061077e6104ab8484610287565b6107906104ab856100e2866001610f79565b6107a26104ab866100e2876002610f79565b6107b46104ab876100e2886003610f79565b60405160200161038b94939291906111eb565b6060816000036107ee5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610818578061080281611289565b91506108119050600a836110da565b91506107f2565b60008167ffffffffffffffff811115610833576108336108c8565b6040519080825280601f01601f19166020018201604052801561085d576020820181803683370190505b5090505b841561027f576108726001836110ee565b915061087f600a866112a2565b61088a906030610f79565b60f81b81838151811061089f5761089f610d14565b60200101906001600160f81b031916908160001a9053506108c1600a866110da565b9450610861565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610907576109076108c8565b604052919050565b600067ffffffffffffffff821115610929576109296108c8565b50601f01601f191660200190565b600061094a6109458461090f565b6108de565b905082815283838301111561095e57600080fd5b828260208301376000602084830101529392505050565b600082601f83011261098657600080fd5b61099583833560208501610937565b9392505050565b6000602082840312156109ae57600080fd5b813567ffffffffffffffff8111156109c557600080fd5b61027f84828501610975565b60005b838110156109ec5781810151838201526020016109d4565b838111156109fb576000848401525b50505050565b60008151808452610a198160208601602086016109d1565b601f01601f19169290920160200192915050565b6020815260006109956020830184610a01565b600080600060608486031215610a5557600080fd5b833567ffffffffffffffff80821115610a6d57600080fd5b610a7987838801610975565b94506020860135915080821115610a8f57600080fd5b610a9b87838801610975565b93506040860135915080821115610ab157600080fd5b50610abe86828701610975565b9150509250925092565b60008060408385031215610adb57600080fd5b823567ffffffffffffffff811115610af257600080fd5b610afe85828601610975565b95602094909401359450505050565b60008060408385031215610b2057600080fd5b823567ffffffffffffffff811115610b3757600080fd5b610b4385828601610975565b925050602083013560ff81168114610b5a57600080fd5b809150509250929050565b60008060008060808587031215610b7b57600080fd5b843567ffffffffffffffff80821115610b9357600080fd5b610b9f88838901610975565b95506020870135915080821115610bb557600080fd5b610bc188838901610975565b94506040870135915080821115610bd757600080fd5b610be388838901610975565b93506060870135915080821115610bf957600080fd5b50610c0687828801610975565b91505092959194509250565b600181811c90821680610c2657607f821691505b602082108103610c4657634e487b7160e01b600052602260045260246000fd5b50919050565b608081526000608082015260a060208201526000610c6d60a0830186610a01565b8281036040840152610c7f8186610a01565b90508281036060840152610c938185610a01565b9695505050505050565b600060208284031215610caf57600080fd5b815167ffffffffffffffff811115610cc657600080fd5b8201601f81018413610cd757600080fd5b8051610ce56109458261090f565b818152856020838501011115610cfa57600080fd5b610d0b8260208301602086016109d1565b95945050505050565b634e487b7160e01b600052603260045260246000fd5b60008251610d3c8184602087016109d1565b9190910192915050565b8054600090600181811c9080831680610d6057607f831692505b60208084108203610d8157634e487b7160e01b600052602260045260246000fd5b818015610d955760018114610daa57610dd7565b60ff1986168952841515850289019650610dd7565b60008881526020902060005b86811015610dcf5781548b820152908501908301610db6565b505084890196505b50505050505092915050565b6000610def8285610d46565b60f89390931b6001600160f81b03191683525050600101919050565b6000610e178284610d46565b601960fa1b81526001019392505050565b633c189e9160e11b81528451600090610e48816004850160208a016109d1565b661291103c191e9160c91b6004918401918201528551610e6f81600b840160208a016109d1565b661291103c989e9160c91b600b92909101918201528451610e978160128401602089016109d1565b600481830101915050661291103c991e9160c91b600e8201528351610ec38160158401602088016109d1565b61129160f11b601592909101918201526017019695505050505050565b731e3634b732b0b923b930b234b2b73a1034b21e9160611b81528351600090610f108160148501602089016109d1565b61011160f51b6014918401918201528451610f328160168401602089016109d1565b8451910190610f488160168401602088016109d1565b601f60f91b6016929091019182015260170195945050505050565b634e487b7160e01b600052601160045260246000fd5b60008219821115610f8c57610f8c610f63565b500190565b60008651610fa3818460208b016109d1565b6d1e39ba37b81037b33339b2ba1e9160911b9083019081528651610fce81600e840160208b016109d1565b6e12911039ba37b816b1b7b637b91e9160891b600e92909101918201528551610ffe81601d840160208a016109d1565b65111034b21e9160d11b601d929091019182015284516110258160238401602089016109d1565b600e8183010191505083516110418160158401602088016109d1565b6211179f60e91b60159290910191820152601801979650505050505050565b600082516110728184602087016109d1565b701e17b634b732b0b923b930b234b2b73a1f60791b920191825250601101919050565b60ff60f81b8360f81b168152600082516110b68160018501602087016109d1565b919091016001019392505050565b634e487b7160e01b600052601260045260246000fd5b6000826110e9576110e96110c4565b500490565b60008282101561110057611100610f63565b500390565b600081600019048311821515161561111f5761111f610f63565b500290565b600060ff821660ff84168160ff048111821515161561114557611145610f63565b029392505050565b600060ff821660ff84168060ff0382111561116a5761116a610f63565b019392505050565b60008751611184818460208c016109d1565b60f897881b6001600160f81b03199081169390910192835295871b861660018301525092851b8416600284015290841b8316600383015290921b166004820152600501919050565b600060ff821660ff81036111e2576111e2610f63565b60010192915050565b640e4cec4c2560db1b81526000855161120b816005850160208a016109d1565b8083019050600b60fa1b806005830152865161122e816006850160208b016109d1565b60069201918201819052855161124b816007850160208a016109d1565b60079201918201528351600582019161126c908290600801602088016109d1565b61252960f01b600392909101918201526005019695505050505050565b60006001820161129b5761129b610f63565b5060010190565b6000826112b1576112b16110c4565b50069056fea2646970667358221220d90d6baa2b2cd4ba5470a73c71b2ddeb7e57e167c30275c7e25c352fb29ba7d764736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c8063b018757011610066578063b01875701461010c578063cde589101461011f578063cf0eca0914610132578063d6412c2714610145578063e5d19e691461015857600080fd5b806340c629fe146100985780634b698358146100c15780635119ce4b146100d4578063525f3654146100f9575b600080fd5b6100ab6100a636600461099c565b61016b565b6040516100b89190610a2d565b60405180910390f35b6100ab6100cf366004610a40565b610210565b6100e76100e2366004610ac8565b610287565b60405160ff90911681526020016100b8565b6100ab610107366004610b0d565b6102ef565b6100ab61011a36600461099c565b6103a2565b6100ab61012d36600461099c565b610452565b6100ab610140366004610a40565b61046d565b6100ab610153366004610b65565b6105ca565b6100ab610166366004610ac8565b61076f565b80516020818301810180516000825292820191909301209152805461018f90610c12565b80601f01602080910402602001604051908101604052809291908181526020018280546101bb90610c12565b80156102085780601f106101dd57610100808354040283529160200191610208565b820191906000526020600020905b8154815290600101906020018083116101eb57829003601f168201915b505050505081565b60405163d6412c2760e01b8152606090309063d6412c279061023a90879087908790600401610c4c565b600060405180830381865afa158015610257573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261027f9190810190610c9d565b949350505050565b6000818351116102cd5760405162461bcd60e51b815260206004820152600c60248201526b4f7574206f662072616e676560a01b60448201526064015b60405180910390fd5b8282815181106102df576102df610d14565b016020015160f81c905092915050565b60606000836040516103019190610d2a565b9081526020016040518091039020805461031a90610c12565b905060031461035b5760405162461bcd60e51b815260206004820152600d60248201526c2ab735b737bbb71031b7b637b960991b60448201526064016102c4565b60008360405161036b9190610d2a565b90815260200160405180910390208260405160200161038b929190610de3565b604051602081830303815290604052905092915050565b60606000826040516103b49190610d2a565b908152602001604051809103902080546103cd90610c12565b905060031461040e5760405162461bcd60e51b815260206004820152600d60248201526c2ab735b737bbb71031b7b637b960991b60448201526064016102c4565b60008260405161041e9190610d2a565b908152602001604051809103902060405160200161043c9190610e0b565b6040516020818303038152906040529050919050565b6060610467610460836103a2565b600061076f565b92915050565b6060806000600190508560008151811061048957610489610d14565b60209101015160f81c60809081169003610506576104b36104ab876001610287565b60ff166107c7565b6104c16104ab886002610287565b6104cf6104ab896003610287565b6104dd6104ab8a6004610287565b6040516020016104f09493929190610e28565b6040516020818303038152906040529150600590505b84848360405160200161051b93929190610ee0565b60408051601f19818403018152919052915060ff81165b865181101561059e57826105496104ab8984610287565b61055889610166856001610f79565b886105666104ab8c87610287565b60405160200161057a959493929190610f91565b60408051601f198184030181529190529250610597600582610f79565b9050610532565b50816040516020016105b09190611060565b604051602081830303815290604052925050509392505050565b606080600386511115610601576080866040516020016105eb929190611095565b6040516020818303038152906040529050610618565b506040805180820190915260018152600060208201525b60006004865161062891906110da565b905060005b818160ff16101561075857826106446001846110ee565b61064f9060646110da565b61065c9060ff8416611105565b88610668846004611124565b60ff168151811061067b5761067b610d14565b016020015160f81c8961068f856004611124565b61069a90600161114d565b60ff16815181106106ad576106ad610d14565b016020015160f81c8a6106c1866004611124565b6106cc90600261114d565b60ff16815181106106df576106df610d14565b016020015160f81c8b6106f3876004611124565b6106fe90600361114d565b60ff168151811061071157610711610d14565b602001015160f81c60f81b60f81c60405160200161073496959493929190611172565b60405160208183030381529060405292508080610750906111cc565b91505061062d565b61076383878761046d565b98975050505050505050565b606061077e6104ab8484610287565b6107906104ab856100e2866001610f79565b6107a26104ab866100e2876002610f79565b6107b46104ab876100e2886003610f79565b60405160200161038b94939291906111eb565b6060816000036107ee5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610818578061080281611289565b91506108119050600a836110da565b91506107f2565b60008167ffffffffffffffff811115610833576108336108c8565b6040519080825280601f01601f19166020018201604052801561085d576020820181803683370190505b5090505b841561027f576108726001836110ee565b915061087f600a866112a2565b61088a906030610f79565b60f81b81838151811061089f5761089f610d14565b60200101906001600160f81b031916908160001a9053506108c1600a866110da565b9450610861565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610907576109076108c8565b604052919050565b600067ffffffffffffffff821115610929576109296108c8565b50601f01601f191660200190565b600061094a6109458461090f565b6108de565b905082815283838301111561095e57600080fd5b828260208301376000602084830101529392505050565b600082601f83011261098657600080fd5b61099583833560208501610937565b9392505050565b6000602082840312156109ae57600080fd5b813567ffffffffffffffff8111156109c557600080fd5b61027f84828501610975565b60005b838110156109ec5781810151838201526020016109d4565b838111156109fb576000848401525b50505050565b60008151808452610a198160208601602086016109d1565b601f01601f19169290920160200192915050565b6020815260006109956020830184610a01565b600080600060608486031215610a5557600080fd5b833567ffffffffffffffff80821115610a6d57600080fd5b610a7987838801610975565b94506020860135915080821115610a8f57600080fd5b610a9b87838801610975565b93506040860135915080821115610ab157600080fd5b50610abe86828701610975565b9150509250925092565b60008060408385031215610adb57600080fd5b823567ffffffffffffffff811115610af257600080fd5b610afe85828601610975565b95602094909401359450505050565b60008060408385031215610b2057600080fd5b823567ffffffffffffffff811115610b3757600080fd5b610b4385828601610975565b925050602083013560ff81168114610b5a57600080fd5b809150509250929050565b60008060008060808587031215610b7b57600080fd5b843567ffffffffffffffff80821115610b9357600080fd5b610b9f88838901610975565b95506020870135915080821115610bb557600080fd5b610bc188838901610975565b94506040870135915080821115610bd757600080fd5b610be388838901610975565b93506060870135915080821115610bf957600080fd5b50610c0687828801610975565b91505092959194509250565b600181811c90821680610c2657607f821691505b602082108103610c4657634e487b7160e01b600052602260045260246000fd5b50919050565b608081526000608082015260a060208201526000610c6d60a0830186610a01565b8281036040840152610c7f8186610a01565b90508281036060840152610c938185610a01565b9695505050505050565b600060208284031215610caf57600080fd5b815167ffffffffffffffff811115610cc657600080fd5b8201601f81018413610cd757600080fd5b8051610ce56109458261090f565b818152856020838501011115610cfa57600080fd5b610d0b8260208301602086016109d1565b95945050505050565b634e487b7160e01b600052603260045260246000fd5b60008251610d3c8184602087016109d1565b9190910192915050565b8054600090600181811c9080831680610d6057607f831692505b60208084108203610d8157634e487b7160e01b600052602260045260246000fd5b818015610d955760018114610daa57610dd7565b60ff1986168952841515850289019650610dd7565b60008881526020902060005b86811015610dcf5781548b820152908501908301610db6565b505084890196505b50505050505092915050565b6000610def8285610d46565b60f89390931b6001600160f81b03191683525050600101919050565b6000610e178284610d46565b601960fa1b81526001019392505050565b633c189e9160e11b81528451600090610e48816004850160208a016109d1565b661291103c191e9160c91b6004918401918201528551610e6f81600b840160208a016109d1565b661291103c989e9160c91b600b92909101918201528451610e978160128401602089016109d1565b600481830101915050661291103c991e9160c91b600e8201528351610ec38160158401602088016109d1565b61129160f11b601592909101918201526017019695505050505050565b731e3634b732b0b923b930b234b2b73a1034b21e9160611b81528351600090610f108160148501602089016109d1565b61011160f51b6014918401918201528451610f328160168401602089016109d1565b8451910190610f488160168401602088016109d1565b601f60f91b6016929091019182015260170195945050505050565b634e487b7160e01b600052601160045260246000fd5b60008219821115610f8c57610f8c610f63565b500190565b60008651610fa3818460208b016109d1565b6d1e39ba37b81037b33339b2ba1e9160911b9083019081528651610fce81600e840160208b016109d1565b6e12911039ba37b816b1b7b637b91e9160891b600e92909101918201528551610ffe81601d840160208a016109d1565b65111034b21e9160d11b601d929091019182015284516110258160238401602089016109d1565b600e8183010191505083516110418160158401602088016109d1565b6211179f60e91b60159290910191820152601801979650505050505050565b600082516110728184602087016109d1565b701e17b634b732b0b923b930b234b2b73a1f60791b920191825250601101919050565b60ff60f81b8360f81b168152600082516110b68160018501602087016109d1565b919091016001019392505050565b634e487b7160e01b600052601260045260246000fd5b6000826110e9576110e96110c4565b500490565b60008282101561110057611100610f63565b500390565b600081600019048311821515161561111f5761111f610f63565b500290565b600060ff821660ff84168160ff048111821515161561114557611145610f63565b029392505050565b600060ff821660ff84168060ff0382111561116a5761116a610f63565b019392505050565b60008751611184818460208c016109d1565b60f897881b6001600160f81b03199081169390910192835295871b861660018301525092851b8416600284015290841b8316600383015290921b166004820152600501919050565b600060ff821660ff81036111e2576111e2610f63565b60010192915050565b640e4cec4c2560db1b81526000855161120b816005850160208a016109d1565b8083019050600b60fa1b806005830152865161122e816006850160208b016109d1565b60069201918201819052855161124b816007850160208a016109d1565b60079201918201528351600582019161126c908290600801602088016109d1565b61252960f01b600392909101918201526005019695505050505050565b60006001820161129b5761129b610f63565b5060010190565b6000826112b1576112b16110c4565b50069056fea2646970667358221220d90d6baa2b2cd4ba5470a73c71b2ddeb7e57e167c30275c7e25c352fb29ba7d764736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 14466,
        "contract": "contracts/libraries/SVGColor.sol:SVGColor",
        "label": "colors",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_string_memory_ptr,t_bytes_storage)"
      }
    ],
    "types": {
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_string_memory_ptr,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      }
    }
  }
}