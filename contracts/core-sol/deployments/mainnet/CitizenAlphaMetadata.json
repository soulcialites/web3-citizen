{
  "address": "0x519C821A213c3DCc3463a9158Ad9523F46964827",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract SVGColor",
          "name": "_svgColor",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_key",
          "type": "string"
        }
      ],
      "name": "pushTraitField",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract CitizenAlpha",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "setToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_key",
          "type": "string"
        }
      ],
      "name": "setTraitField",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "svgColor",
      "outputs": [
        {
          "internalType": "contract SVGColor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1322307417f9bd0267ae259e2722b93d303f4e5fcde45feef8a314718734a88c",
  "receipt": {
    "to": null,
    "from": "0xfc4099eF10CC6255E8662eF85CF82067A7f2e3fd",
    "contractAddress": "0x519C821A213c3DCc3463a9158Ad9523F46964827",
    "transactionIndex": 198,
    "gasUsed": "2613119",
    "logsBloom": "0x
    "blockHash": "0x5976129da2ca04b6061ff163e7eaa752e7804524761575aceb64e3e9a905e976",
    "transactionHash": "0x1322307417f9bd0267ae259e2722b93d303f4e5fcde45feef8a314718734a88c",
    "logs": [
      {
        "transactionIndex": 198,
        "blockNumber": 15121236,
        "transactionHash": "0x1322307417f9bd0267ae259e2722b93d303f4e5fcde45feef8a314718734a88c",
        "address": "0x519C821A213c3DCc3463a9158Ad9523F46964827",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000fc4099ef10cc6255e8662ef85cf82067a7f2e3fd"
        ],
        "data": "0x",
        "logIndex": 322,
        "blockHash": "0x5976129da2ca04b6061ff163e7eaa752e7804524761575aceb64e3e9a905e976"
      }
    ],
    "blockNumber": 15121236,
    "cumulativeGasUsed": "17004621",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xBfa9c6F96CBF4035a3EC79B6512972c1618CcaB2"
  ],
  "numDeployments": 1,
  "solcInputHash": "7c8b3e0ee24320628d959f3333563599",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract SVGColor\",\"name\":\"_svgColor\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_key\",\"type\":\"string\"}],\"name\":\"pushTraitField\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract CitizenAlpha\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_key\",\"type\":\"string\"}],\"name\":\"setTraitField\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"svgColor\",\"outputs\":[{\"internalType\":\"contract SVGColor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CitizenAlphaMetadata.sol\":\"CitizenAlphaMetadata\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb4d87ee2ead4bd192b41c128f287d4b7f24b9e0cd740cc9b476881c461286007\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x921f012325281f7d81e29c53a13824cf6c2c5d77232065d0d4f3f912e97af6ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa73959e6ef0b693e4423a562e612370160b934a75e618361ddd8c9c4b8ddbaaf\",\"license\":\"MIT\"},\"contracts/CitizenAlpha.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport { Base64 } from \\\"base64-sol/base64.sol\\\";\\nimport { Strings } from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport { AccessControl } from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport { ERC721 } from \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport { CitizenAlphaMetadata } from \\\"./CitizenAlphaMetadata.sol\\\";\\n\\n/**\\n _    _      _      _____   _____ _ _   _               \\n| |  | |    | |    |____ | /  __ (_) | (_)              \\n| |  | | ___| |__      / / | /  \\\\/_| |_ _ _______ _ __  \\n| |/\\\\| |/ _ \\\\ '_ \\\\     \\\\ \\\\ | |   | | __| |_  / _ \\\\ '_ \\\\ \\n\\\\  /\\\\  /  __/ |_) |.___/ / | \\\\__/\\\\ | |_| |/ /  __/ | | |\\n \\\\/  \\\\/ \\\\___|_.__/ \\\\____/   \\\\____/_|\\\\__|_/___\\\\___|_| |_|\\n\\n\\ud83d\\uddfa\\ufe0f Overview:\\nCitizenAlpha (Beta) is an experiment for bootstrapping a Decentralized Society.\\nCombining on-chain permissions and off-chain data (ENS text fields i.e. DIDs, pointers, etc...)\\nCitizenAlpha is an attempt to better understand Web3 of Trust mechanics.\\nSimple in nature, the contract is only responsible for issuing/revoking of soulbounds. \\nMetadata is generated via an external contract: allowing on-going updates during the Beta.\\n\\n\\ud83c\\udfd7\\ufe0f Architecture:\\nCitizens:\\n  - Issue Citizenship\\nFounders:\\n  - Issue Citizenship\\n  - Revoke Citizenship\\n  Admin:\\n  - Issue Citizenship\\n  - Revoke Citizenship\\n  - Add Founder\\n  - Remover Founder\\n*/\\n\\n/**\\n * @title CitizenAlpha\\n * @author Kames Geraghty\\n * @notice CitizenAlpha is a Web3 of Trust experiment.\\n           Combining Soulbounds and Decentralized Identifiers to bootstrap a Decentralized Society.\\n */\\ncontract CitizenAlpha is ERC721, AccessControl {\\n  using Strings for uint256;\\n  using Strings for address;\\n\\n  /// @notice Total citizenships issued\\n  uint256 private _idCounter;\\n\\n  /// @notice CitizenAlphaMetadata instance used to generate token metadata\\n  CitizenAlphaMetadata private metadata;\\n\\n  /// @notice Reverse lookup of a tokenId using the owner address\\n  mapping(address => uint256) private _tokens;\\n\\n  /// @notice Lookup address of Citizenship issuer\\n  mapping(address => address) private _citizenLinks;\\n\\n  /// @notice Founder Role to enforce access controls\\n  bytes32 public constant FOUNDER = keccak256(\\\"FOUNDER\\\");\\n\\n  /**\\n   * @notice Emit when Citizenship is issued.\\n   * @param id Citizen ID\\n   * @param citizen Address of new Citizen\\n   * @param link Address of  Citizen issuing new Citizenship\\n   */\\n  event Issued(uint256 id, address indexed citizen, address indexed link);\\n\\n  /**\\n   * @notice Emit when Citizenship is revoked.\\n   * @param id Citizen ID\\n   * @param citizen Address of new Citizen\\n   * @param link Address of Founder revoking Citizenship\\n   */\\n  event Revoked(uint256 id, address indexed citizen, address indexed link);\\n\\n  /**\\n   * @notice GaugeController Construction\\n   * @param _metadata CitizenAlphaMetadata instance (manage token metadata)\\n   * @param _founders Array of Founding Citizens\\n   */\\n  constructor(CitizenAlphaMetadata _metadata, address[] memory _founders) ERC721(\\\"Citizen\\\", \\\"CIZ\\\") {\\n    metadata = _metadata;\\n    for (uint256 i = 0; i < _founders.length; i++) {\\n      _issue(_founders[i], 0x0000000000000000000000000000000000000000);\\n      _setupRole(DEFAULT_ADMIN_ROLE, _founders[i]);\\n      _setupRole(FOUNDER, _founders[i]);\\n    }\\n  }\\n\\n  modifier isAuthorizedCitizen(address _citizen) {\\n    require(balanceOf(_citizen) == 1, \\\"CitizenAlpha:unauthorized-access\\\");\\n    _;\\n  }\\n\\n  /* ===================================================================================== */\\n  /* External Functions                                                                    */\\n  /* ===================================================================================== */\\n\\n  /**\\n   * @notice Read totalCitizens (_idCounter)\\n   * @return totalCitizens uint256\\n   */\\n  function totalCitizens() external view returns (uint256) {\\n    return _idCounter;\\n  }\\n\\n  /**\\n   * @notice Check Citizenship status\\n   * @param citizen Address of potential Citizen\\n   * @return status bool\\n   */\\n  function isCitizen(address citizen) external view returns (bool status) {\\n    return balanceOf(citizen) == 1 ? true : false;\\n  }\\n\\n  /**\\n   * @notice Check Citizenship ID\\n   * @param citizen address\\n   * @return id uint256\\n   */\\n  function getId(address citizen) external view returns (uint256) {\\n    require(_isCitizen(citizen), \\\"CitizenAlpha:not-active-citizen\\\");\\n    return _tokens[citizen];\\n  }\\n\\n  /**\\n   * @notice Lookup the issuer of Citizenship\\n   * @param citizen address\\n   * @return issuer address\\n   */\\n  function getLink(address citizen) external view returns (address issuer) {\\n    return _citizenLinks[citizen];\\n  }\\n\\n  /**\\n   * @notice Issue a new Citizenship\\n   * @param to address\\n   */\\n  function issue(address to) external isAuthorizedCitizen(msg.sender) {\\n    require(!_isCitizen(to), \\\"CitizenAlpha:active-citizenship\\\");\\n    require(!_isPreviouslyIssued(to), \\\"CitizenAlpha:revoked-citizenship\\\");\\n    _issue(to, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Revoke an existing Citizenship\\n   * @param from address\\n   */\\n  function revoke(address from) external onlyRole(FOUNDER) isAuthorizedCitizen(msg.sender) {\\n    require(_isCitizen(from), \\\"CitizenAlpha:not-active-citizen\\\");\\n    uint256 tokenId = _tokens[from];\\n    _burn(tokenId);\\n    emit Revoked(tokenId, from, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Add Founder access\\n   * @param citizen address\\n   */\\n  function addFounder(address citizen) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n    require(_isCitizen(citizen), \\\"CitizenAlpha:not-active-citizen\\\");\\n    grantRole(FOUNDER, citizen);\\n  }\\n\\n  /**\\n   * @notice Remove Founder access\\n   * @param citizen address\\n   */\\n  function removeFounder(address citizen) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n    revokeRole(FOUNDER, citizen);\\n  }\\n\\n  /**\\n   * @notice Check Founder status\\n   * @param founder address\\n   * @return status bool\\n   */\\n  function isFounder(address founder) external view returns (bool status) {\\n    return hasRole(FOUNDER, founder);\\n  }\\n\\n  /**\\n   * @notice Override transferFrom to make non-transferable\\n   */\\n  function transferFrom(\\n    address,\\n    address,\\n    uint256\\n  ) public virtual override {\\n    require(false, \\\"CitizenAlpha: Soulbound\\\");\\n  }\\n\\n  /**\\n   * @notice Generate token URI\\n   * @param tokenId uint256\\n   * @return metadata string\\n   */\\n  function tokenURI(uint256 tokenId) public view override returns (string memory) {\\n    return metadata.tokenURI(tokenId);\\n  }\\n\\n  function supportsInterface(bytes4 interfaceId)\\n    public\\n    view\\n    virtual\\n    override(ERC721, AccessControl)\\n    returns (bool)\\n  {\\n    return super.supportsInterface(interfaceId);\\n  }\\n\\n  /* ===================================================================================== */\\n  /* Internal Functions                                                                    */\\n  /* ===================================================================================== */\\n\\n  function _isCitizen(address citizen) internal view returns (bool) {\\n    return balanceOf(citizen) == 1 ? true : false;\\n  }\\n\\n  /**\\n   * @dev First Founder can be issued<>revoked<>issued.\\n   *      All other address can only be issued<>revoked.\\n   */\\n  function _isPreviouslyIssued(address citizen) internal view returns (bool) {\\n    return _tokens[citizen] != 0 ? true : false;\\n  }\\n\\n  function _issue(address to, address link) internal {\\n    uint256 __idCounter = _idCounter++;\\n    _citizenLinks[to] = link;\\n    _tokens[to] = __idCounter;\\n    _mint(to, __idCounter);\\n    emit Issued(__idCounter, to, msg.sender);\\n  }\\n}\\n\",\"keccak256\":\"0xe0351fadd5350ee2c89928d4badb1cc2fe23f9d37cf8347d38458b70799995cd\",\"license\":\"MIT\"},\"contracts/CitizenAlphaMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.6;\\n\\nimport { Base64 } from \\\"base64-sol/base64.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { Strings } from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport { IERC721 } from \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport { svg } from \\\"./lib/SVG.sol\\\";\\nimport { svgUtils } from \\\"./lib/SVGUtils.sol\\\";\\nimport { SVGColor } from \\\"./lib/SVGColor.sol\\\";\\nimport { CitizenAlpha } from \\\"./CitizenAlpha.sol\\\";\\nimport { ENS } from \\\"./interfaces/ENS.sol\\\";\\nimport { NameEncoder } from \\\"./lib/NameEncoder.sol\\\";\\nimport { IReverseRegistrar } from \\\"./interfaces/IReverseRegistrar.sol\\\";\\nimport { ITextResolver } from \\\"./interfaces/ITextResolver.sol\\\";\\nimport { IDefaultReverseResolver } from \\\"./interfaces/IDefaultReverseResolver.sol\\\";\\n\\ncontract CitizenAlphaMetadata is Ownable {\\n  using NameEncoder for string;\\n  using Strings for address;\\n  using Strings for uint256;\\n  using Strings for uint8;\\n\\n  CitizenAlpha private token;\\n  SVGColor public svgColor;\\n  address private ens = 0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e;\\n  address private resolver = 0x4976fb03C32e5B8cfe2b6cCB31c09Ba78EBaBa41;\\n  address private reverseRegistrar = 0x084b1c3C81545d370f3634392De611CaaBFf8148;\\n  address private defaultReverseResolver = 0xA2C122BE93b0074270ebeE7f6b7292C7deB45047;\\n\\n  string[] private traitKeys;\\n\\n  constructor(SVGColor _svgColor) public {\\n    svgColor = _svgColor;\\n    traitKeys.push(\\\"avatar\\\");\\n    traitKeys.push(\\\"url\\\");\\n    traitKeys.push(\\\"description\\\");\\n    traitKeys.push(\\\"com.github\\\");\\n    traitKeys.push(\\\"com.twitter\\\");\\n    traitKeys.push(\\\"org.telegram\\\");\\n    traitKeys.push(\\\"did\\\");\\n  }\\n\\n  /* ===================================================================================== */\\n  /* External Functions                                                                    */\\n  /* ===================================================================================== */\\n\\n  function tokenURI(uint256 tokenId) external view returns (string memory) {\\n    return _constructTokenURI(tokenId);\\n  }\\n\\n  function setToken(CitizenAlpha _token) external onlyOwner {\\n    token = _token;\\n  }\\n\\n  function pushTraitField(string calldata _key) external onlyOwner {\\n    traitKeys.push(_key);\\n  }\\n\\n  function setTraitField(uint256 _index, string calldata _key) external onlyOwner {\\n    traitKeys[_index] = _key;\\n  }\\n\\n  /* ===================================================================================== */\\n  /* Internal Functions                                                                    */\\n  /* ===================================================================================== */\\n\\n  function _constructTokenURI(uint256 _tokenId) internal view returns (string memory) {\\n    address citizen_ = token.ownerOf(_tokenId);\\n    (string memory alias_, bytes32 node_, ITextResolver res_) = _resolveOwner(citizen_);\\n    string memory name_ = string(abi.encodePacked(\\\"Citizen #\\\", _tokenId.toString()));\\n    string memory description_ = bytes(alias_).length > 0\\n      ? alias_\\n      : Strings.toHexString(uint256(uint160(citizen_)), 20);\\n    string memory avatar_ = _generateImage(res_.text(node_, \\\"avatar\\\"), _tokenId, alias_);\\n    (string[] memory keys_, string[] memory values_) = _fetchNodeTextFields(traitKeys, node_, res_);\\n    address link_ = token.getLink(citizen_);\\n    bool isFounder_ = token.isFounder(citizen_);\\n    string memory traits_ = _generateTraits(keys_, values_);\\n\\n    return\\n      string(\\n        abi.encodePacked(\\n          \\\"data:application/json;base64,\\\",\\n          Base64.encode(\\n            bytes(\\n              string.concat(\\n                '{\\\"name\\\":',\\n                '\\\"',\\n                name_,\\n                '\\\",',\\n                '\\\"description\\\":',\\n                '\\\"',\\n                description_,\\n                '\\\",',\\n                '\\\"image\\\":',\\n                '\\\"',\\n                avatar_,\\n                '\\\",',\\n                '\\\"attributes\\\": [',\\n                string.concat(\\n                  traits_,\\n                  _generateTrait(\\\"isFounder\\\", isFounder_ ? \\\"true\\\" : \\\"false\\\"),\\n                  \\\",\\\",\\n                  _generateTrait(\\\"link\\\", Strings.toHexString(uint256(uint160(link_)), 20))\\n                ),\\n                \\\"]\\\",\\n                \\\"}\\\"\\n              )\\n            )\\n          )\\n        )\\n      );\\n  }\\n\\n  function _appendTrait(string memory _traits, string memory _traitAppending)\\n    internal\\n    view\\n    returns (string memory)\\n  {\\n    return string.concat(_traits, bytes(_traits).length > 0 ? \\\",\\\" : \\\"\\\", _traitAppending);\\n  }\\n\\n  function _generateImage(\\n    string memory _avatar,\\n    uint256 tokenId,\\n    string memory alias_\\n  ) internal view returns (string memory) {\\n    if (bytes(_avatar).length == 0) {\\n      return\\n        string(\\n          abi.encodePacked(\\n            \\\"data:image/svg+xml;base64,\\\",\\n            Base64.encode(bytes(_generate(tokenId, alias_)))\\n          )\\n        );\\n    }\\n    return _avatar;\\n  }\\n\\n  function _generateTrait(string memory _key, string memory _value)\\n    internal\\n    view\\n    returns (string memory __traits)\\n  {\\n    return string.concat('{\\\"trait_type\\\":' '\\\"', _key, '\\\",', '\\\"value\\\":', '\\\"', _value, '\\\"}');\\n  }\\n\\n  function _generateTraits(string[] memory _keys, string[] memory _values)\\n    internal\\n    view\\n    returns (string memory __traits)\\n  {\\n    string memory _traits = \\\"\\\";\\n    for (uint256 i = 0; i < _keys.length; i++) {\\n      if (bytes(_values[i]).length > 0) {\\n        _traits = string.concat(_traits, _generateTrait(_keys[i], _values[i]), \\\",\\\");\\n      }\\n    }\\n    return _traits;\\n  }\\n\\n  function _resolveOwner(address owner_)\\n    internal\\n    view\\n    returns (\\n      string memory,\\n      bytes32,\\n      ITextResolver\\n    )\\n  {\\n    bytes32 node_ = IReverseRegistrar(reverseRegistrar).node(owner_);\\n    string memory _name = IDefaultReverseResolver(defaultReverseResolver).name(node_);\\n    (, bytes32 _node) = _name.dnsEncodeName();\\n    ITextResolver _resolver = ITextResolver(resolver);\\n    return (_name, _node, _resolver);\\n  }\\n\\n  function _fetchNodeTextFields(\\n    string[] memory _traits,\\n    bytes32 _node,\\n    ITextResolver _resolver\\n  ) internal view returns (string[] memory keys_, string[] memory values_) {\\n    string[] memory __keys = new string[](_traits.length);\\n    string[] memory __values = new string[](_traits.length);\\n    for (uint256 i = 0; i < _traits.length; i++) {\\n      __keys[i] = _traits[i];\\n      __values[i] = _resolver.text(_node, _traits[i]);\\n    }\\n    return (__keys, __values);\\n  }\\n\\n  function _generate(uint256 _tokenId, string memory _alias) internal view returns (string memory) {\\n    string memory _bgDef = svgUtils.getDefURL(\\\"charcoal\\\");\\n\\n    return\\n      string(\\n        abi.encodePacked(\\n          svg.start(),\\n          _getDefs(),\\n          svg.rect(\\n            string.concat(\\n              svg.prop(\\\"fill\\\", _bgDef),\\n              svg.prop(\\\"x\\\", \\\"0\\\"),\\n              svg.prop(\\\"y\\\", \\\"0\\\"),\\n              svg.prop(\\\"width\\\", \\\"100%\\\"),\\n              svg.prop(\\\"height\\\", \\\"100%\\\")\\n            ),\\n            svgUtils.NULL\\n          ),\\n          svg.text(\\n            string.concat(\\n              svg.prop(\\\"x\\\", \\\"50%\\\"),\\n              svg.prop(\\\"y\\\", \\\"50%\\\"),\\n              svg.prop(\\\"dominant-baseline\\\", \\\"middle\\\"),\\n              svg.prop(\\\"text-anchor\\\", \\\"middle\\\"),\\n              svg.prop(\\\"font-size\\\", \\\"48px\\\"),\\n              svg.prop(\\\"fill\\\", \\\"white\\\")\\n            ),\\n            string.concat(\\\"CIV #\\\", _tokenId.toString())\\n          ),\\n          svg.text(\\n            string.concat(\\n              svg.prop(\\\"x\\\", \\\"50%\\\"),\\n              svg.prop(\\\"y\\\", \\\"60%\\\"),\\n              svg.prop(\\\"dominant-baseline\\\", \\\"middle\\\"),\\n              svg.prop(\\\"text-anchor\\\", \\\"middle\\\"),\\n              svg.prop(\\\"font-size\\\", \\\"22px\\\"),\\n              svg.prop(\\\"fill\\\", \\\"white\\\")\\n            ),\\n            _alias\\n          ),\\n          svg.end()\\n        )\\n      );\\n  }\\n\\n  function _getDefs() internal view returns (string memory) {\\n    return\\n      svg.defs(\\n        string.concat(\\n          svg.linearGradient(\\n            string.concat(svg.prop(\\\"id\\\", \\\"charcoal\\\"), svg.prop(\\\"gradientTransform\\\", \\\"rotate(140)\\\")),\\n            string.concat(\\n              svg.stop(\\n                string.concat(\\n                  svg.prop(\\\"offset\\\", \\\"0%\\\"),\\n                  svg.prop(\\\"stop-color\\\", svgColor.getRgba(\\\"Dark1\\\"))\\n                )\\n              ),\\n              svg.stop(\\n                string.concat(\\n                  svg.prop(\\\"offset\\\", \\\"70%\\\"),\\n                  svg.prop(\\\"stop-color\\\", svgColor.getRgba(\\\"Dark2\\\"))\\n                )\\n              )\\n            )\\n          )\\n        )\\n      );\\n  }\\n}\\n\",\"keccak256\":\"0x4c75a16cca56a0aa031d6cc183da03fbb101e5e83c950e4442352d0625cbc102\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ENS.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface ENS {\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n    // Logged when the owner of a node transfers ownership to a new account.\\n    event Transfer(bytes32 indexed node, address owner);\\n\\n    // Logged when the resolver for a node changes.\\n    event NewResolver(bytes32 indexed node, address resolver);\\n\\n    // Logged when the TTL of a node changes\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n    // Logged when an operator is added or removed.\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    function setRecord(\\n        bytes32 node,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeRecord(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeOwner(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner\\n    ) external returns (bytes32);\\n\\n    function setResolver(bytes32 node, address resolver) external;\\n\\n    function setOwner(bytes32 node, address owner) external;\\n\\n    function setTTL(bytes32 node, uint64 ttl) external;\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function owner(bytes32 node) external view returns (address);\\n\\n    function resolver(bytes32 node) external view returns (address);\\n\\n    function ttl(bytes32 node) external view returns (uint64);\\n\\n    function recordExists(bytes32 node) external view returns (bool);\\n\\n    function isApprovedForAll(address owner, address operator)\\n        external\\n        view\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0xf79be82c1a2eb0a77fba4e0972221912e803309081ca460fd2cf61653e55758a\"},\"contracts/interfaces/IDefaultReverseResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IDefaultReverseResolver {\\n  function name(bytes32 input) external view returns (string calldata);\\n}\\n\",\"keccak256\":\"0x925b12b523e5caf06f107ea15529c741bd6afaa8df5b9396783cff1aa5a4e21f\",\"license\":\"MIT\"},\"contracts/interfaces/IReverseRegistrar.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface IReverseRegistrar {\\n  function setDefaultResolver(address resolver) external;\\n\\n  function claim(address owner) external returns (bytes32);\\n\\n  function claimForAddr(\\n    address addr,\\n    address owner,\\n    address resolver\\n  ) external returns (bytes32);\\n\\n  function claimWithResolver(address owner, address resolver) external returns (bytes32);\\n\\n  function setName(string memory name) external returns (bytes32);\\n\\n  function setNameForAddr(\\n    address addr,\\n    address owner,\\n    address resolver,\\n    string memory name\\n  ) external returns (bytes32);\\n\\n  function node(address addr) external pure returns (bytes32);\\n}\\n\",\"keccak256\":\"0x722f2ccfa92f91c005f396f84de8f54213b93d992552e69a489167c55204558b\"},\"contracts/interfaces/ITextResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface ITextResolver {\\n  event TextChanged(bytes32 indexed node, string indexed indexedKey, string key);\\n\\n  /**\\n   * Returns the text data associated with an ENS node and key.\\n   * @param node The ENS node to query.\\n   * @param key The text data key to query.\\n   * @return The associated text data.\\n   */\\n  function text(bytes32 node, string calldata key) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa99d8aa00bf995a18766905f6e4d72efdca1843fb7092e0222442379731347e5\",\"license\":\"MIT\"},\"contracts/lib/BytesUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nlibrary BytesUtils {\\n  /*\\n   * @dev Returns the keccak-256 hash of a byte range.\\n   * @param self The byte string to hash.\\n   * @param offset The position to start hashing at.\\n   * @param len The number of bytes to hash.\\n   * @return The hash of the byte range.\\n   */\\n  function keccak(\\n    bytes memory self,\\n    uint256 offset,\\n    uint256 len\\n  ) internal pure returns (bytes32 ret) {\\n    require(offset + len <= self.length);\\n    assembly {\\n      ret := keccak256(add(add(self, 32), offset), len)\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the ENS namehash of a DNS-encoded name.\\n   * @param self The DNS-encoded name to hash.\\n   * @param offset The offset at which to start hashing.\\n   * @return The namehash of the name.\\n   */\\n  function namehash(bytes memory self, uint256 offset) internal pure returns (bytes32) {\\n    (bytes32 labelhash, uint256 newOffset) = readLabel(self, offset);\\n    if (labelhash == bytes32(0)) {\\n      require(offset == self.length - 1, \\\"namehash: Junk at end of name\\\");\\n      return bytes32(0);\\n    }\\n    return keccak256(abi.encodePacked(namehash(self, newOffset), labelhash));\\n  }\\n\\n  /**\\n   * @dev Returns the keccak-256 hash of a DNS-encoded label, and the offset to the start of the next label.\\n   * @param self The byte string to read a label from.\\n   * @param idx The index to read a label at.\\n   * @return labelhash The hash of the label at the specified index, or 0 if it is the last label.\\n   * @return newIdx The index of the start of the next label.\\n   */\\n  function readLabel(bytes memory self, uint256 idx)\\n    internal\\n    pure\\n    returns (bytes32 labelhash, uint256 newIdx)\\n  {\\n    require(idx < self.length, \\\"readLabel: Index out of bounds\\\");\\n    uint256 len = uint256(uint8(self[idx]));\\n    if (len > 0) {\\n      labelhash = keccak(self, idx + 1, len);\\n    } else {\\n      labelhash = bytes32(0);\\n    }\\n    newIdx = idx + len + 1;\\n  }\\n}\\n\",\"keccak256\":\"0x319e6759879d5d686e11aa0b546c6fac08e2cb5e5c92b41bd852c48159f2f2b4\",\"license\":\"MIT\"},\"contracts/lib/NameEncoder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport \\\"./BytesUtils.sol\\\";\\n\\nlibrary NameEncoder {\\n  using BytesUtils for bytes;\\n\\n  function dnsEncodeName(string memory name)\\n    internal\\n    pure\\n    returns (bytes memory dnsName, bytes32 node)\\n  {\\n    uint8 labelLength = 0;\\n    bytes memory bytesName = bytes(name);\\n    uint256 length = bytesName.length;\\n    dnsName = new bytes(length + 2);\\n    node = 0;\\n    if (length == 0) {\\n      dnsName[0] = 0;\\n      return (dnsName, node);\\n    }\\n\\n    // use unchecked to save gas since we check for an underflow\\n    // and we check for the length before the loop\\n    unchecked {\\n      for (uint256 i = length - 1; i >= 0; i--) {\\n        if (bytesName[i] == \\\".\\\") {\\n          dnsName[i + 1] = bytes1(labelLength);\\n          node = keccak256(abi.encodePacked(node, bytesName.keccak(i + 1, labelLength)));\\n          labelLength = 0;\\n        } else {\\n          labelLength += 1;\\n          dnsName[i + 1] = bytesName[i];\\n        }\\n        if (i == 0) {\\n          break;\\n        }\\n      }\\n    }\\n\\n    node = keccak256(abi.encodePacked(node, bytesName.keccak(0, labelLength)));\\n\\n    dnsName[0] = bytes1(labelLength);\\n    return (dnsName, node);\\n  }\\n}\\n\",\"keccak256\":\"0x3226a3f83a46c88c88218c261c9002571acd4cdce39c7acabdb59d00c91142ac\",\"license\":\"MIT\"},\"contracts/lib/SVG.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"./SVGUtils.sol\\\";\\n\\n/**\\n * @title svg\\n * @author Kames Geraghty\\n * @notice SVG construction library using web-like API.\\n * @dev Original code from w1nt3r-eth/hot-chain-svg (https://github.com/w1nt3r-eth/hot-chain-svg)\\n */\\nlibrary svg {\\n  using Strings for uint256;\\n  using Strings for uint8;\\n\\n  function g(string memory _props, string memory _children) internal pure returns (string memory) {\\n    return el(\\\"g\\\", _props, _children);\\n  }\\n\\n  function path(string memory _props, string memory _children)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    return el(\\\"path\\\", _props, _children);\\n  }\\n\\n  function text(string memory _props, string memory _children)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    return el(\\\"text\\\", _props, _children);\\n  }\\n\\n  function line(string memory _props, string memory _children)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    return el(\\\"line\\\", _props, _children);\\n  }\\n\\n  function circle(string memory _props, string memory _children)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    return el(\\\"circle\\\", _props, _children);\\n  }\\n\\n  function circle(string memory _props) internal pure returns (string memory) {\\n    return el(\\\"circle\\\", _props);\\n  }\\n\\n  function rect(string memory _props, string memory _children)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    return el(\\\"rect\\\", _props, _children);\\n  }\\n\\n  function rect(string memory _props) internal pure returns (string memory) {\\n    return el(\\\"rect\\\", _props);\\n  }\\n\\n  function stop(string memory _props) internal pure returns (string memory) {\\n    return el(\\\"stop\\\", _props);\\n  }\\n\\n  function filter(string memory _props, string memory _children)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    return el(\\\"filter\\\", _props, _children);\\n  }\\n\\n  function defs(string memory _children) internal pure returns (string memory) {\\n    return el(\\\"defs\\\", \\\"\\\", _children);\\n  }\\n\\n  function cdata(string memory _content) internal pure returns (string memory) {\\n    return string.concat(\\\"<![CDATA[\\\", _content, \\\"]]>\\\");\\n  }\\n\\n  /* GRADIENTS */\\n  function radialGradient(string memory _props, string memory _children)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    return el(\\\"radialGradient\\\", _props, _children);\\n  }\\n\\n  function linearGradient(string memory _props, string memory _children)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    return el(\\\"linearGradient\\\", _props, _children);\\n  }\\n\\n  function gradientStop(\\n    uint256 offset,\\n    string memory stopColor,\\n    string memory _props\\n  ) internal pure returns (string memory) {\\n    return\\n      el(\\n        \\\"stop\\\",\\n        string.concat(\\n          prop(\\\"stop-color\\\", stopColor),\\n          \\\" \\\",\\n          prop(\\\"offset\\\", string.concat(svgUtils.uint2str(offset), \\\"%\\\")),\\n          \\\" \\\",\\n          _props\\n        )\\n      );\\n  }\\n\\n  function animateTransform(string memory _props) internal pure returns (string memory) {\\n    return el(\\\"animateTransform\\\", _props);\\n  }\\n\\n  function image(string memory _href, string memory _props) internal pure returns (string memory) {\\n    return el(\\\"image\\\", string.concat(prop(\\\"href\\\", _href), \\\" \\\", _props));\\n  }\\n\\n  function start() internal pure returns (string memory) {\\n    return\\n      string.concat(\\n        '<svg width=\\\"400\\\" height=\\\"400\\\" style=\\\"background:#541563\\\" ',\\n        'viewBox=\\\"0 0 400 400\\\" ',\\n        'xmlns=\\\"http://www.w3.org/2000/svg\\\" ',\\n        \\\">\\\"\\n      );\\n  }\\n\\n  function end() internal pure returns (bytes memory) {\\n    return (\\\"</svg>\\\");\\n  }\\n\\n  /* COMMON */\\n  // A generic element, can be used to construct any SVG (or HTML) element\\n  function el(\\n    string memory _tag,\\n    string memory _props,\\n    string memory _children\\n  ) internal pure returns (string memory) {\\n    return string.concat(\\\"<\\\", _tag, \\\" \\\", _props, \\\">\\\", _children, \\\"</\\\", _tag, \\\">\\\");\\n  }\\n\\n  // A generic element, can be used to construct any SVG (or HTML) element without children\\n  function el(string memory _tag, string memory _props) internal pure returns (string memory) {\\n    return string.concat(\\\"<\\\", _tag, \\\" \\\", _props, \\\"/>\\\");\\n  }\\n\\n  // an SVG attribute\\n  function prop(string memory _key, string memory _val) internal pure returns (string memory) {\\n    return string.concat(_key, \\\"=\\\", '\\\"', _val, '\\\" ');\\n  }\\n\\n  function stringifyIntSet(\\n    bytes memory _data,\\n    uint256 _offset,\\n    uint256 _len\\n  ) public pure returns (bytes memory) {\\n    bytes memory res;\\n    require(_data.length >= _offset + _len, \\\"Out of range\\\");\\n    for (uint256 i = _offset; i < _offset + _len; i++) {\\n      res = abi.encodePacked(res, byte2uint8(_data, i).toString(), \\\" \\\");\\n    }\\n    return res;\\n  }\\n\\n  function byte2uint8(bytes memory _data, uint256 _offset) public pure returns (uint8) {\\n    require(_data.length > _offset, \\\"Out of range\\\");\\n    return uint8(_data[_offset]);\\n  }\\n}\\n\",\"keccak256\":\"0xef52c3884017a442187844cd9e54e9b1cfc3b17ff40a3008c7cbec918a7f9f7a\",\"license\":\"MIT\"},\"contracts/lib/SVGColor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\ncontract SVGColor {\\n  using Strings for uint256;\\n  using Strings for uint8;\\n\\n  mapping(string => bytes) public colors;\\n\\n  constructor() {\\n    colors[\\\"Black\\\"] = hex\\\"000000\\\";\\n    colors[\\\"White\\\"] = hex\\\"FFFFFF\\\";\\n    colors[\\\"Dark1\\\"] = hex\\\"232323\\\";\\n    colors[\\\"Dark2\\\"] = hex\\\"464646\\\";\\n  }\\n\\n  function getColor(string memory _colorName) public view returns (bytes memory) {\\n    require(colors[_colorName].length == 3, \\\"Unknown color\\\");\\n    return abi.encodePacked(colors[_colorName], hex\\\"64\\\");\\n  }\\n\\n  function getColor(string memory _colorName, uint8 _alpha) public view returns (bytes memory) {\\n    require(colors[_colorName].length == 3, \\\"Unknown color\\\");\\n    return abi.encodePacked(colors[_colorName], _alpha);\\n  }\\n\\n  function getRgba(string memory _colorName) public view returns (string memory) {\\n    return string(toRgba(getColor(_colorName), 0));\\n  }\\n\\n  // Input: array of colors (without alpha)\\n  // Ouputs a linearGradient\\n  function autoLinearGradient(\\n    bytes memory _colors,\\n    bytes memory _id,\\n    bytes memory _customAttributes\\n  ) public view returns (bytes memory) {\\n    return this.autoLinearGradient(\\\"\\\", _colors, _id, _customAttributes);\\n  }\\n\\n  function autoLinearGradient(\\n    bytes memory _coordinates,\\n    bytes memory _colors,\\n    bytes memory _id,\\n    bytes memory _customAttributes\\n  ) external view returns (bytes memory) {\\n    bytes memory _b;\\n    if (_coordinates.length > 3) {\\n      _b = abi.encodePacked(uint8(128), _coordinates);\\n    } else {\\n      _b = hex\\\"00\\\";\\n    }\\n    // Count the number of colors passed, each on 4 byte\\n    uint256 colorCount = _colors.length / 4;\\n    uint8 i = 0;\\n    while (i < colorCount) {\\n      _b = abi.encodePacked(\\n        _b,\\n        uint8(i * (100 / (colorCount - 1))), // grad. stop %\\n        uint8(_colors[i * 4]),\\n        uint8(_colors[i * 4 + 1]),\\n        uint8(_colors[i * 4 + 2]),\\n        uint8(_colors[i * 4 + 3])\\n      );\\n      i++;\\n    }\\n    return linearGradient(_b, _id, _customAttributes);\\n  }\\n\\n  function linearGradient(\\n    bytes memory _lg,\\n    bytes memory _id,\\n    bytes memory _customAttributes\\n  ) public pure returns (bytes memory) {\\n    bytes memory grdata;\\n    uint8 offset = 1;\\n\\n    if (uint8(_lg[0]) & 128 == 128) {\\n      grdata = abi.encodePacked(\\n        'x1=\\\"',\\n        byte2uint8(_lg, 1).toString(),\\n        '%\\\" x2=\\\"',\\n        byte2uint8(_lg, 2).toString(),\\n        '%\\\" y1=\\\"',\\n        byte2uint8(_lg, 3).toString(),\\n        '%\\\" y2=\\\"',\\n        byte2uint8(_lg, 4).toString(),\\n        '%\\\"'\\n      );\\n      offset = 5;\\n    }\\n    grdata = abi.encodePacked('<linearGradient id=\\\"', _id, '\\\" ', _customAttributes, grdata, \\\">\\\");\\n    for (uint256 i = offset; i < _lg.length; i += 5) {\\n      grdata = abi.encodePacked(\\n        grdata,\\n        '<stop offset=\\\"',\\n        byte2uint8(_lg, i).toString(),\\n        '%\\\" stop-color=\\\"',\\n        toRgba(_lg, i + 1),\\n        '\\\" id=\\\"',\\n        _id,\\n        byte2uint8(_lg, i).toString(),\\n        '\\\"/>'\\n      );\\n    }\\n    return abi.encodePacked(grdata, \\\"</linearGradient>\\\");\\n  }\\n\\n  function toRgba(bytes memory _rgba, uint256 offset) public pure returns (bytes memory) {\\n    return\\n      abi.encodePacked(\\n        \\\"rgba(\\\",\\n        byte2uint8(_rgba, offset).toString(),\\n        \\\",\\\",\\n        byte2uint8(_rgba, offset + 1).toString(),\\n        \\\",\\\",\\n        byte2uint8(_rgba, offset + 2).toString(),\\n        \\\",\\\",\\n        byte2uint8(_rgba, offset + 3).toString(),\\n        \\\"%)\\\"\\n      );\\n  }\\n\\n  function byte2uint8(bytes memory _data, uint256 _offset) public pure returns (uint8) {\\n    require(_data.length > _offset, \\\"Out of range\\\");\\n    return uint8(_data[_offset]);\\n  }\\n\\n  // formats rgba white with a specified opacity / alpha\\n  function white_a(uint256 _a) internal pure returns (string memory) {\\n    return rgba(255, 255, 255, _a);\\n  }\\n\\n  // formats rgba black with a specified opacity / alpha\\n  function black_a(uint256 _a) internal pure returns (string memory) {\\n    return rgba(0, 0, 0, _a);\\n  }\\n\\n  // formats generic rgba color in css\\n  function rgba(\\n    uint256 _r,\\n    uint256 _g,\\n    uint256 _b,\\n    uint256 _a\\n  ) internal pure returns (string memory) {\\n    string memory formattedA = _a < 100 ? string.concat(\\\"0.\\\", uint2str(_a)) : \\\"1\\\";\\n    return\\n      string.concat(\\n        \\\"rgba(\\\",\\n        uint2str(_r),\\n        \\\",\\\",\\n        uint2str(_g),\\n        \\\",\\\",\\n        uint2str(_b),\\n        \\\",\\\",\\n        formattedA,\\n        \\\")\\\"\\n      );\\n  }\\n\\n  function uint2str(uint256 _i) internal pure returns (string memory _uintAsString) {\\n    if (_i == 0) {\\n      return \\\"0\\\";\\n    }\\n    uint256 j = _i;\\n    uint256 len;\\n    while (j != 0) {\\n      len++;\\n      j /= 10;\\n    }\\n    bytes memory bstr = new bytes(len);\\n    uint256 k = len;\\n    while (_i != 0) {\\n      k = k - 1;\\n      uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\n      bytes1 b1 = bytes1(temp);\\n      bstr[k] = b1;\\n      _i /= 10;\\n    }\\n    return string(bstr);\\n  }\\n}\\n\",\"keccak256\":\"0x2e33aeee09dbb045bc969ba9b9bc119394b12f0c1d9014172fea986df942af9c\",\"license\":\"MIT\"},\"contracts/lib/SVGUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n/**\\n  * @title  SVG Utilities\\n  * @author Kames Geraghty\\n  * @notice The SVG Utilities Library provides functions for constructing SVG; format CSS and numbers.\\n  * @dev Original code from w1nt3r-eth/hot-chain-svg (https://github.com/w1nt3r-eth/hot-chain-svg)\\n*/\\nlibrary svgUtils {\\n    using Strings for uint256;\\n    using Strings for uint8;\\n    \\n    /// @notice Empty SVG element\\n    string internal constant NULL = \\\"\\\";\\n\\n    /**\\n     * @notice Formats a CSS variable line. Includes a semicolon for formatting.\\n     * @param _key User for which to calculate prize amount.\\n     * @param _val User for which to calculate prize amount.\\n     * @return string Generated CSS variable.\\n    */\\n    function setCssVar(string memory _key, string memory _val)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return string.concat(\\\"--\\\", _key, \\\":\\\", _val, \\\";\\\");\\n    }\\n\\n    /**\\n     * @notice Formats getting a css variable\\n     * @param _key User for which to calculate prize amount.\\n     * @return string Generated CSS variable.\\n    */\\n    function getCssVar(string memory _key)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return string.concat(\\\"var(--\\\", _key, \\\")\\\");\\n    }\\n\\n    // formats getting a def URL\\n    function getDefURL(string memory _id)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return string.concat(\\\"url(#\\\", _id, \\\")\\\");\\n    }\\n\\n    // checks if two strings are equal\\n    function stringsEqual(string memory _a, string memory _b)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return\\n            keccak256(abi.encodePacked(_a)) == keccak256(abi.encodePacked(_b));\\n    }\\n\\n    // returns the length of a string in characters\\n    function utfStringLength(string memory _str)\\n        internal\\n        pure\\n        returns (uint256 length)\\n    {\\n        uint256 i = 0;\\n        bytes memory string_rep = bytes(_str);\\n\\n        while (i < string_rep.length) {\\n            if (string_rep[i] >> 7 == 0) i += 1;\\n            else if (string_rep[i] >> 5 == bytes1(uint8(0x6))) i += 2;\\n            else if (string_rep[i] >> 4 == bytes1(uint8(0xE))) i += 3;\\n            else if (string_rep[i] >> 3 == bytes1(uint8(0x1E)))\\n                i += 4;\\n                //For safety\\n            else i += 1;\\n\\n            length++;\\n        }\\n    }\\n\\n    function round2Txt(\\n        uint256 _value,\\n        uint8 _decimals,\\n        uint8 _prec\\n    ) internal pure returns (bytes memory) {\\n        return abi.encodePacked(\\n            (_value / 10 ** _decimals).toString(), \\n            \\\".\\\",\\n            ( _value / 10 ** (_decimals - _prec) -\\n                _value / 10 ** (_decimals ) * 10 ** _prec\\n            ).toString()\\n        );\\n    }\\n\\n     // converts an unsigned integer to a string\\n     function uint2str(uint256 _i)\\n     internal\\n     pure\\n     returns (string memory _uintAsString)\\n {\\n     if (_i == 0) {\\n         return \\\"0\\\";\\n     }\\n     uint256 j = _i;\\n     uint256 len;\\n     while (j != 0) {\\n         len++;\\n         j /= 10;\\n     }\\n     bytes memory bstr = new bytes(len);\\n     uint256 k = len;\\n     while (_i != 0) {\\n         k = k - 1;\\n         uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\n         bytes1 b1 = bytes1(temp);\\n         bstr[k] = b1;\\n         _i /= 10;\\n     }\\n     return string(bstr);\\n }\\n}\\n\",\"keccak256\":\"0xe8ac1b5676a5d9850445e97799a09a1a30026f03728cb2286eeba23bc57b06e0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600380546001600160a01b03199081166e0c2e074ec69a0dfb2997ba6c7d2e1e17909155600480548216734976fb03c32e5b8cfe2b6ccb31c09ba78ebaba4117905560058054821673084b1c3c81545d370f3634392de611caabff81481790556006805490911673a2c122be93b0074270ebee7f6b7292c7deb450471790553480156200009057600080fd5b5060405162002d6938038062002d69833981016040819052620000b39162000360565b620000be3362000310565b600280546001600160a01b0319166001600160a01b0383161790556007805460018101825560009190915260408051808201909152600681526530bb30ba30b960d11b602082015260008051602062002d498339815191529091019062000126908262000437565b50600780546001810182556000919091526040805180820190915260038152621d5c9b60ea1b602082015260008051602062002d498339815191529091019062000171908262000437565b506007805460018101825560009190915260408051808201909152600b81526a3232b9b1b934b83a34b7b760a91b602082015260008051602062002d4983398151915290910190620001c4908262000437565b506007805460018101825560009190915260408051808201909152600a81526931b7b69733b4ba343ab160b11b602082015260008051602062002d498339815191529091019062000216908262000437565b506007805460018101825560009190915260408051808201909152600b81526a31b7b6973a3bb4ba3a32b960a91b602082015260008051602062002d498339815191529091019062000269908262000437565b506007805460018101825560009190915260408051808201909152600c81526b6f72672e74656c656772616d60a01b602082015260008051602062002d4983398151915290910190620002bd908262000437565b5060078054600181018255600091909152604080518082019091526003815262191a5960ea1b602082015260008051602062002d498339815191529091019062000308908262000437565b505062000503565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156200037357600080fd5b81516001600160a01b03811681146200038b57600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680620003bd57607f821691505b602082108103620003de57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200043257600081815260208120601f850160051c810160208610156200040d5750805b601f850160051c820191505b818110156200042e5782815560010162000419565b5050505b505050565b81516001600160401b0381111562000453576200045362000392565b6200046b81620004648454620003a8565b84620003e4565b602080601f831160018114620004a357600084156200048a5750858301515b600019600386901b1c1916600185901b1785556200042e565b600085815260208120601f198616915b82811015620004d457888601518255948401946001909101908401620004b3565b5085821015620004f35787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61283680620005136000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80638da5cb5b1161005b5780638da5cb5b146100ed578063c87b56dd146100fe578063ce1bca5d1461011e578063f2fde38b1461013157600080fd5b8063144fa6d71461008d57806326913cc3146100a25780635942fda9146100b5578063715018a6146100e5575b600080fd5b6100a061009b366004611cf8565b610144565b005b6100a06100b0366004611d5e565b610199565b6002546100c8906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100a0610205565b6000546001600160a01b03166100c8565b61011161010c366004611da0565b61023b565b6040516100dc9190611e11565b6100a061012c366004611e24565b61024c565b6100a061013f366004611cf8565b6102a8565b6000546001600160a01b031633146101775760405162461bcd60e51b815260040161016e90611e70565b60405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146101c35760405162461bcd60e51b815260040161016e90611e70565b600780546001810182556000919091527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68801610200828483611f43565b505050565b6000546001600160a01b0316331461022f5760405162461bcd60e51b815260040161016e90611e70565b6102396000610343565b565b606061024682610393565b92915050565b6000546001600160a01b031633146102765760405162461bcd60e51b815260040161016e90611e70565b81816007858154811061028b5761028b612004565b9060005260206000200191826102a2929190611f43565b50505050565b6000546001600160a01b031633146102d25760405162461bcd60e51b815260040161016e90611e70565b6001600160a01b0381166103375760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161016e565b61034081610343565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001546040516331a9108f60e11b8152600481018390526060916000916001600160a01b0390911690636352211e90602401602060405180830381865afa1580156103e2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610406919061201a565b9050600080600061041684610809565b925092509250600061042787610921565b6040516020016104379190612053565b604051602081830303815290604052905060008085511161046b57610466866001600160a01b03166014610a2a565b61046d565b845b9050600061050c846001600160a01b03166359d1d43c876040518263ffffffff1660e01b81526004016104c09181526040602082018190526006908201526530bb30ba30b960d11b606082015260800190565b600060405180830381865afa1580156104dd573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105059190810190612084565b8a88610bcd565b90506000806105ed6007805480602002602001604051908101604052809291908181526020016000905b828210156105e257838290600052602060002001805461055590611ebb565b80601f016020809104026020016040519081016040528092919081815260200182805461058190611ebb565b80156105ce5780601f106105a3576101008083540402835291602001916105ce565b820191906000526020600020905b8154815290600101906020018083116105b157829003601f168201915b505050505081526020019060010190610536565b505050508888610c18565b600154604051639d6abe4f60e01b81526001600160a01b038d811660048301529395509193506000921690639d6abe4f90602401602060405180830381865afa15801561063e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610662919061201a565b60015460405163c7b5784160e01b81526001600160a01b038d811660048301529293506000929091169063c7b5784190602401602060405180830381865afa1580156106b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d69190612131565b905060006106e48585610dcb565b90506107d78888888461075d6040518060400160405280600981526020016834b9a337bab73232b960b91b8152508861073a576040518060400160405280600581526020016466616c736560d81b815250610e86565b604051806040016040528060048152602001637472756560e01b8152505b610e86565b610791604051806040016040528060048152602001636c696e6b60e01b8152506107588b6001600160a01b03166014610a2a565b6040516020016107a393929190612153565b60408051601f19818403018152908290526107c3949392916020016121a3565b604051602081830303815290604052610eb2565b6040516020016107e79190612294565b6040516020818303038152906040529c50505050505050505050505050919050565b600554604051632ffef98760e21b81526001600160a01b03838116600483015260609260009283928392169063bffbe61c90602401602060405180830381865afa15801561085b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087f91906122d9565b60065460405163691f343160e01b8152600481018390529192506000916001600160a01b039091169063691f343190602401600060405180830381865afa1580156108ce573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108f69190810190612084565b9050600061090382611017565b60045493999098506001600160a01b03909316965091945050505050565b6060816000036109485750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610972578061095c81612308565b915061096b9050600a83612337565b915061094c565b60008167ffffffffffffffff81111561098d5761098d611ea5565b6040519080825280601f01601f1916602001820160405280156109b7576020820181803683370190505b5090505b8415610a22576109cc60018361234b565b91506109d9600a86612362565b6109e4906030612376565b60f81b8183815181106109f9576109f9612004565b60200101906001600160f81b031916908160001a905350610a1b600a86612337565b94506109bb565b949350505050565b60606000610a3983600261238e565b610a44906002612376565b67ffffffffffffffff811115610a5c57610a5c611ea5565b6040519080825280601f01601f191660200182016040528015610a86576020820181803683370190505b509050600360fc1b81600081518110610aa157610aa1612004565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110610ad057610ad0612004565b60200101906001600160f81b031916908160001a9053506000610af484600261238e565b610aff906001612376565b90505b6001811115610b77576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110610b3357610b33612004565b1a60f81b828281518110610b4957610b49612004565b60200101906001600160f81b031916908160001a90535060049490941c93610b70816123ad565b9050610b02565b508315610bc65760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161016e565b9392505050565b60608351600003610c1057610bea610be5848461120c565b610eb2565b604051602001610bfa91906123c4565b6040516020818303038152906040529050610bc6565b509192915050565b6060806000855167ffffffffffffffff811115610c3757610c37611ea5565b604051908082528060200260200182016040528015610c6a57816020015b6060815260200190600190039081610c555790505b5090506000865167ffffffffffffffff811115610c8957610c89611ea5565b604051908082528060200260200182016040528015610cbc57816020015b6060815260200190600190039081610ca75790505b50905060005b8751811015610dbe57878181518110610cdd57610cdd612004565b6020026020010151838281518110610cf757610cf7612004565b6020026020010181905250856001600160a01b03166359d1d43c888a8481518110610d2457610d24612004565b60200260200101516040518363ffffffff1660e01b8152600401610d49929190612409565b600060405180830381865afa158015610d66573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d8e9190810190612084565b828281518110610da057610da0612004565b60200260200101819052508080610db690612308565b915050610cc2565b5090969095509350505050565b60408051602081019091526000808252606091905b8451811015610e7e576000848281518110610dfd57610dfd612004565b6020026020010151511115610e6c5781610e49868381518110610e2257610e22612004565b6020026020010151868481518110610e3c57610e3c612004565b6020026020010151610e86565b604051602001610e5a929190612422565b60405160208183030381529060405291505b80610e7681612308565b915050610de0565b509392505050565b60608282604051602001610e9b92919061245d565b604051602081830303815290604052905092915050565b60608151600003610ed157505060408051602081019091526000815290565b60006040518060600160405280604081526020016127c16040913990506000600384516002610f009190612376565b610f0a9190612337565b610f1590600461238e565b90506000610f24826020612376565b67ffffffffffffffff811115610f3c57610f3c611ea5565b6040519080825280601f01601f191660200182016040528015610f66576020820181803683370190505b509050818152600183018586518101602084015b81831015610fd2576003830192508251603f8160121c168501518253600182019150603f81600c1c168501518253600182019150603f8160061c168501518253600182019150603f8116850151825350600101610f7a565b600389510660018114610fec5760028114610ffd57611009565b613d3d60f01b600119830152611009565b603d60f81b6000198301525b509398975050505050505050565b80516060906000908190849061102e816002612376565b67ffffffffffffffff81111561104657611046611ea5565b6040519080825280601f01601f191660200182016040528015611070576020820181803683370190505b509450600093508084036110b557600060f81b8560008151811061109657611096612004565b60200101906001600160f81b031916908160001a905350505050915091565b60001981015b8281815181106110cd576110cd612004565b01602001516001600160f81b031916601760f91b0361115b578360f81b8682600101815181106110ff576110ff612004565b60200101906001600160f81b031916908160001a90535084611128846001840160ff88166117b4565b604080516020810193909352820152606001604051602081830303815290604052805190602001209450600093506111ab565b60018401935082818151811061117357611173612004565b602001015160f81c60f81b86826001018151811061119357611193612004565b60200101906001600160f81b031916908160001a9053505b80156111ba57600019016110bb565b50836111cb83600060ff87166117b4565b6040805160208101939093528201526060016040516020818303038152906040528051906020012093508260f81b8560008151811061109657611096612004565b606060006112396040518060400160405280600881526020016718da185c98dbd85b60c21b8152506117d8565b9050611243611801565b61124b6118cb565b6113a561127460405180604001604052806004815260200163199a5b1b60e21b81525085611ba7565b6112b0604051806040016040528060018152602001600f60fb1b815250604051806040016040528060018152602001600360fc1b815250611ba7565b6112ec604051806040016040528060018152602001607960f81b815250604051806040016040528060018152602001600360fc1b815250611ba7565b61132f604051806040016040528060058152602001640eed2c8e8d60db1b815250604051806040016040528060048152602001633130302560e01b815250611ba7565b611373604051806040016040528060068152602001651a195a59da1d60d21b815250604051806040016040528060048152602001633130302560e01b815250611ba7565b6040516020016113879594939291906124e0565b60408051601f19818403018152602083019091526000825290611bbc565b61159b6113e6604051806040016040528060018152602001600f60fb1b8152506040518060400160405280600381526020016235302560e81b815250611ba7565b611424604051806040016040528060018152602001607960f81b8152506040518060400160405280600381526020016235302560e81b815250611ba7565b61147560405180604001604052806011815260200170646f6d696e616e742d626173656c696e6560781b815250604051806040016040528060068152602001656d6964646c6560d01b815250611ba7565b6114c06040518060400160405280600b81526020016a3a32bc3a16b0b731b437b960a91b815250604051806040016040528060068152602001656d6964646c6560d01b815250611ba7565b61150760405180604001604052806009815260200168666f6e742d73697a6560b81b8152506040518060400160405280600481526020016306870e0f60e31b815250611ba7565b61154a60405180604001604052806004815260200163199a5b1b60e21b81525060405180604001604052806005815260200164776869746560d81b815250611ba7565b60405160200161155f9695949392919061254b565b60405160208183030381529060405261157789610921565b60405160200161158791906125ca565b604051602081830303815290604052611be5565b61176a6115dc604051806040016040528060018152602001600f60fb1b8152506040518060400160405280600381526020016235302560e81b815250611ba7565b61161a604051806040016040528060018152602001607960f81b8152506040518060400160405280600381526020016236302560e81b815250611ba7565b61166b60405180604001604052806011815260200170646f6d696e616e742d626173656c696e6560781b815250604051806040016040528060068152602001656d6964646c6560d01b815250611ba7565b6116b66040518060400160405280600b81526020016a3a32bc3a16b0b731b437b960a91b815250604051806040016040528060068152602001656d6964646c6560d01b815250611ba7565b6116fd60405180604001604052806009815260200168666f6e742d73697a6560b81b8152506040518060400160405280600481526020016306464e0f60e31b815250611ba7565b61174060405180604001604052806004815260200163199a5b1b60e21b81525060405180604001604052806005815260200164776869746560d81b815250611ba7565b6040516020016117559695949392919061254b565b60405160208183030381529060405288611be5565b6040805180820190915260068152651e17b9bb339f60d11b602082015260405160200161179c9695949392919061254b565b60405160208183030381529060405291505092915050565b82516000906117c38385612376565b11156117ce57600080fd5b5091016020012090565b6060816040516020016117eb91906125f7565b6040516020818303038152906040529050919050565b60606040516020016118b7907f3c7376672077696474683d2234303022206865696768743d223430302220737481527f796c653d226261636b67726f756e643a2335343135363322200000000000000060208201527503b34b2bba137bc1e91181018101a1818101a181811160551b60398201527f786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323030302f7376604f8201526203391160ed1b606f820152601f60f91b607282015260730190565b604051602081830303815290604052905090565b6060611ba2611b7e611917604051806040016040528060028152602001611a5960f21b8152506040518060400160405280600881526020016718da185c98dbd85b60c21b815250611ba7565b61196d604051806040016040528060118152602001706772616469656e745472616e73666f726d60781b8152506040518060400160405280600b81526020016a726f74617465283134302960a81b815250611ba7565b60405160200161197e92919061262f565b604051602081830303815290604052611aaa6119d2604051806040016040528060068152602001651bd9999cd95d60d21b81525060405180604001604052806002815260200161302560f01b815250611ba7565b604080518082018252600a81526939ba37b816b1b7b637b960b11b60208201526002549151630cde589160e41b8152611a85926001600160a01b03169063cde5891090611a3b906004016020808252600590820152644461726b3160d81b604082015260600190565b600060405180830381865afa158015611a58573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611a809190810190612084565b611ba7565b604051602001611a9692919061262f565b604051602081830303815290604052611c0e565b611b59611af0604051806040016040528060068152602001651bd9999cd95d60d21b8152506040518060400160405280600381526020016237302560e81b815250611ba7565b604080518082018252600a81526939ba37b816b1b7b637b960b11b60208201526002549151630cde589160e41b8152611a85926001600160a01b03169063cde5891090611a3b906004016020808252600590820152642230b9359960d91b604082015260600190565b604051602001611b6a92919061262f565b604051602081830303815290604052611c36565b604051602001611b8e919061265e565b604051602081830303815290604052611c69565b905090565b60608282604051602001610e9b92919061267a565b6060610bc6604051806040016040528060048152602001631c9958dd60e21b8152508484611c9d565b6060610bc6604051806040016040528060048152602001631d195e1d60e21b8152508484611c9d565b606061024660405180604001604052806004815260200163073746f760e41b81525083611cce565b6060610bc66040518060400160405280600e81526020016d1b1a5b99585c91dc98591a595b9d60921b8152508484611c9d565b6060610246604051806040016040528060048152602001636465667360e01b81525060405180602001604052806000815250845b606083838386604051602001611cb694939291906126cf565b60405160208183030381529060405290509392505050565b60608282604051602001610e9b929190612768565b6001600160a01b038116811461034057600080fd5b600060208284031215611d0a57600080fd5b8135610bc681611ce3565b60008083601f840112611d2757600080fd5b50813567ffffffffffffffff811115611d3f57600080fd5b602083019150836020828501011115611d5757600080fd5b9250929050565b60008060208385031215611d7157600080fd5b823567ffffffffffffffff811115611d8857600080fd5b611d9485828601611d15565b90969095509350505050565b600060208284031215611db257600080fd5b5035919050565b60005b83811015611dd4578181015183820152602001611dbc565b838111156102a25750506000910152565b60008151808452611dfd816020860160208601611db9565b601f01601f19169290920160200192915050565b602081526000610bc66020830184611de5565b600080600060408486031215611e3957600080fd5b83359250602084013567ffffffffffffffff811115611e5757600080fd5b611e6386828701611d15565b9497909650939450505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680611ecf57607f821691505b602082108103611eef57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561020057600081815260208120601f850160051c81016020861015611f1c5750805b601f850160051c820191505b81811015611f3b57828155600101611f28565b505050505050565b67ffffffffffffffff831115611f5b57611f5b611ea5565b611f6f83611f698354611ebb565b83611ef5565b6000601f841160018114611fa35760008515611f8b5750838201355b600019600387901b1c1916600186901b178355611ffd565b600083815260209020601f19861690835b82811015611fd45786850135825560209485019460019092019101611fb4565b5086821015611ff15760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561202c57600080fd5b8151610bc681611ce3565b60008151612049818560208601611db9565b9290920192915050565b68436974697a656e202360b81b815260008251612077816009850160208701611db9565b9190910160090192915050565b60006020828403121561209657600080fd5b815167ffffffffffffffff808211156120ae57600080fd5b818401915084601f8301126120c257600080fd5b8151818111156120d4576120d4611ea5565b604051601f8201601f19908116603f011681019083821181831017156120fc576120fc611ea5565b8160405282815287602084870101111561211557600080fd5b612126836020830160208801611db9565b979650505050505050565b60006020828403121561214357600080fd5b81518015158114610bc657600080fd5b60008451612165818460208901611db9565b845190830190612179818360208901611db9565b600b60fa1b91019081528351612196816001840160208801611db9565b0160010195945050505050565b673d913730b6b2911d60c11b8152601160f91b600882015284516000906121d1816009850160208a01611db9565b61088b60f21b6009918401918201526d113232b9b1b934b83a34b7b7111d60911b600b82015261220760198201601160f91b9052565b612214601a820187612037565b61088b60f21b81529050671134b6b0b3b2911d60c11b6002820152601160f91b600a820152612246600b820186612037565b61088b60f21b815290506e2261747472696275746573223a205b60881b60028201526122756011820185612037565b605d60f81b8152607d60f81b6001820152600201979650505050505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c0000008152600082516122cc81601d850160208701611db9565b91909101601d0192915050565b6000602082840312156122eb57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60006001820161231a5761231a6122f2565b5060010190565b634e487b7160e01b600052601260045260246000fd5b60008261234657612346612321565b500490565b60008282101561235d5761235d6122f2565b500390565b60008261237157612371612321565b500690565b60008219821115612389576123896122f2565b500190565b60008160001904831182151516156123a8576123a86122f2565b500290565b6000816123bc576123bc6122f2565b506000190190565b7f646174613a696d6167652f7376672b786d6c3b6261736536342c0000000000008152600082516123fc81601a850160208701611db9565b91909101601a0192915050565b828152604060208201526000610a226040830184611de5565b60008351612434818460208801611db9565b835190830190612448818360208801611db9565b600b60fa1b9101908152600101949350505050565b6e3d913a3930b4ba2fba3cb832911d1160891b8152825160009061248881600f850160208801611db9565b61088b60f21b600f9184019182015267113b30b63ab2911d60c11b6011820152601160f91b601982015283516124c581601a840160208801611db9565b61227d60f01b601a9290910191820152601c01949350505050565b600086516124f2818460208b01611db9565b865190830190612506818360208b01611db9565b8651910190612519818360208a01611db9565b855191019061252c818360208901611db9565b845191019061253f818360208801611db9565b01979650505050505050565b60008751602061255e8285838d01611db9565b8851918401916125718184848d01611db9565b88519201916125838184848c01611db9565b87519201916125958184848b01611db9565b86519201916125a78184848a01611db9565b85519201916125b98184848901611db9565b919091019998505050505050505050565b64434956202360d81b8152600082516125ea816005850160208701611db9565b9190910160050192915050565b6475726c282360d81b815260008251612617816005850160208701611db9565b602960f81b6005939091019283015250600601919050565b60008351612641818460208801611db9565b835190830190612655818360208801611db9565b01949350505050565b60008251612670818460208701611db9565b9190910192915050565b6000835161268c818460208801611db9565b603d60f81b908301908152601160f91b600182015283516126b4816002840160208801611db9565b61011160f51b60029290910191820152600401949350505050565b600f60fa1b8152600085516126eb816001850160208a01611db9565b600160fd1b600191840191820152855161270c816002840160208a01611db9565b808201915050601f60f91b8060028301528551612730816003850160208a01611db9565b613c2f60f01b600393909101928301528451612753816005850160208901611db9565b60059201918201526006019695505050505050565b600f60fa1b815260008351612784816001850160208801611db9565b600160fd1b60019184019182015283516127a5816002840160208801611db9565b61179f60f11b6002929091019182015260040194935050505056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220fd669dd3e50b5246c189d84e0067f25e71b23c33d115978b3a386a0abed8792f64736f6c634300080f0033a66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c688",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 400,
        "contract": "contracts/CitizenAlphaMetadata.sol:CitizenAlphaMetadata",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3364,
        "contract": "contracts/CitizenAlphaMetadata.sol:CitizenAlphaMetadata",
        "label": "token",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(CitizenAlpha)3319"
      },
      {
        "astId": 3367,
        "contract": "contracts/CitizenAlphaMetadata.sol:CitizenAlphaMetadata",
        "label": "svgColor",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(SVGColor)5876"
      },
      {
        "astId": 3370,
        "contract": "contracts/CitizenAlphaMetadata.sol:CitizenAlphaMetadata",
        "label": "ens",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 3373,
        "contract": "contracts/CitizenAlphaMetadata.sol:CitizenAlphaMetadata",
        "label": "resolver",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 3376,
        "contract": "contracts/CitizenAlphaMetadata.sol:CitizenAlphaMetadata",
        "label": "reverseRegistrar",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 3379,
        "contract": "contracts/CitizenAlphaMetadata.sol:CitizenAlphaMetadata",
        "label": "defaultReverseResolver",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 3382,
        "contract": "contracts/CitizenAlphaMetadata.sol:CitizenAlphaMetadata",
        "label": "traitKeys",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_string_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_contract(CitizenAlpha)3319": {
        "encoding": "inplace",
        "label": "contract CitizenAlpha",
        "numberOfBytes": "20"
      },
      "t_contract(SVGColor)5876": {
        "encoding": "inplace",
        "label": "contract SVGColor",
        "numberOfBytes": "20"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      }
    }
  }
}