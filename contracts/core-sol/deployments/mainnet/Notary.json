{
  "address": "0x0aFC9809385039f9338C481C23Ff60F680c43251",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_citizenAlpha_",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_notaries",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCitizenAlpha",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "citizen",
          "type": "address"
        }
      ],
      "name": "isNotary",
      "outputs": [
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "issue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "to",
          "type": "address[]"
        }
      ],
      "name": "issueBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        }
      ],
      "name": "revoke",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "from",
          "type": "address[]"
        }
      ],
      "name": "revokeBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x48bd79bab67388b1e16201082f2a7736c300c51e301c080f3bac0017db2ebb7e",
  "receipt": {
    "to": null,
    "from": "0xfc4099eF10CC6255E8662eF85CF82067A7f2e3fd",
    "contractAddress": "0x0aFC9809385039f9338C481C23Ff60F680c43251",
    "transactionIndex": 137,
    "gasUsed": "804644",
    "logsBloom": "0x
    "blockHash": "0x7d030582b58108dcf3343bee9255d3999a510a856be4ff8758b3d864ff31bbea",
    "transactionHash": "0x48bd79bab67388b1e16201082f2a7736c300c51e301c080f3bac0017db2ebb7e",
    "logs": [
      {
        "transactionIndex": 137,
        "blockNumber": 15179820,
        "transactionHash": "0x48bd79bab67388b1e16201082f2a7736c300c51e301c080f3bac0017db2ebb7e",
        "address": "0x0aFC9809385039f9338C481C23Ff60F680c43251",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x82dc1ec5ffcc1ce66f6c1c31b0ec106422173af966c099db66124841894b3c8a",
          "0x0000000000000000000000000afc9809385039f9338c481c23ff60f680c43251",
          "0x000000000000000000000000fc4099ef10cc6255e8662ef85cf82067a7f2e3fd"
        ],
        "data": "0x",
        "logIndex": 261,
        "blockHash": "0x7d030582b58108dcf3343bee9255d3999a510a856be4ff8758b3d864ff31bbea"
      },
      {
        "transactionIndex": 137,
        "blockNumber": 15179820,
        "transactionHash": "0x48bd79bab67388b1e16201082f2a7736c300c51e301c080f3bac0017db2ebb7e",
        "address": "0x0aFC9809385039f9338C481C23Ff60F680c43251",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000fc4099ef10cc6255e8662ef85cf82067a7f2e3fd",
          "0x000000000000000000000000fc4099ef10cc6255e8662ef85cf82067a7f2e3fd"
        ],
        "data": "0x",
        "logIndex": 262,
        "blockHash": "0x7d030582b58108dcf3343bee9255d3999a510a856be4ff8758b3d864ff31bbea"
      },
      {
        "transactionIndex": 137,
        "blockNumber": 15179820,
        "transactionHash": "0x48bd79bab67388b1e16201082f2a7736c300c51e301c080f3bac0017db2ebb7e",
        "address": "0x0aFC9809385039f9338C481C23Ff60F680c43251",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x82dc1ec5ffcc1ce66f6c1c31b0ec106422173af966c099db66124841894b3c8a",
          "0x000000000000000000000000fc4099ef10cc6255e8662ef85cf82067a7f2e3fd",
          "0x000000000000000000000000fc4099ef10cc6255e8662ef85cf82067a7f2e3fd"
        ],
        "data": "0x",
        "logIndex": 263,
        "blockHash": "0x7d030582b58108dcf3343bee9255d3999a510a856be4ff8758b3d864ff31bbea"
      },
      {
        "transactionIndex": 137,
        "blockNumber": 15179820,
        "transactionHash": "0x48bd79bab67388b1e16201082f2a7736c300c51e301c080f3bac0017db2ebb7e",
        "address": "0x0aFC9809385039f9338C481C23Ff60F680c43251",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0x82dc1ec5ffcc1ce66f6c1c31b0ec106422173af966c099db66124841894b3c8a",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x",
        "logIndex": 264,
        "blockHash": "0x7d030582b58108dcf3343bee9255d3999a510a856be4ff8758b3d864ff31bbea"
      }
    ],
    "blockNumber": 15179820,
    "cumulativeGasUsed": "12837497",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x825E0e24de8559831E2BDEe296397bA38967bA07",
    [
      "0xfc4099eF10CC6255E8662eF85CF82067A7f2e3fd"
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "4db2e9509a1ac7feb2852f569dc9d0be",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_citizenAlpha_\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_notaries\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCitizenAlpha\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"citizen\",\"type\":\"address\"}],\"name\":\"isNotary\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"issue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"}],\"name\":\"issueBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"revoke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"from\",\"type\":\"address[]\"}],\"name\":\"revokeBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Kames Geraghty\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Set CitizenAlpha instance and set start Notaries.\",\"params\":{\"_citizenAlpha_\":\"CitizenAlpha instance\",\"_notaries\":\"Array of Notaries\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isNotary(address)\":{\"params\":{\"citizen\":\"address\"},\"returns\":{\"status\":\"bool\"}},\"issue(address)\":{\"params\":{\"to\":\"address\"}},\"issueBatch(address[])\":{\"params\":{\"to\":\"address\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revoke(address)\":{\"params\":{\"from\":\"address\"}},\"revokeBatch(address[])\":{\"params\":{\"from\":\"address\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"title\":\"Notary\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Notary Constructor\"},\"isNotary(address)\":{\"notice\":\"Check Notary status\"},\"issue(address)\":{\"notice\":\"Issue Citizenship\"},\"issueBatch(address[])\":{\"notice\":\"Batch issue Citizenships\"},\"revoke(address)\":{\"notice\":\"Revoke Citizenship\"},\"revokeBatch(address[])\":{\"notice\":\"Batch Revoke Citizenships\"}},\"notice\":\"Notary is a minimal AccessControl layer for Citizen issuance.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Notary/Notary.sol\":\"Notary\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5b35d8e68aeaccc685239bd9dd79b9ba01a0357930f8a3307ab85511733d9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Notary/Notary.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport { AccessControl } from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport { ICitizenAlpha } from \\\"../interfaces/ICitizenAlpha.sol\\\";\\n\\n/**\\n * @title Notary\\n * @author Kames Geraghty\\n * @notice Notary is a minimal AccessControl layer for Citizen issuance.\\n */\\ncontract Notary is AccessControl {\\n  /// @notice CitizenAlpha instance\\n  address private _citizenAlpha;\\n\\n  /// @notice Notary Role\\n  bytes32 private constant NOTARY = keccak256(\\\"NOTARY\\\");\\n\\n  /**\\n   * @notice Notary Constructor\\n   * @dev Set CitizenAlpha instance and set start Notaries.\\n   * @param _citizenAlpha_ CitizenAlpha instance\\n   * @param _notaries Array of Notaries\\n   */\\n  constructor(address _citizenAlpha_, address[] memory _notaries) {\\n    _citizenAlpha = _citizenAlpha_;\\n    _setupRole(NOTARY, address(this));\\n    for (uint256 i = 0; i < _notaries.length; i++) {\\n      _setupRole(DEFAULT_ADMIN_ROLE, _notaries[i]);\\n      _setupRole(NOTARY, _notaries[i]);\\n    }\\n    _setRoleAdmin(NOTARY, DEFAULT_ADMIN_ROLE);\\n  }\\n\\n  /* ===================================================================================== */\\n  /* External Functions                                                                    */\\n  /* ===================================================================================== */\\n\\n  function getCitizenAlpha() external view returns (address) {\\n    return _citizenAlpha;\\n  }\\n\\n  /**\\n   * @notice Check Notary status\\n   * @param citizen address\\n   * @return status bool\\n   */\\n  function isNotary(address citizen) external view returns (bool status) {\\n    return hasRole(NOTARY, citizen);\\n  }\\n\\n  /**\\n   * @notice Issue Citizenship\\n   * @param to address\\n   */\\n  function issue(address to) external {\\n    require(hasRole(NOTARY, _msgSender()), \\\"Notary:unauthorized-access\\\");\\n    _issue(to);\\n  }\\n\\n  /**\\n   * @notice Batch issue Citizenships\\n   * @param to address\\n   */\\n  function issueBatch(address[] calldata to) external {\\n    require(hasRole(NOTARY, _msgSender()), \\\"Notary:unauthorized-access\\\");\\n    for (uint256 i = 0; i < to.length; i++) {\\n      _issue(to[i]);\\n    }\\n  }\\n\\n  /**\\n   * @notice Revoke Citizenship\\n   * @param from address\\n   */\\n  function revoke(address from) external {\\n    require(hasRole(NOTARY, _msgSender()), \\\"Notary:unauthorized-access\\\");\\n    _revoke(from);\\n  }\\n\\n  /**\\n   * @notice Batch Revoke Citizenships\\n   * @param from address\\n   */\\n  function revokeBatch(address[] calldata from) external {\\n    require(hasRole(NOTARY, _msgSender()), \\\"Notary:unauthorized-access\\\");\\n    for (uint256 i = 0; i < from.length; i++) {\\n      _revoke(from[i]);\\n    }\\n  }\\n\\n  /* ===================================================================================== */\\n  /* Internal Functions                                                                    */\\n  /* ===================================================================================== */\\n\\n  function _issue(address _to) internal {\\n    ICitizenAlpha(_citizenAlpha).issue(_to);\\n  }\\n\\n  function _revoke(address _from) internal {\\n    ICitizenAlpha(_citizenAlpha).revoke(_from);\\n  }\\n}\\n\",\"keccak256\":\"0x8f40141f092b878f91af0def7a13eda3f926b16c14909dbfc2d99f3939b1abb1\",\"license\":\"MIT\"},\"contracts/interfaces/ICitizenAlpha.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\ninterface ICitizenAlpha {\\n  function ownerOf(uint256 _id) external view returns (address owner);\\n\\n  function issue(address _citizen) external;\\n\\n  function revoke(address _citizen) external;\\n\\n  function getId(address citizen) external view returns (uint256);\\n\\n  function getLink(address citizen) external view returns (address issuer);\\n\\n  function hasRole(bytes32 role, address citizen) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xafe5d8783f057ce08af9dc8c19b80a874d00d16514d7cf5c9bb12c9b4b0d5b78\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162000f1238038062000f12833981016040819052620000349162000239565b600180546001600160a01b0319166001600160a01b0384161790556200006a60008051602062000ef2833981519152306200010b565b60005b8151811015620000e657620000a86000801b83838151811062000094576200009462000322565b60200260200101516200010b60201b60201c565b620000d160008051602062000ef283398151915283838151811062000094576200009462000322565b80620000dd8162000338565b9150506200006d565b506200010360008051602062000ef283398151915260006200011b565b505062000360565b62000117828262000166565b5050565b600082815260208190526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1662000117576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620001c23390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b80516001600160a01b03811681146200021e57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156200024d57600080fd5b620002588362000206565b602084810151919350906001600160401b03808211156200027857600080fd5b818601915086601f8301126200028d57600080fd5b815181811115620002a257620002a262000223565b8060051b604051601f19603f83011681018181108582111715620002ca57620002ca62000223565b604052918252848201925083810185019189831115620002e957600080fd5b938501935b828510156200031257620003028562000206565b84529385019392850192620002ee565b8096505050505050509250929050565b634e487b7160e01b600052603260045260246000fd5b6000600182016200035957634e487b7160e01b600052601160045260246000fd5b5060010190565b610b8280620003706000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c806374a8f1031161008c578063d389c6a211610066578063d389c6a2146101a9578063d547741f146101bc578063e6b92bbc146101cf578063f13eed97146101ea57600080fd5b806374a8f1031461017b57806391d148541461018e578063a217fddf146101a157600080fd5b806301ffc9a7146100d4578063055e3e5e146100fc578063248a9ca3146101115780632f2ff15d1461014257806336568abe1461015557806371e928af14610168575b600080fd5b6100e76100e2366004610859565b6101fd565b60405190151581526020015b60405180910390f35b61010f61010a366004610883565b610234565b005b61013461011f3660046108f8565b60009081526020819052604090206001015490565b6040519081526020016100f3565b61010f61015036600461092d565b6102c2565b61010f61016336600461092d565b6102e7565b61010f610176366004610959565b610365565b61010f610189366004610959565b6103a5565b6100e761019c36600461092d565b6103e2565b610134600081565b61010f6101b7366004610883565b61040b565b61010f6101ca36600461092d565b61048b565b6001546040516001600160a01b0390911681526020016100f3565b6100e76101f8366004610959565b6104b0565b60006001600160e01b03198216637965db0b60e01b148061022e57506301ffc9a760e01b6001600160e01b03198316145b92915050565b61024c600080516020610b2d833981519152336103e2565b6102715760405162461bcd60e51b815260040161026890610974565b60405180910390fd5b60005b818110156102bd576102ab838383818110610291576102916109ab565b90506020020160208101906102a69190610959565b6104ca565b806102b5816109d7565b915050610274565b505050565b6000828152602081905260409020600101546102dd8161052d565b6102bd8383610537565b6001600160a01b03811633146103575760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610268565b61036182826105bb565b5050565b61037d600080516020610b2d833981519152336103e2565b6103995760405162461bcd60e51b815260040161026890610974565b6103a281610620565b50565b6103bd600080516020610b2d833981519152336103e2565b6103d95760405162461bcd60e51b815260040161026890610974565b6103a2816104ca565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b610423600080516020610b2d833981519152336103e2565b61043f5760405162461bcd60e51b815260040161026890610974565b60005b818110156102bd5761047983838381811061045f5761045f6109ab565b90506020020160208101906104749190610959565b610620565b80610483816109d7565b915050610442565b6000828152602081905260409020600101546104a68161052d565b6102bd83836105bb565b600061022e600080516020610b2d833981519152836103e2565b6001546040516374a8f10360e01b81526001600160a01b038381166004830152909116906374a8f103906024015b600060405180830381600087803b15801561051257600080fd5b505af1158015610526573d6000803e3d6000fd5b5050505050565b6103a28133610652565b61054182826103e2565b610361576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556105773390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6105c582826103e2565b15610361576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6001546040516371e928af60e01b81526001600160a01b038381166004830152909116906371e928af906024016104f8565b61065c82826103e2565b61036157610674816001600160a01b031660146106b6565b61067f8360206106b6565b604051602001610690929190610a20565b60408051601f198184030181529082905262461bcd60e51b825261026891600401610a95565b606060006106c5836002610ac8565b6106d0906002610ae7565b67ffffffffffffffff8111156106e8576106e8610aff565b6040519080825280601f01601f191660200182016040528015610712576020820181803683370190505b509050600360fc1b8160008151811061072d5761072d6109ab565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061075c5761075c6109ab565b60200101906001600160f81b031916908160001a9053506000610780846002610ac8565b61078b906001610ae7565b90505b6001811115610803576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106107bf576107bf6109ab565b1a60f81b8282815181106107d5576107d56109ab565b60200101906001600160f81b031916908160001a90535060049490941c936107fc81610b15565b905061078e565b5083156108525760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610268565b9392505050565b60006020828403121561086b57600080fd5b81356001600160e01b03198116811461085257600080fd5b6000806020838503121561089657600080fd5b823567ffffffffffffffff808211156108ae57600080fd5b818501915085601f8301126108c257600080fd5b8135818111156108d157600080fd5b8660208260051b85010111156108e657600080fd5b60209290920196919550909350505050565b60006020828403121561090a57600080fd5b5035919050565b80356001600160a01b038116811461092857600080fd5b919050565b6000806040838503121561094057600080fd5b8235915061095060208401610911565b90509250929050565b60006020828403121561096b57600080fd5b61085282610911565b6020808252601a908201527f4e6f746172793a756e617574686f72697a65642d616363657373000000000000604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016109e9576109e96109c1565b5060010190565b60005b83811015610a0b5781810151838201526020016109f3565b83811115610a1a576000848401525b50505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351610a588160178501602088016109f0565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351610a898160288401602088016109f0565b01602801949350505050565b6020815260008251806020840152610ab48160408501602087016109f0565b601f01601f19169190910160400192915050565b6000816000190483118215151615610ae257610ae26109c1565b500290565b60008219821115610afa57610afa6109c1565b500190565b634e487b7160e01b600052604160045260246000fd5b600081610b2457610b246109c1565b50600019019056fe82dc1ec5ffcc1ce66f6c1c31b0ec106422173af966c099db66124841894b3c8aa2646970667358221220ebd06f8f469275ff7a0f18f4539e7248c5cf1360e810d53de79e1f44021f199164736f6c634300080f003382dc1ec5ffcc1ce66f6c1c31b0ec106422173af966c099db66124841894b3c8a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c806374a8f1031161008c578063d389c6a211610066578063d389c6a2146101a9578063d547741f146101bc578063e6b92bbc146101cf578063f13eed97146101ea57600080fd5b806374a8f1031461017b57806391d148541461018e578063a217fddf146101a157600080fd5b806301ffc9a7146100d4578063055e3e5e146100fc578063248a9ca3146101115780632f2ff15d1461014257806336568abe1461015557806371e928af14610168575b600080fd5b6100e76100e2366004610859565b6101fd565b60405190151581526020015b60405180910390f35b61010f61010a366004610883565b610234565b005b61013461011f3660046108f8565b60009081526020819052604090206001015490565b6040519081526020016100f3565b61010f61015036600461092d565b6102c2565b61010f61016336600461092d565b6102e7565b61010f610176366004610959565b610365565b61010f610189366004610959565b6103a5565b6100e761019c36600461092d565b6103e2565b610134600081565b61010f6101b7366004610883565b61040b565b61010f6101ca36600461092d565b61048b565b6001546040516001600160a01b0390911681526020016100f3565b6100e76101f8366004610959565b6104b0565b60006001600160e01b03198216637965db0b60e01b148061022e57506301ffc9a760e01b6001600160e01b03198316145b92915050565b61024c600080516020610b2d833981519152336103e2565b6102715760405162461bcd60e51b815260040161026890610974565b60405180910390fd5b60005b818110156102bd576102ab838383818110610291576102916109ab565b90506020020160208101906102a69190610959565b6104ca565b806102b5816109d7565b915050610274565b505050565b6000828152602081905260409020600101546102dd8161052d565b6102bd8383610537565b6001600160a01b03811633146103575760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610268565b61036182826105bb565b5050565b61037d600080516020610b2d833981519152336103e2565b6103995760405162461bcd60e51b815260040161026890610974565b6103a281610620565b50565b6103bd600080516020610b2d833981519152336103e2565b6103d95760405162461bcd60e51b815260040161026890610974565b6103a2816104ca565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b610423600080516020610b2d833981519152336103e2565b61043f5760405162461bcd60e51b815260040161026890610974565b60005b818110156102bd5761047983838381811061045f5761045f6109ab565b90506020020160208101906104749190610959565b610620565b80610483816109d7565b915050610442565b6000828152602081905260409020600101546104a68161052d565b6102bd83836105bb565b600061022e600080516020610b2d833981519152836103e2565b6001546040516374a8f10360e01b81526001600160a01b038381166004830152909116906374a8f103906024015b600060405180830381600087803b15801561051257600080fd5b505af1158015610526573d6000803e3d6000fd5b5050505050565b6103a28133610652565b61054182826103e2565b610361576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556105773390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6105c582826103e2565b15610361576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6001546040516371e928af60e01b81526001600160a01b038381166004830152909116906371e928af906024016104f8565b61065c82826103e2565b61036157610674816001600160a01b031660146106b6565b61067f8360206106b6565b604051602001610690929190610a20565b60408051601f198184030181529082905262461bcd60e51b825261026891600401610a95565b606060006106c5836002610ac8565b6106d0906002610ae7565b67ffffffffffffffff8111156106e8576106e8610aff565b6040519080825280601f01601f191660200182016040528015610712576020820181803683370190505b509050600360fc1b8160008151811061072d5761072d6109ab565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061075c5761075c6109ab565b60200101906001600160f81b031916908160001a9053506000610780846002610ac8565b61078b906001610ae7565b90505b6001811115610803576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106107bf576107bf6109ab565b1a60f81b8282815181106107d5576107d56109ab565b60200101906001600160f81b031916908160001a90535060049490941c936107fc81610b15565b905061078e565b5083156108525760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610268565b9392505050565b60006020828403121561086b57600080fd5b81356001600160e01b03198116811461085257600080fd5b6000806020838503121561089657600080fd5b823567ffffffffffffffff808211156108ae57600080fd5b818501915085601f8301126108c257600080fd5b8135818111156108d157600080fd5b8660208260051b85010111156108e657600080fd5b60209290920196919550909350505050565b60006020828403121561090a57600080fd5b5035919050565b80356001600160a01b038116811461092857600080fd5b919050565b6000806040838503121561094057600080fd5b8235915061095060208401610911565b90509250929050565b60006020828403121561096b57600080fd5b61085282610911565b6020808252601a908201527f4e6f746172793a756e617574686f72697a65642d616363657373000000000000604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016109e9576109e96109c1565b5060010190565b60005b83811015610a0b5781810151838201526020016109f3565b83811115610a1a576000848401525b50505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351610a588160178501602088016109f0565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351610a898160288401602088016109f0565b01602801949350505050565b6020815260008251806020840152610ab48160408501602087016109f0565b601f01601f19169190910160400192915050565b6000816000190483118215151615610ae257610ae26109c1565b500290565b60008219821115610afa57610afa6109c1565b500190565b634e487b7160e01b600052604160045260246000fd5b600081610b2457610b246109c1565b50600019019056fe82dc1ec5ffcc1ce66f6c1c31b0ec106422173af966c099db66124841894b3c8aa2646970667358221220ebd06f8f469275ff7a0f18f4539e7248c5cf1360e810d53de79e1f44021f199164736f6c634300080f0033",
  "devdoc": {
    "author": "Kames Geraghty",
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Set CitizenAlpha instance and set start Notaries.",
        "params": {
          "_citizenAlpha_": "CitizenAlpha instance",
          "_notaries": "Array of Notaries"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isNotary(address)": {
        "params": {
          "citizen": "address"
        },
        "returns": {
          "status": "bool"
        }
      },
      "issue(address)": {
        "params": {
          "to": "address"
        }
      },
      "issueBatch(address[])": {
        "params": {
          "to": "address"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revoke(address)": {
        "params": {
          "from": "address"
        }
      },
      "revokeBatch(address[])": {
        "params": {
          "from": "address"
        }
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "title": "Notary",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Notary Constructor"
      },
      "isNotary(address)": {
        "notice": "Check Notary status"
      },
      "issue(address)": {
        "notice": "Issue Citizenship"
      },
      "issueBatch(address[])": {
        "notice": "Batch issue Citizenships"
      },
      "revoke(address)": {
        "notice": "Revoke Citizenship"
      },
      "revokeBatch(address[])": {
        "notice": "Batch Revoke Citizenships"
      }
    },
    "notice": "Notary is a minimal AccessControl layer for Citizen issuance.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "contracts/Notary/Notary.sol:Notary",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 11346,
        "contract": "contracts/Notary/Notary.sol:Notary",
        "label": "_citizenAlpha",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/Notary/Notary.sol:Notary",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/Notary/Notary.sol:Notary",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      }
    }
  }
}