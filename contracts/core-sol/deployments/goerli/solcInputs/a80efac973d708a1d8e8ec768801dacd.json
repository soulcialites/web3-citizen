{
  "language": "Solidity",
  "sources": {
    "contracts/CitizenAlpha.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { ERC721 } from \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport { Metadata } from \"./Metadata.sol\";\nimport { Nation } from \"./Nation/Nation.sol\";\nimport { Notary } from \"./Notary/Notary.sol\";\n\n/**\n * @title CitizenAlpha\n * @author Kames Geraghty\n * @notice A Web3 of Trust experiment.\n */\ncontract CitizenAlpha is ERC721, Ownable {\n  /// @notice Total citizenships issued\n  uint256 private _idCounter;\n\n  /// @notice Metadata instance; External tokenURI call\n  address private _metadata;\n\n  /// @notice Nation instance; Global AccessControl\n  address private _nation;\n\n  /// @notice Notary instance; Citizenship Management\n  address private _notary;\n\n  /// @notice TrustResolver instance; Unique tokenURI\n  address private _resolver;\n\n  /// @notice Enable tokenURI split logic operator\n  bool private _tokenURISplit;\n\n  /// @notice Reverse lookup of a tokenId using the owner address\n  mapping(address => uint256) private _tokenIds;\n\n  /// @notice Lookup address of Citizenship trust link\n  mapping(address => address) private _links;\n\n  /**\n   * @notice Emit when Citizenship is issued.\n   * @param id Citizen ID\n   * @param citizen Address of new Citizen\n   * @param link Address of  Citizen issuing new Citizenship\n   */\n  event Issued(uint256 id, address indexed citizen, address indexed link);\n\n  /**\n   * @notice Emit when Citizenship is revoked.\n   * @param id Citizen ID\n   * @param citizen Address of new Citizen\n   * @param link Address of Founder revoking Citizenship\n   */\n  event Revoked(uint256 id, address indexed citizen, address indexed link);\n\n  /**\n   * @notice Emit when Metadata instnace is updated.\n   * @param metadata Address of new Metadata instance\n   */\n  event NewMetadata(address metadata);\n\n  /**\n   * @notice Emit when Nation instnace is updated.\n   * @param nation Address of new Nation instance\n   */\n  event NewNation(address nation);\n\n  /**\n   * @notice Emit when Notary instnace is updated.\n   * @param notary Address of new Notary instance\n   */\n  event NewNotary(address notary);\n\n  /**\n   * @notice Emit when Resolver instnace is updated.\n   * @param resolver Address of new Resolver instance\n   */\n  event NewResolver(address resolver);\n\n  /**\n   * @notice CitizenAlpha Construction\n   * @param metadata_ address - Metadata instance\n   * @param name_ string - Name of ERC721 token\n   * @param symbol_ string - Symbol of ERC721 token\n   */\n  constructor(\n    address metadata_,\n    string memory name_,\n    string memory symbol_\n  ) ERC721(name_, symbol_) {\n    _metadata = metadata_;\n  }\n\n  /* ===================================================================================== */\n  /* External Functions                                                                    */\n  /* ===================================================================================== */\n\n  /**\n   * @notice Get Metadata instance\n   * @return metadata Metadata\n   */\n  function getMetadata() external view returns (address metadata) {\n    return _metadata;\n  }\n\n  /**\n   * @notice Get Nation instance\n   * @return nation Nation\n   */\n  function getNation() external view returns (address nation) {\n    return _nation;\n  }\n\n  /**\n   * @notice Get Notary instance\n   * @return notary Notary\n   */\n  function getNotary() external view returns (address notary) {\n    return _notary;\n  }\n\n  /**\n   * @notice Get Resolver instance\n   * @return resolver Resolver\n   */\n  function getResolver() external view returns (address resolver) {\n    return _resolver;\n  }\n\n  /**\n   * @notice Read totalIssued (_idCounter)\n   * @return totalIssued uint256\n   */\n  function totalIssued() external view returns (uint256) {\n    return _idCounter;\n  }\n\n  /**\n   * @notice Check Citizenship ID\n   * @param citizen address\n   * @return id uint256\n   */\n  function getId(address citizen) external view returns (uint256) {\n    require(_isCitizen(citizen), \"CitizenAlpha:not-active-citizen\");\n    return _tokenIds[citizen];\n  }\n\n  /**\n   * @notice Lookup Citizenship link\n   * @param citizen address\n   * @return link address\n   */\n  function getLink(address citizen) external view returns (address link) {\n    return _links[citizen];\n  }\n\n  /**\n   * @notice Check Role status of Citizen via Nation\n   * @param citizen Address of Citizen\n   * @return status bool\n   */\n  function hasRole(bytes32 role, address citizen) external view returns (bool) {\n    return Nation(_nation).hasRole(role, citizen);\n  }\n\n  /**\n   * @notice Check Citizenship status\n   * @param citizen Address of potential Citizen\n   * @return status bool\n   */\n  function isCitizen(address citizen) external view returns (bool status) {\n    return balanceOf(citizen) == 1 ? true : false;\n  }\n\n  /**\n   * @notice Generate token URI\n   * @param tokenId uint256\n   * @return metadata string\n   */\n  function tokenURI(uint256 tokenId) public view override returns (string memory) {\n    Metadata metadata_ = Metadata(_metadata);\n    if (!_tokenURISplit) {\n      return metadata_.tokenURI(tokenId);\n    } else {\n      return\n        _resolver == _msgSender()\n          ? metadata_.tokenURIResolver(tokenId)\n          : metadata_.tokenURI(tokenId);\n    }\n  }\n\n  /**\n   * @notice Issue a new Citizenship\n   * @param to address\n   */\n  function issue(address to) external {\n    address _sender = _msgSender();\n    require(Notary(_notary).isNotary(_sender), \"CitizenAlpha:not-notary\");\n    require(!_isCitizen(to), \"CitizenAlpha:is-citizen\");\n    require(!_isPreviouslyIssued(to), \"CitizenAlpha:revoked-citizenship\");\n    _issue(to, _sender);\n  }\n\n  /**\n   * @notice Revoke an existing Citizenship\n   * @param from address\n   */\n  function revoke(address from) external {\n    address _sender = _msgSender();\n    require(Notary(_notary).isNotary(_sender), \"CitizenAlpha:not-notary\");\n    require(_isCitizen(from), \"CitizenAlpha:not-citizen\");\n    _revoke(from, _sender);\n  }\n\n  /**\n   * @notice Reset Citizenship status\n   * @param citizen address\n   */\n  function reset(address citizen) external {\n    require(Notary(_notary).isNotary(_msgSender()), \"CitizenAlpha:not-notary\");\n    require(!_isCitizen(citizen), \"CitizenAlpha:is-citizen\");\n    require(_isPreviouslyIssued(citizen), \"CitizenAlpha:never-citizen\");\n    _tokenIds[citizen] = 0;\n  }\n\n  /**\n   * @notice Set URI Splitter status\n   * @param status bool\n   */\n  function setURISplitter(bool status) external onlyOwner {\n    _tokenURISplit = status;\n  }\n\n  /**\n   * @notice Set Metadata instance\n   * @param metadata address\n   */\n  function setMetadata(address metadata) external onlyOwner {\n    _metadata = metadata;\n    emit NewMetadata(metadata);\n  }\n\n  /**\n   * @notice Set Nation instance\n   * @param nation address\n   */\n  function setNation(address nation) external onlyOwner {\n    _nation = nation;\n    emit NewNation(nation);\n  }\n\n  /**\n   * @notice Set Notary instance\n   * @param notary address\n   */\n  function setNotary(address notary) external onlyOwner {\n    _notary = notary;\n    emit NewNotary(notary);\n  }\n\n  /**\n   * @notice Set Resolver instance\n   * @param resolver address\n   */\n  function setResolver(address resolver) external onlyOwner {\n    _resolver = resolver;\n    emit NewResolver(resolver);\n  }\n\n  /**\n   * @notice Override transferFrom to make non-transferable\n   */\n  function transferFrom(\n    address,\n    address,\n    uint256\n  ) public virtual override {\n    revert(\"CitizenAlpha: Soulbound\");\n  }\n\n  function supportsInterface(bytes4 interfaceId)\n    public\n    view\n    virtual\n    override(ERC721)\n    returns (bool)\n  {\n    return super.supportsInterface(interfaceId);\n  }\n\n  /* ===================================================================================== */\n  /* Internal Functions                                                                    */\n  /* ===================================================================================== */\n\n  function _isCitizen(address citizen) internal view returns (bool) {\n    return balanceOf(citizen) == 1 ? true : false;\n  }\n\n  /**\n   * @dev First Founder can be issued<>revoked<>issued.\n   *      All other address can only be issued<>revoked.\n   *      Unless the account is reset.\n   */\n  function _isPreviouslyIssued(address citizen) internal view returns (bool) {\n    return _tokenIds[citizen] != 0 ? true : false;\n  }\n\n  function _issue(address to, address link) internal {\n    uint256 __idCounter = _idCounter++;\n    _links[to] = link;\n    _tokenIds[to] = __idCounter;\n    _mint(to, __idCounter);\n    emit Issued(__idCounter, to, link);\n  }\n\n  function _revoke(address from, address link) internal {\n    uint256 tokenId = _tokenIds[from];\n    _burn(tokenId);\n    emit Revoked(tokenId, from, link);\n  }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "contracts/Metadata.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.15;\n\nimport { Base64 } from \"base64-sol/base64.sol\";\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { Strings } from \"@openzeppelin/contracts/utils/Strings.sol\";\nimport { svg } from \"./libraries/SVG.sol\";\nimport { svgUtils } from \"./libraries/SVGUtils.sol\";\nimport { SVGColor } from \"./libraries/SVGColor.sol\";\nimport { ISource } from \"./interfaces/ISource.sol\";\nimport { ICitizenAlpha } from \"./interfaces/ICitizenAlpha.sol\";\nimport { SourceENS } from \"./Sources/SourceENS.sol\";\nimport { CitizenAlpha } from \"./CitizenAlpha.sol\";\nimport { SVGRender } from \"./SVGRender.sol\";\n\n/**\n * @title Metadata\n * @author Kames Geraghty\n * @notice CitizenAlpha metadata resolver.\n */\ncontract Metadata is Ownable {\n  using Strings for uint256;\n\n  /// @notice Token instance\n  address private _token;\n\n  /// @notice SVGRender instance\n  address private _svgRender;\n\n  /// @notice ISources[] list\n  address[] private _sources;\n\n  struct Metadata {\n    string name;\n    string description;\n    string avatar;\n    string did;\n    string ensAlias;\n    string ensNode;\n    string ensResolver;\n    string traits;\n  }\n\n  struct ExternalMetadata {\n    string avatar;\n    string did;\n    string ensNode;\n    string ensAlias;\n    string ensResolver;\n    string traits;\n  }\n\n  constructor(address _svgRender_) {\n    _svgRender = _svgRender_;\n  }\n\n  /* ===================================================================================== */\n  /* External Functions                                                                    */\n  /* ===================================================================================== */\n\n  /**\n   * @notice Get Token instance\n   * @return token Token\n   */\n  function getToken() external view returns (address token) {\n    return _token;\n  }\n\n  /**\n   * @notice Get Token instance\n   * @return token Token\n   */\n  function getSVGRender() external view returns (address token) {\n    return _svgRender;\n  }\n\n  function getSourceData(uint256 idx, address user)\n    external\n    view\n    returns (string[] memory, string[] memory)\n  {\n    return _getSourceData(idx, user);\n  }\n\n  function getSourcesData(address user) external view returns (string[] memory, string[] memory) {\n    return _getSourcesData(user);\n  }\n\n  /**\n   * @notice Construct tokenURI\n   * @param tokenId address\n   * @return uri string - Uniform Resource Identifier (URI) for `tokenId` token.\n   */\n  function tokenURI(uint256 tokenId) external view returns (string memory) {\n    return _constructTokenURI(tokenId);\n  }\n\n  /**\n   * @notice Construct resolver tokenURI\n   * @param tokenId address\n   * @return uri string - Uniform Resource Identifier (URI) for `tokenId` token.\n   */\n  function tokenURIResolver(uint256 tokenId) external view returns (string memory) {\n    return _constructTokenURIResolver(tokenId);\n  }\n\n  /**\n   * @notice Get User Metadata\n   * @param user address\n   * @return metadata Metadata\n   */\n  function getMetadata(address user) external view returns (Metadata memory) {\n    return _constructMetadata(user, CitizenAlpha(_token).getId(user));\n  }\n\n  /**\n   * @notice Get User Avatar\n   * @param user address\n   * @return avatar string\n   */\n  function getAvatar(address user) external view returns (string memory) {\n    uint256 _tokenId = ICitizenAlpha(_token).getId(user);\n    SourceENS _resolverEns = SourceENS(_sources[0]);\n    (, string memory alias_, ) = _resolverEns.getMetadata(user);\n    string memory avatar_ = _resolverEns.getValue(user, \"avatar\");\n    return _generateAvatar(avatar_, _tokenId, alias_);\n  }\n\n  /**\n   * @notice Get User Image\n   * @param user address\n   * @return avatar string\n   */\n  function getImage(address user) external view returns (string memory) {\n    uint256 _tokenId = ICitizenAlpha(_token).getId(user);\n    SourceENS _resolverEns = SourceENS(_sources[0]);\n    (, string memory alias_, ) = _resolverEns.getMetadata(user);\n    return _generateImage(_tokenId, alias_);\n  }\n\n  /**\n   * @notice Append Source instance\n   * @param source address\n   */\n  function appendSource(address source) external onlyOwner {\n    _sources.push(source);\n  }\n\n  /**\n   * @notice Set Source instance\n   * @param idx uint256\n   * @param source address\n   */\n  function updateSource(uint256 idx, address source) external onlyOwner {\n    require(idx < _sources.length - 1, \"Metadata:invalid-index\");\n    _sources[idx] = source;\n  }\n\n  /**\n   * @notice Set Token instance\n   * @param token_ address\n   */\n  function setToken(address token_) external onlyOwner {\n    _token = token_;\n  }\n\n  /**\n   * @notice Set SVGRender instance\n   * @param svgRender_ address\n   */\n  function setSVGRender(address svgRender_) external onlyOwner {\n    _svgRender = svgRender_;\n  }\n\n  /* ===================================================================================== */\n  /* Internal Functions                                                                    */\n  /* ===================================================================================== */\n\n  function _constructTokenURI(uint256 _tokenId) internal view returns (string memory) {\n    ICitizenAlpha token_ = ICitizenAlpha(_token);\n    Metadata memory _meta = _constructMetadata(token_.ownerOf(_tokenId), _tokenId);\n\n    return\n      string(\n        abi.encodePacked(\n          \"data:application/json;base64,\",\n          Base64.encode(\n            bytes(\n              string.concat(\n                '{\"name\":',\n                '\"',\n                _meta.name,\n                '\",',\n                '\"description\":',\n                '\"',\n                _meta.description,\n                '\",',\n                '\"image\":',\n                '\"',\n                _meta.avatar,\n                '\",',\n                '\"attributes\": [',\n                _meta.traits,\n                \"]\",\n                \"}\"\n              )\n            )\n          )\n        )\n      );\n  }\n\n  function _constructTokenURIResolver(uint256 _tokenId) internal view returns (string memory) {\n    ICitizenAlpha token_ = ICitizenAlpha(_token);\n    address owner_ = token_.ownerOf(_tokenId);\n    ExternalMetadata memory externalMetadata_ = _getExternalMetadata(owner_, _tokenId);\n    string memory name_ = string(abi.encodePacked(\"Citizen #\", _tokenId.toString()));\n    string memory description_ = bytes(externalMetadata_.ensAlias).length > 0\n      ? externalMetadata_.ensAlias\n      : Strings.toHexString(uint256(uint160(owner_)), 20);\n    string memory avatar_ = _generateImage(_tokenId, externalMetadata_.ensAlias);\n    address link_ = ICitizenAlpha(_token).getLink(owner_);\n    return\n      string(\n        abi.encodePacked(\n          \"data:application/json;base64,\",\n          Base64.encode(\n            bytes(\n              string.concat(\n                '{\"name\":',\n                '\"',\n                name_,\n                '\",',\n                '\"description\":',\n                '\"',\n                description_,\n                '\",',\n                '\"image\":',\n                '\"',\n                avatar_,\n                '\",',\n                '\"attributes\": [',\n                _generateTrait(\"link\", Strings.toHexString(uint256(uint160(link_)), 20)),\n                \"]\",\n                \"}\"\n              )\n            )\n          )\n        )\n      );\n  }\n\n  function _constructMetadata(address user, uint256 tokenId)\n    internal\n    view\n    returns (Metadata memory)\n  {\n    ExternalMetadata memory externalMetadata_ = _getExternalMetadata(user, tokenId);\n    string memory name_ = string(abi.encodePacked(\"Citizen #\", tokenId.toString()));\n    string memory description_ = bytes(externalMetadata_.ensAlias).length > 0\n      ? externalMetadata_.ensAlias\n      : Strings.toHexString(uint256(uint160(user)), 20);\n    address link_ = ICitizenAlpha(_token).getLink(user);\n\n    Metadata memory _meta = Metadata({\n      name: name_,\n      description: description_,\n      avatar: externalMetadata_.avatar,\n      did: externalMetadata_.did,\n      ensNode: externalMetadata_.ensNode,\n      ensAlias: externalMetadata_.ensAlias,\n      ensResolver: externalMetadata_.ensResolver,\n      traits: string.concat(\n        externalMetadata_.traits,\n        _generateTrait(\"link\", Strings.toHexString(uint256(uint160(link_)), 20))\n      )\n    });\n\n    return _meta;\n  }\n\n  function _getExternalMetadata(address user, uint256 _tokenId)\n    internal\n    view\n    returns (ExternalMetadata memory)\n  {\n    /// @dev ENS resolver must always be in the first slot. TODO: make better\n    SourceENS _resolverEns = SourceENS(_sources[0]);\n    string memory did_ = _resolverEns.getValue(user, \"did\");\n    string memory avatar_ = _resolverEns.getValue(user, \"avatar\");\n    (bytes32 node, string memory alias_, address resolver_) = _resolverEns.getMetadata(user);\n    string memory traits_ = _getUnwrappedTraits(user);\n    return\n      ExternalMetadata({\n        avatar: _generateAvatar(avatar_, _tokenId, alias_),\n        did: did_,\n        ensNode: string(abi.encodePacked(node)),\n        ensAlias: string(alias_),\n        ensResolver: resolver_ != 0x0000000000000000000000000000000000000000\n          ? Strings.toHexString(uint256(uint160(resolver_)), 20)\n          : \"\",\n        traits: traits_\n      });\n  }\n\n  function _getExternalAvatar(address user, uint256 _tokenId)\n    internal\n    view\n    returns (string memory)\n  {\n    /// @dev ENS PublicResolver must be in first slot. TODO: make better in V2\n    SourceENS _resolverEns = SourceENS(_sources[0]);\n    string memory avatar_ = _resolverEns.getValue(user, \"avatar\");\n    (, string memory alias_, ) = _resolverEns.getMetadata(user);\n    return _generateAvatar(avatar_, _tokenId, alias_);\n  }\n\n  function _getUnwrappedTraits(address user) internal view returns (string memory) {\n    (string[] memory keys_, string[] memory values_) = _getSourcesData(user);\n    return _generateTraits(keys_, values_);\n  }\n\n  function _getSourceData(uint256 _sourceIndex, address _user)\n    internal\n    view\n    returns (string[] memory, string[] memory)\n  {\n    ISource _source = ISource(_sources[_sourceIndex]);\n    uint256 count = _source.count(_user);\n\n    string[] memory keys_ = new string[](count);\n    string[] memory values_ = new string[](count);\n\n    (string[] memory keys__, string[] memory values__) = _source.getData(_user);\n\n    for (uint256 k = 0; k < count; k++) {\n      keys_[k] = (keys__[k]);\n      values_[k] = values__[k];\n    }\n\n    return (keys_, values_);\n  }\n\n  function _getSourcesData(address _user) internal view returns (string[] memory, string[] memory) {\n    uint256 count = 0;\n    address[] memory __sources = _sources;\n    for (uint256 i = 0; i < __sources.length; i++) {\n      ISource _source = ISource(__sources[i]);\n      count = count + _source.count(_user);\n    }\n\n    string[] memory keys_ = new string[](count);\n    string[] memory values_ = new string[](count);\n\n    uint256 __start;\n    for (uint256 i = 0; i < __sources.length; i++) {\n      ISource _source = ISource(__sources[i]);\n      (string[] memory keys__, string[] memory values__) = _source.getData(_user);\n      for (uint256 k = __start; k < count; k++) {\n        keys_[k] = (keys__[k]);\n        values_[k] = values__[k];\n      }\n    }\n\n    return (keys_, values_);\n  }\n\n  /* ===================================================================================== */\n  /* Traits Functions                                                                      */\n  /* ===================================================================================== */\n\n  function _appendTrait(string memory _traits, string memory _traitAppending)\n    internal\n    pure\n    returns (string memory)\n  {\n    return string.concat(_traits, bytes(_traits).length > 0 ? \",\" : \"\", _traitAppending);\n  }\n\n  function _generateTrait(string memory _key, string memory _value)\n    internal\n    pure\n    returns (string memory __traits)\n  {\n    return string.concat('{\"trait_type\":' '\"', _key, '\",', '\"value\":', '\"', _value, '\"}');\n  }\n\n  function _generateTraits(string[] memory _keys, string[] memory _values)\n    internal\n    pure\n    returns (string memory __traits)\n  {\n    string memory _traits = \"\";\n    for (uint256 i = 0; i < _keys.length; i++) {\n      if (bytes(_values[i]).length > 0) {\n        _traits = string.concat(_traits, _generateTrait(_keys[i], _values[i]), \",\");\n      }\n    }\n    return _traits;\n  }\n\n  function _generateAvatar(\n    string memory _avatar,\n    uint256 tokenId,\n    string memory alias_\n  ) internal view returns (string memory) {\n    if (bytes(_avatar).length == 0) {\n      return\n        string(\n          abi.encodePacked(\n            \"data:image/svg+xml;base64,\",\n            Base64.encode(bytes(SVGRender(_svgRender).generate(tokenId, alias_)))\n          )\n        );\n    }\n    return _avatar;\n  }\n\n  function _generateImage(uint256 tokenId, string memory alias_)\n    internal\n    view\n    returns (string memory)\n  {\n    return\n      string(\n        abi.encodePacked(\n          \"data:image/svg+xml;base64,\",\n          Base64.encode(bytes(SVGRender(_svgRender).generate(tokenId, alias_)))\n        )\n      );\n  }\n}\n"
    },
    "contracts/Nation/Nation.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.15;\n\nimport { AccessControlEnumerable, AccessControl, IAccessControl } from \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\";\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { CitizenAlpha } from \"../CitizenAlpha.sol\";\nimport { Notary } from \"../Notary/Notary.sol\";\n\n/**\n * @title Nation\n * @author Kames Geraghty\n * @notice Nation is an AccessControl layer for CitizenAlpha.\n * @dev Extends Citizen on-chain permissions using updatables nested Roles.\n           \n */\ncontract Nation is AccessControlEnumerable {\n  /// @notice CitizenAlpha instance\n  address private _citizenAlpha;\n\n  /// @notice Founder Role\n  bytes32 private constant FOUNDER = keccak256(\"FOUNDER\");\n\n  /// @notice Governance Role\n  bytes32 private constant GOVERNANCE = keccak256(\"GOVERNANCE\");\n\n  /// @notice Global Role AccessControl\n  mapping(bytes32 => bool) private _roleActive;\n\n  /**\n   * @notice Nation Constructor\n   * @param _founders addresses array of FOUNDERS\n   */\n  constructor(address _citizenAlpha_, address[] memory _founders) {\n    _citizenAlpha = _citizenAlpha_;\n    _roleActive[FOUNDER] = true;\n    _roleActive[GOVERNANCE] = true;\n    _roleActive[DEFAULT_ADMIN_ROLE] = true;\n    for (uint256 i = 0; i < _founders.length; i++) {\n      _setupRole(FOUNDER, _founders[i]);\n      _setupRole(DEFAULT_ADMIN_ROLE, _founders[i]);\n    }\n    _setRoleAdmin(FOUNDER, DEFAULT_ADMIN_ROLE);\n  }\n\n  /**\n   * @notice Admin modifier\n   * @param role bytes32\n   */\n  modifier _onlyAdmin(bytes32 role) {\n    address sender_ = _msgSender();\n    require(\n      hasRole(getRoleAdmin(role), sender_) ||\n        hasRole(GOVERNANCE, sender_) ||\n        hasRole(DEFAULT_ADMIN_ROLE, sender_),\n      \"Nation:unauthorized\"\n    );\n    _;\n  }\n\n  /**\n   * @notice Governance modifier\n   */\n  modifier _onlyGovernance() {\n    address sender_ = _msgSender();\n    require(\n      (hasRole(GOVERNANCE, sender_) || hasRole(DEFAULT_ADMIN_ROLE, sender_)),\n      \"Nation:unauthorized\"\n    );\n    _;\n  }\n\n  /* ===================================================================================== */\n  /* External Functions                                                                    */\n  /* ===================================================================================== */\n\n  /**\n   * @notice Get CitizenAlpha instance\n   * @return citizenAlpha address of CitizenAlpha instance\n   */\n  function getCitizenAlpha() external view returns (address) {\n    return _citizenAlpha;\n  }\n\n  /**\n   * @notice Check if Account has Role\n   * @dev Include check for Role activication is Citizenship\n   * @return active bool\n   */\n  function hasRole(bytes32 role, address account)\n    public\n    view\n    virtual\n    override(AccessControl, IAccessControl)\n    returns (bool)\n  {\n    if (!_roleActive[role] || !CitizenAlpha(_citizenAlpha).isCitizen(account)) {\n      return false;\n    }\n    return super.hasRole(role, account);\n  }\n\n  /**\n   * @notice Check Founder status\n   * @param citizen address\n   * @return status bool\n   */\n  function isFounder(address citizen) external view returns (bool status) {\n    return hasRole(FOUNDER, citizen);\n  }\n\n  /**\n   * @notice Check Governance status\n   * @param module address\n   * @return status bool\n   */\n  function isGovernance(address module) external view returns (bool status) {\n    return hasRole(GOVERNANCE, module);\n  }\n\n  /**\n   * @notice Get status of Role global settings\n   * @return status bool\n   */\n  function roleStatus(bytes32 role) external view returns (bool status) {\n    return _roleActive[role];\n  }\n\n  /**\n   * @notice Grant Role to Citizen\n   * @param role bytes32\n   * @param citizen address\n   */\n  function grantRole(bytes32 role, address citizen)\n    public\n    virtual\n    override(AccessControl, IAccessControl)\n    _onlyAdmin(role)\n  {\n    require(_roleActive[role], \"Nation:inactive-role\");\n    _grantRole(role, citizen);\n  }\n\n  /**\n   * @notice Revoke Role from Citizen\n   * @param role bytes32\n   * @param citizen address\n   */\n  function revokeRole(bytes32 role, address citizen)\n    public\n    virtual\n    override(AccessControl, IAccessControl)\n    _onlyAdmin(role)\n  {\n    require(role != DEFAULT_ADMIN_ROLE, \"Nation:invalid-request\");\n    require(_roleActive[role], \"Nation:inactive-role\");\n    _revokeRole(role, citizen);\n  }\n\n  /**\n   * @notice Enable Role status\n   * @param role bytes32\n   */\n  function enableRole(bytes32 role) external onlyRole(FOUNDER) {\n    require(_roleActive[role] == false, \"Nation:role-enabled\");\n    _setRoleAdmin(role, FOUNDER);\n    _roleActive[role] = true;\n  }\n\n  /**\n   * @notice Enable Role status\n   * @param role bytes32\n   * @param adminRole bytes32\n   */\n  function enableRoleWithAdmin(bytes32 role, bytes32 adminRole) external _onlyGovernance {\n    require(_roleActive[role] == false, \"Nation:role-enabled\");\n    _setRoleAdmin(role, adminRole);\n    _roleActive[role] = true;\n  }\n\n  /**\n   * @notice Disable Role status\n   * @param role bytes32\n   */\n  function disableRole(bytes32 role) external _onlyGovernance {\n    require(_roleActive[role] == true, \"Nation:role-disabled\");\n    _setRoleAdmin(role, DEFAULT_ADMIN_ROLE);\n    _roleActive[role] = false;\n  }\n\n  /**\n   * @notice Set Role admin\n   * @param role bytes32\n   * @param adminRole bytes32\n   */\n  function setRoleAdmin(bytes32 role, bytes32 adminRole) external _onlyGovernance {\n    _setRoleAdmin(role, adminRole);\n  }\n}\n"
    },
    "contracts/Notary/Notary.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport { AccessControl } from \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport { ICitizenAlpha } from \"../interfaces/ICitizenAlpha.sol\";\n\n/**\n * @title Notary\n * @author Kames Geraghty\n * @notice Notary is a minimal AccessControl layer for Citizen issuance.\n */\ncontract Notary is AccessControl {\n  /// @notice CitizenAlpha instance\n  address private _citizenAlpha;\n\n  /// @notice Notary Role\n  bytes32 private constant NOTARY = keccak256(\"NOTARY\");\n\n  /**\n   * @notice Notary Constructor\n   * @dev Set CitizenAlpha instance and set start Notaries.\n   * @param _citizenAlpha_ CitizenAlpha instance\n   * @param _notaries Array of Notaries\n   */\n  constructor(address _citizenAlpha_, address[] memory _notaries) {\n    _citizenAlpha = _citizenAlpha_;\n    _setupRole(NOTARY, address(this));\n    for (uint256 i = 0; i < _notaries.length; i++) {\n      _setupRole(DEFAULT_ADMIN_ROLE, _notaries[i]);\n      _setupRole(NOTARY, _notaries[i]);\n    }\n    _setRoleAdmin(NOTARY, DEFAULT_ADMIN_ROLE);\n  }\n\n  /* ===================================================================================== */\n  /* External Functions                                                                    */\n  /* ===================================================================================== */\n\n  function getCitizenAlpha() external view returns (address) {\n    return _citizenAlpha;\n  }\n\n  /**\n   * @notice Check Notary status\n   * @param citizen address\n   * @return status bool\n   */\n  function isNotary(address citizen) external view returns (bool status) {\n    return hasRole(NOTARY, citizen);\n  }\n\n  /**\n   * @notice Issue Citizenship\n   * @param to address\n   */\n  function issue(address to) external {\n    require(hasRole(NOTARY, _msgSender()), \"Notary:unauthorized-access\");\n    _issue(to);\n  }\n\n  /**\n   * @notice Batch issue Citizenships\n   * @param to address\n   */\n  function issueBatch(address[] calldata to) external {\n    require(hasRole(NOTARY, _msgSender()), \"Notary:unauthorized-access\");\n    for (uint256 i = 0; i < to.length; i++) {\n      _issue(to[i]);\n    }\n  }\n\n  /**\n   * @notice Revoke Citizenship\n   * @param from address\n   */\n  function revoke(address from) external {\n    require(hasRole(NOTARY, _msgSender()), \"Notary:unauthorized-access\");\n    _revoke(from);\n  }\n\n  /**\n   * @notice Batch Revoke Citizenships\n   * @param from address\n   */\n  function revokeBatch(address[] calldata from) external {\n    require(hasRole(NOTARY, _msgSender()), \"Notary:unauthorized-access\");\n    for (uint256 i = 0; i < from.length; i++) {\n      _revoke(from[i]);\n    }\n  }\n\n  /* ===================================================================================== */\n  /* Internal Functions                                                                    */\n  /* ===================================================================================== */\n\n  function _issue(address _to) internal {\n    ICitizenAlpha(_citizenAlpha).issue(_to);\n  }\n\n  function _revoke(address _from) internal {\n    ICitizenAlpha(_citizenAlpha).revoke(_from);\n  }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "base64-sol/base64.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\n/// @title Base64\n/// @author Brecht Devos - <brecht@loopring.org>\n/// @notice Provides functions for encoding/decoding base64\nlibrary Base64 {\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n    bytes  internal constant TABLE_DECODE = hex\"0000000000000000000000000000000000000000000000000000000000000000\"\n                                            hex\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\"\n                                            hex\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\"\n                                            hex\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\";\n\n    function encode(bytes memory data) internal pure returns (string memory) {\n        if (data.length == 0) return '';\n\n        // load the table into memory\n        string memory table = TABLE_ENCODE;\n\n        // multiply by 4/3 rounded up\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\n\n        // add some extra buffer at the end required for the writing\n        string memory result = new string(encodedLen + 32);\n\n        assembly {\n            // set the actual output length\n            mstore(result, encodedLen)\n\n            // prepare the lookup table\n            let tablePtr := add(table, 1)\n\n            // input ptr\n            let dataPtr := data\n            let endPtr := add(dataPtr, mload(data))\n\n            // result ptr, jump over length\n            let resultPtr := add(result, 32)\n\n            // run over the input, 3 bytes at a time\n            for {} lt(dataPtr, endPtr) {}\n            {\n                // read 3 bytes\n                dataPtr := add(dataPtr, 3)\n                let input := mload(dataPtr)\n\n                // write 4 characters\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\n                resultPtr := add(resultPtr, 1)\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\n                resultPtr := add(resultPtr, 1)\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\n                resultPtr := add(resultPtr, 1)\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\n                resultPtr := add(resultPtr, 1)\n            }\n\n            // padding with '='\n            switch mod(mload(data), 3)\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\n        }\n\n        return result;\n    }\n\n    function decode(string memory _data) internal pure returns (bytes memory) {\n        bytes memory data = bytes(_data);\n\n        if (data.length == 0) return new bytes(0);\n        require(data.length % 4 == 0, \"invalid base64 decoder input\");\n\n        // load the table into memory\n        bytes memory table = TABLE_DECODE;\n\n        // every 4 characters represent 3 bytes\n        uint256 decodedLen = (data.length / 4) * 3;\n\n        // add some extra buffer at the end required for the writing\n        bytes memory result = new bytes(decodedLen + 32);\n\n        assembly {\n            // padding with '='\n            let lastBytes := mload(add(data, mload(data)))\n            if eq(and(lastBytes, 0xFF), 0x3d) {\n                decodedLen := sub(decodedLen, 1)\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\n                    decodedLen := sub(decodedLen, 1)\n                }\n            }\n\n            // set the actual output length\n            mstore(result, decodedLen)\n\n            // prepare the lookup table\n            let tablePtr := add(table, 1)\n\n            // input ptr\n            let dataPtr := data\n            let endPtr := add(dataPtr, mload(data))\n\n            // result ptr, jump over length\n            let resultPtr := add(result, 32)\n\n            // run over the input, 4 characters at a time\n            for {} lt(dataPtr, endPtr) {}\n            {\n               // read 4 characters\n               dataPtr := add(dataPtr, 4)\n               let input := mload(dataPtr)\n\n               // write 3 bytes\n               let output := add(\n                   add(\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\n                   add(\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\n                    )\n                )\n                mstore(resultPtr, shl(232, output))\n                resultPtr := add(resultPtr, 3)\n            }\n        }\n\n        return result;\n    }\n}\n"
    },
    "contracts/libraries/SVG.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"./SVGUtils.sol\";\n\n/**\n * @title svg\n * @author Kames Geraghty\n * @notice SVG construction library using web-like API.\n * @dev Original code from w1nt3r-eth/hot-chain-svg (https://github.com/w1nt3r-eth/hot-chain-svg)\n */\nlibrary svg {\n  using Strings for uint256;\n  using Strings for uint8;\n\n  function g(string memory _props, string memory _children) internal pure returns (string memory) {\n    return el(\"g\", _props, _children);\n  }\n\n  function path(string memory _props, string memory _children)\n    internal\n    pure\n    returns (string memory)\n  {\n    return el(\"path\", _props, _children);\n  }\n\n  function text(string memory _props, string memory _children)\n    internal\n    pure\n    returns (string memory)\n  {\n    return el(\"text\", _props, _children);\n  }\n\n  function line(string memory _props, string memory _children)\n    internal\n    pure\n    returns (string memory)\n  {\n    return el(\"line\", _props, _children);\n  }\n\n  function circle(string memory _props, string memory _children)\n    internal\n    pure\n    returns (string memory)\n  {\n    return el(\"circle\", _props, _children);\n  }\n\n  function circle(string memory _props) internal pure returns (string memory) {\n    return el(\"circle\", _props);\n  }\n\n  function rect(string memory _props, string memory _children)\n    internal\n    pure\n    returns (string memory)\n  {\n    return el(\"rect\", _props, _children);\n  }\n\n  function rect(string memory _props) internal pure returns (string memory) {\n    return el(\"rect\", _props);\n  }\n\n  function stop(string memory _props) internal pure returns (string memory) {\n    return el(\"stop\", _props);\n  }\n\n  function filter(string memory _props, string memory _children)\n    internal\n    pure\n    returns (string memory)\n  {\n    return el(\"filter\", _props, _children);\n  }\n\n  function defs(string memory _children) internal pure returns (string memory) {\n    return el(\"defs\", \"\", _children);\n  }\n\n  function cdata(string memory _content) internal pure returns (string memory) {\n    return string.concat(\"<![CDATA[\", _content, \"]]>\");\n  }\n\n  /* GRADIENTS */\n  function radialGradient(string memory _props, string memory _children)\n    internal\n    pure\n    returns (string memory)\n  {\n    return el(\"radialGradient\", _props, _children);\n  }\n\n  function linearGradient(string memory _props, string memory _children)\n    internal\n    pure\n    returns (string memory)\n  {\n    return el(\"linearGradient\", _props, _children);\n  }\n\n  function gradientStop(\n    uint256 offset,\n    string memory stopColor,\n    string memory _props\n  ) internal pure returns (string memory) {\n    return\n      el(\n        \"stop\",\n        string.concat(\n          prop(\"stop-color\", stopColor),\n          \" \",\n          prop(\"offset\", string.concat(svgUtils.uint2str(offset), \"%\")),\n          \" \",\n          _props\n        )\n      );\n  }\n\n  function animateTransform(string memory _props) internal pure returns (string memory) {\n    return el(\"animateTransform\", _props);\n  }\n\n  function image(string memory _href, string memory _props) internal pure returns (string memory) {\n    return el(\"image\", string.concat(prop(\"href\", _href), \" \", _props));\n  }\n\n  function start() internal pure returns (string memory) {\n    return\n      string.concat(\n        '<svg width=\"400\" height=\"400\" style=\"background:#541563\" ',\n        'viewBox=\"0 0 400 400\" ',\n        'xmlns=\"http://www.w3.org/2000/svg\" ',\n        \">\"\n      );\n  }\n\n  function end() internal pure returns (bytes memory) {\n    return (\"</svg>\");\n  }\n\n  /* COMMON */\n  // A generic element, can be used to construct any SVG (or HTML) element\n  function el(\n    string memory _tag,\n    string memory _props,\n    string memory _children\n  ) internal pure returns (string memory) {\n    return string.concat(\"<\", _tag, \" \", _props, \">\", _children, \"</\", _tag, \">\");\n  }\n\n  // A generic element, can be used to construct any SVG (or HTML) element without children\n  function el(string memory _tag, string memory _props) internal pure returns (string memory) {\n    return string.concat(\"<\", _tag, \" \", _props, \"/>\");\n  }\n\n  // an SVG attribute\n  function prop(string memory _key, string memory _val) internal pure returns (string memory) {\n    return string.concat(_key, \"=\", '\"', _val, '\" ');\n  }\n\n  function stringifyIntSet(\n    bytes memory _data,\n    uint256 _offset,\n    uint256 _len\n  ) public pure returns (bytes memory) {\n    bytes memory res;\n    require(_data.length >= _offset + _len, \"Out of range\");\n    for (uint256 i = _offset; i < _offset + _len; i++) {\n      res = abi.encodePacked(res, byte2uint8(_data, i).toString(), \" \");\n    }\n    return res;\n  }\n\n  function byte2uint8(bytes memory _data, uint256 _offset) public pure returns (uint8) {\n    require(_data.length > _offset, \"Out of range\");\n    return uint8(_data[_offset]);\n  }\n}\n"
    },
    "contracts/libraries/SVGUtils.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\n/**\n  * @title  SVG Utilities\n  * @author Kames Geraghty\n  * @notice The SVG Utilities Library provides functions for constructing SVG; format CSS and numbers.\n  * @dev Original code from w1nt3r-eth/hot-chain-svg (https://github.com/w1nt3r-eth/hot-chain-svg)\n*/\nlibrary svgUtils {\n    using Strings for uint256;\n    using Strings for uint8;\n    \n    /// @notice Empty SVG element\n    string internal constant NULL = \"\";\n\n    /**\n     * @notice Formats a CSS variable line. Includes a semicolon for formatting.\n     * @param _key User for which to calculate prize amount.\n     * @param _val User for which to calculate prize amount.\n     * @return string Generated CSS variable.\n    */\n    function setCssVar(string memory _key, string memory _val)\n        internal\n        pure\n        returns (string memory)\n    {\n        return string.concat(\"--\", _key, \":\", _val, \";\");\n    }\n\n    /**\n     * @notice Formats getting a css variable\n     * @param _key User for which to calculate prize amount.\n     * @return string Generated CSS variable.\n    */\n    function getCssVar(string memory _key)\n        internal\n        pure\n        returns (string memory)\n    {\n        return string.concat(\"var(--\", _key, \")\");\n    }\n\n    // formats getting a def URL\n    function getDefURL(string memory _id)\n        internal\n        pure\n        returns (string memory)\n    {\n        return string.concat(\"url(#\", _id, \")\");\n    }\n\n    // checks if two strings are equal\n    function stringsEqual(string memory _a, string memory _b)\n        internal\n        pure\n        returns (bool)\n    {\n        return\n            keccak256(abi.encodePacked(_a)) == keccak256(abi.encodePacked(_b));\n    }\n\n    // returns the length of a string in characters\n    function utfStringLength(string memory _str)\n        internal\n        pure\n        returns (uint256 length)\n    {\n        uint256 i = 0;\n        bytes memory string_rep = bytes(_str);\n\n        while (i < string_rep.length) {\n            if (string_rep[i] >> 7 == 0) i += 1;\n            else if (string_rep[i] >> 5 == bytes1(uint8(0x6))) i += 2;\n            else if (string_rep[i] >> 4 == bytes1(uint8(0xE))) i += 3;\n            else if (string_rep[i] >> 3 == bytes1(uint8(0x1E)))\n                i += 4;\n                //For safety\n            else i += 1;\n\n            length++;\n        }\n    }\n\n    function round2Txt(\n        uint256 _value,\n        uint8 _decimals,\n        uint8 _prec\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(\n            (_value / 10 ** _decimals).toString(), \n            \".\",\n            ( _value / 10 ** (_decimals - _prec) -\n                _value / 10 ** (_decimals ) * 10 ** _prec\n            ).toString()\n        );\n    }\n\n     // converts an unsigned integer to a string\n     function uint2str(uint256 _i)\n     internal\n     pure\n     returns (string memory _uintAsString)\n {\n     if (_i == 0) {\n         return \"0\";\n     }\n     uint256 j = _i;\n     uint256 len;\n     while (j != 0) {\n         len++;\n         j /= 10;\n     }\n     bytes memory bstr = new bytes(len);\n     uint256 k = len;\n     while (_i != 0) {\n         k = k - 1;\n         uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\n         bytes1 b1 = bytes1(temp);\n         bstr[k] = b1;\n         _i /= 10;\n     }\n     return string(bstr);\n }\n}\n"
    },
    "contracts/libraries/SVGColor.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\n\ncontract SVGColor {\n  using Strings for uint256;\n  using Strings for uint8;\n\n  mapping(string => bytes) public colors;\n\n  constructor() {\n    colors[\"Black\"] = hex\"000000\";\n    colors[\"White\"] = hex\"FFFFFF\";\n    colors[\"Dark1\"] = hex\"232323\";\n    colors[\"Dark2\"] = hex\"464646\";\n  }\n\n  function getColor(string memory _colorName) public view returns (bytes memory) {\n    require(colors[_colorName].length == 3, \"Unknown color\");\n    return abi.encodePacked(colors[_colorName], hex\"64\");\n  }\n\n  function getColor(string memory _colorName, uint8 _alpha) public view returns (bytes memory) {\n    require(colors[_colorName].length == 3, \"Unknown color\");\n    return abi.encodePacked(colors[_colorName], _alpha);\n  }\n\n  function getRgba(string memory _colorName) public view returns (string memory) {\n    return string(toRgba(getColor(_colorName), 0));\n  }\n\n  // Input: array of colors (without alpha)\n  // Ouputs a linearGradient\n  function autoLinearGradient(\n    bytes memory _colors,\n    bytes memory _id,\n    bytes memory _customAttributes\n  ) public view returns (bytes memory) {\n    return this.autoLinearGradient(\"\", _colors, _id, _customAttributes);\n  }\n\n  function autoLinearGradient(\n    bytes memory _coordinates,\n    bytes memory _colors,\n    bytes memory _id,\n    bytes memory _customAttributes\n  ) external view returns (bytes memory) {\n    bytes memory _b;\n    if (_coordinates.length > 3) {\n      _b = abi.encodePacked(uint8(128), _coordinates);\n    } else {\n      _b = hex\"00\";\n    }\n    // Count the number of colors passed, each on 4 byte\n    uint256 colorCount = _colors.length / 4;\n    uint8 i = 0;\n    while (i < colorCount) {\n      _b = abi.encodePacked(\n        _b,\n        uint8(i * (100 / (colorCount - 1))), // grad. stop %\n        uint8(_colors[i * 4]),\n        uint8(_colors[i * 4 + 1]),\n        uint8(_colors[i * 4 + 2]),\n        uint8(_colors[i * 4 + 3])\n      );\n      i++;\n    }\n    return linearGradient(_b, _id, _customAttributes);\n  }\n\n  function linearGradient(\n    bytes memory _lg,\n    bytes memory _id,\n    bytes memory _customAttributes\n  ) public pure returns (bytes memory) {\n    bytes memory grdata;\n    uint8 offset = 1;\n\n    if (uint8(_lg[0]) & 128 == 128) {\n      grdata = abi.encodePacked(\n        'x1=\"',\n        byte2uint8(_lg, 1).toString(),\n        '%\" x2=\"',\n        byte2uint8(_lg, 2).toString(),\n        '%\" y1=\"',\n        byte2uint8(_lg, 3).toString(),\n        '%\" y2=\"',\n        byte2uint8(_lg, 4).toString(),\n        '%\"'\n      );\n      offset = 5;\n    }\n    grdata = abi.encodePacked('<linearGradient id=\"', _id, '\" ', _customAttributes, grdata, \">\");\n    for (uint256 i = offset; i < _lg.length; i += 5) {\n      grdata = abi.encodePacked(\n        grdata,\n        '<stop offset=\"',\n        byte2uint8(_lg, i).toString(),\n        '%\" stop-color=\"',\n        toRgba(_lg, i + 1),\n        '\" id=\"',\n        _id,\n        byte2uint8(_lg, i).toString(),\n        '\"/>'\n      );\n    }\n    return abi.encodePacked(grdata, \"</linearGradient>\");\n  }\n\n  function toRgba(bytes memory _rgba, uint256 offset) public pure returns (bytes memory) {\n    return\n      abi.encodePacked(\n        \"rgba(\",\n        byte2uint8(_rgba, offset).toString(),\n        \",\",\n        byte2uint8(_rgba, offset + 1).toString(),\n        \",\",\n        byte2uint8(_rgba, offset + 2).toString(),\n        \",\",\n        byte2uint8(_rgba, offset + 3).toString(),\n        \"%)\"\n      );\n  }\n\n  function byte2uint8(bytes memory _data, uint256 _offset) public pure returns (uint8) {\n    require(_data.length > _offset, \"Out of range\");\n    return uint8(_data[_offset]);\n  }\n\n  // formats rgba white with a specified opacity / alpha\n  function white_a(uint256 _a) internal pure returns (string memory) {\n    return rgba(255, 255, 255, _a);\n  }\n\n  // formats rgba black with a specified opacity / alpha\n  function black_a(uint256 _a) internal pure returns (string memory) {\n    return rgba(0, 0, 0, _a);\n  }\n\n  // formats generic rgba color in css\n  function rgba(\n    uint256 _r,\n    uint256 _g,\n    uint256 _b,\n    uint256 _a\n  ) internal pure returns (string memory) {\n    string memory formattedA = _a < 100 ? string.concat(\"0.\", uint2str(_a)) : \"1\";\n    return\n      string.concat(\n        \"rgba(\",\n        uint2str(_r),\n        \",\",\n        uint2str(_g),\n        \",\",\n        uint2str(_b),\n        \",\",\n        formattedA,\n        \")\"\n      );\n  }\n\n  function uint2str(uint256 _i) internal pure returns (string memory _uintAsString) {\n    if (_i == 0) {\n      return \"0\";\n    }\n    uint256 j = _i;\n    uint256 len;\n    while (j != 0) {\n      len++;\n      j /= 10;\n    }\n    bytes memory bstr = new bytes(len);\n    uint256 k = len;\n    while (_i != 0) {\n      k = k - 1;\n      uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\n      bytes1 b1 = bytes1(temp);\n      bstr[k] = b1;\n      _i /= 10;\n    }\n    return string(bstr);\n  }\n}\n"
    },
    "contracts/interfaces/ISource.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\ninterface ISource {\n  function count(address _address) external view returns (uint256);\n\n  function getData(address _address)\n    external\n    view\n    returns (string[] memory keys, string[] memory values);\n\n  function getValue(address _address, string memory _key) external view returns (string memory);\n}\n"
    },
    "contracts/interfaces/ICitizenAlpha.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\ninterface ICitizenAlpha {\n  function ownerOf(uint256 _id) external view returns (address owner);\n\n  function issue(address _citizen) external;\n\n  function revoke(address _citizen) external;\n\n  function getId(address citizen) external view returns (uint256);\n\n  function getLink(address citizen) external view returns (address issuer);\n\n  function hasRole(bytes32 role, address citizen) external view returns (bool);\n}\n"
    },
    "contracts/Sources/SourceENS.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.15;\n\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { NameEncoder } from \"../libraries/NameEncoder.sol\";\nimport { ISource } from \"../interfaces/ISource.sol\";\nimport { IReverseRegistrar } from \"../interfaces/ENS/IReverseRegistrar.sol\";\nimport { ITextResolver } from \"../interfaces/ENS/ITextResolver.sol\";\nimport { IDefaultReverseResolver } from \"../interfaces/ENS/IDefaultReverseResolver.sol\";\n\ncontract SourceENS is ISource, Ownable {\n  using NameEncoder for string;\n\n  string[] private _keys;\n  address private constant RESOLVER = 0x4976fb03C32e5B8cfe2b6cCB31c09Ba78EBaBa41;\n  address private constant REVERSE_REGISTRAR = 0x084b1c3C81545d370f3634392De611CaaBFf8148;\n  address private constant DEFAULT_REVERSE_RESOLVER = 0xA2C122BE93b0074270ebeE7f6b7292C7deB45047;\n\n  constructor() {\n    _keys.push(\"avatar\");\n    _keys.push(\"url\");\n    _keys.push(\"description\");\n    _keys.push(\"com.github\");\n    _keys.push(\"com.twitter\");\n    _keys.push(\"org.telegram\");\n    _keys.push(\"did\");\n  }\n\n  /* ===================================================================================== */\n  /* External Functions                                                                    */\n  /* ===================================================================================== */\n\n  /**\n   * @notice Get Keys\n   * @return keys string[]\n   */\n  function getKeys() external view returns (string[] memory keys) {\n    return _keys;\n  }\n\n  /**\n   * @notice Get data fields count for user\n   * @return count uint256\n   */\n  function count(address user) external view returns (uint256 count) {\n    (, bytes32 node_, ITextResolver res_) = _resolveOwner(user);\n    (string[] memory keys_, ) = _fetchNodeTextFields(_keys, node_, res_);\n    return keys_.length;\n  }\n\n  /**\n   * @notice Get all available data for user\n   * @param user address\n   * @return keys string[]\n   * @return values string[]\n   */\n  function getData(address user)\n    external\n    view\n    returns (string[] memory keys, string[] memory values)\n  {\n    (, bytes32 node_, ITextResolver res_) = _resolveOwner(user);\n    (string[] memory keys_, string[] memory values_) = _fetchNodeTextFields(_keys, node_, res_);\n    return (keys_, values_);\n  }\n\n  function getMetadata(address _address)\n    external\n    view\n    returns (\n      bytes32 node,\n      string memory name,\n      address resolver\n    )\n  {\n    (string memory name, bytes32 node, ITextResolver resolver) = _resolveOwner(_address);\n    return (node, name, address(resolver));\n  }\n\n  /**\n   * @notice Get data value for user\n   * @param user address\n   * @param key string\n   * @return value string\n   */\n  function getValue(address user, string memory key) external view returns (string memory) {\n    (, bytes32 node_, ITextResolver res_) = _resolveOwner(user);\n    return res_.text(node_, key);\n  }\n\n  /**\n   * @notice Append Key\n   * @param key string\n   */\n  function appendKey(string calldata key) external onlyOwner {\n    _keys.push(key);\n  }\n\n  /**\n   * @notice Set Key\n   * @param idx uint256\n   * @param key string\n   */\n  function updateKey(uint256 idx, string calldata key) external onlyOwner {\n    _keys[idx] = key;\n  }\n\n  /* ===================================================================================== */\n  /* Internal Functions                                                                    */\n  /* ===================================================================================== */\n\n  function _resolveOwner(address owner_)\n    internal\n    view\n    returns (\n      string memory,\n      bytes32,\n      ITextResolver\n    )\n  {\n    bytes32 node_ = IReverseRegistrar(REVERSE_REGISTRAR).node(owner_);\n    string memory _name = IDefaultReverseResolver(DEFAULT_REVERSE_RESOLVER).name(node_);\n    (, bytes32 _node) = _name.dnsEncodeName();\n    ITextResolver _resolver = ITextResolver(RESOLVER);\n    return (_name, _node, _resolver);\n  }\n\n  function _fetchNodeTextFields(\n    string[] memory _traits,\n    bytes32 _node,\n    ITextResolver _resolver\n  ) internal view returns (string[] memory keys_, string[] memory values_) {\n    string[] memory __keys = new string[](_traits.length);\n    string[] memory __values = new string[](_traits.length);\n    for (uint256 i = 0; i < _traits.length; i++) {\n      __keys[i] = _traits[i];\n      __values[i] = _resolver.text(_node, _traits[i]);\n    }\n    return (__keys, __values);\n  }\n}\n"
    },
    "contracts/SVGRender.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.15;\n\nimport { Base64 } from \"base64-sol/base64.sol\";\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { Strings } from \"@openzeppelin/contracts/utils/Strings.sol\";\nimport { svg } from \"./libraries/SVG.sol\";\nimport { svgUtils } from \"./libraries/SVGUtils.sol\";\nimport { SVGColor } from \"./libraries/SVGColor.sol\";\n\ncontract SVGRender is Ownable {\n  using Strings for uint256;\n  address public svgColor;\n\n  constructor(address _svgColor) {\n    svgColor = _svgColor;\n  }\n\n  function generate(uint256 _tokenId, string memory _alias) public view returns (string memory) {\n    string memory _bgDef = svgUtils.getDefURL(\"charcoal\");\n\n    return\n      string(\n        abi.encodePacked(\n          svg.start(),\n          _getDefs(),\n          svg.rect(\n            string.concat(\n              svg.prop(\"fill\", _bgDef),\n              svg.prop(\"x\", \"0\"),\n              svg.prop(\"y\", \"0\"),\n              svg.prop(\"width\", \"100%\"),\n              svg.prop(\"height\", \"100%\")\n            ),\n            svgUtils.NULL\n          ),\n          svg.text(\n            string.concat(\n              svg.prop(\"x\", \"50%\"),\n              svg.prop(\"y\", \"50%\"),\n              svg.prop(\"dominant-baseline\", \"middle\"),\n              svg.prop(\"text-anchor\", \"middle\"),\n              svg.prop(\"font-size\", \"48px\"),\n              svg.prop(\"fill\", \"white\")\n            ),\n            string.concat(\"CIV #\", _tokenId.toString())\n          ),\n          svg.text(\n            string.concat(\n              svg.prop(\"x\", \"50%\"),\n              svg.prop(\"y\", \"60%\"),\n              svg.prop(\"dominant-baseline\", \"middle\"),\n              svg.prop(\"text-anchor\", \"middle\"),\n              svg.prop(\"font-size\", \"22px\"),\n              svg.prop(\"fill\", \"white\")\n            ),\n            _alias\n          ),\n          svg.end()\n        )\n      );\n  }\n\n  function _getDefs() internal view returns (string memory) {\n    return\n      svg.defs(\n        string.concat(\n          svg.linearGradient(\n            string.concat(svg.prop(\"id\", \"charcoal\"), svg.prop(\"gradientTransform\", \"rotate(140)\")),\n            string.concat(\n              svg.stop(\n                string.concat(\n                  svg.prop(\"offset\", \"0%\"),\n                  svg.prop(\"stop-color\", SVGColor(svgColor).getRgba(\"Dark1\"))\n                )\n              ),\n              svg.stop(\n                string.concat(\n                  svg.prop(\"offset\", \"70%\"),\n                  svg.prop(\"stop-color\", SVGColor(svgColor).getRgba(\"Dark2\"))\n                )\n              )\n            )\n          )\n        )\n      );\n  }\n}\n"
    },
    "contracts/libraries/NameEncoder.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport \"./BytesUtils.sol\";\n\nlibrary NameEncoder {\n  using BytesUtils for bytes;\n\n  function dnsEncodeName(string memory name)\n    internal\n    pure\n    returns (bytes memory dnsName, bytes32 node)\n  {\n    uint8 labelLength = 0;\n    bytes memory bytesName = bytes(name);\n    uint256 length = bytesName.length;\n    dnsName = new bytes(length + 2);\n    node = 0;\n    if (length == 0) {\n      dnsName[0] = 0;\n      return (dnsName, node);\n    }\n\n    // use unchecked to save gas since we check for an underflow\n    // and we check for the length before the loop\n    unchecked {\n      for (uint256 i = length - 1; i >= 0; i--) {\n        if (bytesName[i] == \".\") {\n          dnsName[i + 1] = bytes1(labelLength);\n          node = keccak256(abi.encodePacked(node, bytesName.keccak(i + 1, labelLength)));\n          labelLength = 0;\n        } else {\n          labelLength += 1;\n          dnsName[i + 1] = bytesName[i];\n        }\n        if (i == 0) {\n          break;\n        }\n      }\n    }\n\n    node = keccak256(abi.encodePacked(node, bytesName.keccak(0, labelLength)));\n\n    dnsName[0] = bytes1(labelLength);\n    return (dnsName, node);\n  }\n}\n"
    },
    "contracts/interfaces/ENS/IReverseRegistrar.sol": {
      "content": "pragma solidity >=0.8.4;\n\ninterface IReverseRegistrar {\n  function setDefaultResolver(address resolver) external;\n\n  function claim(address owner) external returns (bytes32);\n\n  function claimForAddr(\n    address addr,\n    address owner,\n    address resolver\n  ) external returns (bytes32);\n\n  function claimWithResolver(address owner, address resolver) external returns (bytes32);\n\n  function setName(string memory name) external returns (bytes32);\n\n  function setNameForAddr(\n    address addr,\n    address owner,\n    address resolver,\n    string memory name\n  ) external returns (bytes32);\n\n  function node(address addr) external pure returns (bytes32);\n}\n"
    },
    "contracts/interfaces/ENS/ITextResolver.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\ninterface ITextResolver {\n  event TextChanged(bytes32 indexed node, string indexed indexedKey, string key);\n\n  /**\n   * Returns the text data associated with an ENS node and key.\n   * @param node The ENS node to query.\n   * @param key The text data key to query.\n   * @return The associated text data.\n   */\n  function text(bytes32 node, string calldata key) external view returns (string memory);\n}\n"
    },
    "contracts/interfaces/ENS/IDefaultReverseResolver.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\ninterface IDefaultReverseResolver {\n  function name(bytes32 input) external view returns (string calldata);\n}\n"
    },
    "contracts/libraries/BytesUtils.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\nlibrary BytesUtils {\n  /*\n   * @dev Returns the keccak-256 hash of a byte range.\n   * @param self The byte string to hash.\n   * @param offset The position to start hashing at.\n   * @param len The number of bytes to hash.\n   * @return The hash of the byte range.\n   */\n  function keccak(\n    bytes memory self,\n    uint256 offset,\n    uint256 len\n  ) internal pure returns (bytes32 ret) {\n    require(offset + len <= self.length);\n    assembly {\n      ret := keccak256(add(add(self, 32), offset), len)\n    }\n  }\n\n  /**\n   * @dev Returns the ENS namehash of a DNS-encoded name.\n   * @param self The DNS-encoded name to hash.\n   * @param offset The offset at which to start hashing.\n   * @return The namehash of the name.\n   */\n  function namehash(bytes memory self, uint256 offset) internal pure returns (bytes32) {\n    (bytes32 labelhash, uint256 newOffset) = readLabel(self, offset);\n    if (labelhash == bytes32(0)) {\n      require(offset == self.length - 1, \"namehash: Junk at end of name\");\n      return bytes32(0);\n    }\n    return keccak256(abi.encodePacked(namehash(self, newOffset), labelhash));\n  }\n\n  /**\n   * @dev Returns the keccak-256 hash of a DNS-encoded label, and the offset to the start of the next label.\n   * @param self The byte string to read a label from.\n   * @param idx The index to read a label at.\n   * @return labelhash The hash of the label at the specified index, or 0 if it is the last label.\n   * @return newIdx The index of the start of the next label.\n   */\n  function readLabel(bytes memory self, uint256 idx)\n    internal\n    pure\n    returns (bytes32 labelhash, uint256 newIdx)\n  {\n    require(idx < self.length, \"readLabel: Index out of bounds\");\n    uint256 len = uint256(uint8(self[idx]));\n    if (len > 0) {\n      labelhash = keccak(self, idx + 1, len);\n    } else {\n      labelhash = bytes32(0);\n    }\n    newIdx = idx + len + 1;\n  }\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControlEnumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlEnumerable.sol\";\nimport \"./AccessControl.sol\";\nimport \"../utils/structs/EnumerableSet.sol\";\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\n        return _roleMembers[role].at(index);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\n        return _roleMembers[role].length();\n    }\n\n    /**\n     * @dev Overload {_grantRole} to track enumerable memberships\n     */\n    function _grantRole(bytes32 role, address account) internal virtual override {\n        super._grantRole(role, account);\n        _roleMembers[role].add(account);\n    }\n\n    /**\n     * @dev Overload {_revokeRole} to track enumerable memberships\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual override {\n        super._revokeRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControlEnumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerable is IAccessControl {\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "contracts/Trust/TrustResolver.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.15;\n\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { CitizenAlpha } from \"../CitizenAlpha.sol\";\nimport { Metadata } from \"../Metadata.sol\";\nimport { Notary } from \"../Notary/Notary.sol\";\n\ncontract TrustResolver is Ownable {\n  address private immutable _citizenAlpha;\n  address private immutable _metadata;\n  address private immutable _notary;\n\n  struct CitizenObject {\n    string name;\n    string description;\n    string avatar;\n    string did;\n  }\n\n  struct CitizenMetadata {\n    string ensAlias;\n    string ensNode;\n    string ensResolver;\n  }\n\n  constructor(\n    address _citizenAlpha_,\n    address _metadata_,\n    address _notary_\n  ) {\n    _metadata = _metadata_;\n    _notary = _notary_;\n    _citizenAlpha = _citizenAlpha_;\n  }\n\n  /* ===================================================================================== */\n  /* External Functions                                                                    */\n  /* ===================================================================================== */\n  function getCitizen(address user) external view returns (CitizenObject memory member) {\n    Metadata.Metadata memory _meta = Metadata(_metadata).getMetadata(user);\n    CitizenObject memory _citizen = CitizenObject({\n      name: _meta.name,\n      description: _meta.description,\n      avatar: _meta.avatar,\n      did: _meta.did\n    });\n    return _citizen;\n  }\n\n  function getMetadata(address user) external view returns (CitizenMetadata memory member) {\n    Metadata.Metadata memory _meta = Metadata(_metadata).getMetadata(user);\n    CitizenMetadata memory _citizen = CitizenMetadata({\n      ensAlias: _meta.ensAlias,\n      ensNode: _meta.ensNode,\n      ensResolver: _meta.ensResolver\n    });\n    return _citizen;\n  }\n\n  function isMember(address user, address guild) external view returns (address member) {\n    return _isMember(user, guild);\n  }\n\n  function getMember(address user, address guild) external view returns (address member) {\n    return _getMember(user, guild);\n  }\n\n  function getMembers(address guild) external view returns (address[] memory members) {\n    return _getMembers(guild);\n  }\n\n  function tokenURI(uint256 tokenId) external view returns (string memory tokenURI) {\n    return CitizenAlpha(_citizenAlpha).tokenURI(tokenId);\n  }\n\n  /* ===================================================================================== */\n  /* Internal Functions                                                                    */\n  /* ===================================================================================== */\n\n  function _isMember(address user, address guild) internal view returns (address member) {\n    // return Guild(guild).isMember(user);\n  }\n\n  function _getMember(address user, address guild) internal view returns (address member) {\n    // return Guild(guild).getMember(user);\n  }\n\n  function _getMembers(address guild) internal view returns (address[] memory members) {\n    // return Guild(guild).getMembers();\n  }\n}\n"
    },
    "contracts/Notary/NotaryServiceDelegatable.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport { Notary } from \"../Notary/Notary.sol\";\nimport { RevokableOwnableDelegatable } from \"../Delegatable/caveat-enforcers/RevokableOwnableDelegatable.sol\";\n\n/**\n * @title NotaryServiceDelegatable\n * @author Kames Geraghty\n * @notice Delegatable off-chain Citizenship issuance permissions.\n */\ncontract NotaryServiceDelegatable is RevokableOwnableDelegatable {\n  /// @notice CitizenAlpha instance\n  address private immutable _citizenAlpha;\n\n  constructor(address _citizenAlpha_) RevokableOwnableDelegatable(\"NotaryServiceDelegatable\") {\n    _citizenAlpha = _citizenAlpha_;\n  }\n\n  /**\n   * @notice Get Notary instance\n   * @return notary address\n   */\n  function getNotary() external view returns (address notary) {\n    return _citizenAlpha;\n  }\n\n  /**\n   * @notice Issue Citizenship via Notary exeuction\n   * @dev Inteneded to be used with Delegatable.eth invoke for third-party execution.\n   * @param newCitizen address\n   */\n  function issue(address newCitizen) external {\n    require(owner() == _msgSender(), \"NotaryServiceDelegatable:not-authorized\");\n    Notary(_citizenAlpha).issue(newCitizen);\n  }\n}\n"
    },
    "contracts/Delegatable/caveat-enforcers/RevokableOwnableDelegatable.sol": {
      "content": "pragma solidity ^0.8.13;\n//SPDX-License-Identifier: MIT\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./CaveatEnforcer.sol\";\nimport \"../Delegatable.sol\";\n\nabstract contract RevokableOwnableDelegatable is Ownable, CaveatEnforcer, Delegatable {\n  constructor(string memory name) Delegatable(name, \"1\") {}\n\n  mapping(bytes32 => bool) isRevoked;\n\n  function enforceCaveat(\n    bytes calldata terms,\n    Transaction calldata transaction,\n    bytes32 delegationHash\n  ) public view virtual override returns (bool) {\n    require(!isRevoked[delegationHash], \"Delegation has been revoked\");\n\n    // Owner methods are not delegatable in this contract:\n    bytes4 targetSig = bytes4(transaction.data[0:4]);\n\n    // transferOwnership(address newOwner)\n    require(targetSig != 0xf2fde38b, \"transferOwnership is not delegatable\");\n\n    // renounceOwnership()\n    require(targetSig != 0x79ba79d8, \"renounceOwnership is not delegatable\");\n\n    return true;\n  }\n\n  function revokeDelegation(\n    SignedDelegation calldata signedDelegation,\n    SignedIntentionToRevoke calldata signedIntentionToRevoke\n  ) public {\n    address signer = verifyDelegationSignature(signedDelegation);\n    address revocationSigner = verifyIntentionToRevokeSignature(signedIntentionToRevoke);\n    require(signer == revocationSigner, \"Only the signer can revoke a delegation\");\n\n    bytes32 delegationHash = GET_SIGNEDDELEGATION_PACKETHASH(signedDelegation);\n    isRevoked[delegationHash] = true;\n  }\n\n  function verifyIntentionToRevokeSignature(SignedIntentionToRevoke memory signedIntentionToRevoke)\n    public\n    view\n    returns (address)\n  {\n    IntentionToRevoke memory intentionToRevoke = signedIntentionToRevoke.intentionToRevoke;\n    bytes32 sigHash = getIntentionToRevokeTypedDataHash(intentionToRevoke);\n    address recoveredSignatureSigner = recover(sigHash, signedIntentionToRevoke.signature);\n    return recoveredSignatureSigner;\n  }\n\n  function getIntentionToRevokeTypedDataHash(IntentionToRevoke memory intentionToRevoke)\n    public\n    view\n    returns (bytes32)\n  {\n    bytes32 digest = keccak256(\n      abi.encodePacked(\"\\x19\\x01\", domainHash, GET_INTENTIONTOREVOKE_PACKETHASH(intentionToRevoke))\n    );\n    return digest;\n  }\n\n  /**\n   * This is boilerplate that must be added to any Delegatable contract if it also inherits\n   * from another class that also implements _msgSender().\n   */\n  function _msgSender()\n    internal\n    view\n    virtual\n    override(Delegatable, Context)\n    returns (address sender)\n  {\n    if (msg.sender == address(this)) {\n      bytes memory array = msg.data;\n      uint256 index = msg.data.length;\n      assembly {\n        // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\n        sender := and(mload(add(array, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n      }\n    } else {\n      sender = msg.sender;\n    }\n    return sender;\n  }\n}\n"
    },
    "contracts/Delegatable/caveat-enforcers/CaveatEnforcer.sol": {
      "content": "pragma solidity ^0.8.13;\n//SPDX-License-Identifier: MIT\n\nimport \"../TypesAndDecoders.sol\";\n\nabstract contract CaveatEnforcer {\n  function enforceCaveat(\n    bytes calldata terms,\n    Transaction calldata tx,\n    bytes32 delegationHash\n  ) public virtual returns (bool);\n}\n"
    },
    "contracts/Delegatable/Delegatable.sol": {
      "content": "pragma solidity ^0.8.13;\n// SPDX-License-Identifier: MIT\nimport \"./TypesAndDecoders.sol\";\nimport \"./caveat-enforcers/CaveatEnforcer.sol\";\n\nabstract contract Delegatable is EIP712Decoder {\n  event DelegationTriggered(address principal, address indexed agent);\n\n  bytes32 public immutable domainHash;\n\n  constructor(string memory contractName, string memory version) {\n    domainHash = getEIP712DomainHash(contractName, version, block.chainid, address(this));\n  }\n\n  // Allows external signers to submit batches of signed invocations for processing.\n  function invoke(SignedInvocation[] calldata signedInvocations) public returns (bool success) {\n    for (uint256 i = 0; i < signedInvocations.length; i++) {\n      SignedInvocation calldata signedInvocation = signedInvocations[i];\n      address invocationSigner = verifyInvocationSignature(signedInvocation);\n      enforceReplayProtection(invocationSigner, signedInvocations[i].invocations.replayProtection);\n      _invoke(signedInvocation.invocations.batch, invocationSigner);\n    }\n  }\n\n  // Allows external contracts to submit batches of invocations for processing.\n  function contractInvoke(Invocation[] calldata batch) public returns (bool) {\n    return _invoke(batch, msg.sender);\n  }\n\n  function _invoke(Invocation[] calldata batch, address sender) private returns (bool success) {\n    for (uint256 x = 0; x < batch.length; x++) {\n      Invocation memory invocation = batch[x];\n      address intendedSender;\n      address canGrant;\n\n      // If there are no delegations, this invocation comes from the signer\n      if (invocation.authority.length == 0) {\n        intendedSender = sender;\n        canGrant = intendedSender;\n      }\n\n      bytes32 authHash = 0x0;\n\n      for (uint256 d = 0; d < invocation.authority.length; d++) {\n        SignedDelegation memory signedDelegation = invocation.authority[d];\n        address delegationSigner = verifyDelegationSignature(signedDelegation);\n\n        // The following statement was add by Kames. Without it won't enforce the first invocation?\n        // TODO: Needs more unit tests\n        require(\n          sender == delegationSigner || intendedSender == delegationSigner,\n          \"invalid-signature\"\n        );\n\n        // Implied sending account is the signer of the first delegation\n        if (d == 0) {\n          intendedSender = delegationSigner;\n          canGrant = intendedSender;\n        }\n\n        require(delegationSigner == canGrant, \"Delegation signer does not match required signer\");\n\n        Delegation memory delegation = signedDelegation.delegation;\n        require(\n          delegation.authority == authHash,\n          \"Delegation authority does not match previous delegation\"\n        );\n\n        // TODO: maybe delegations should have replay protection, at least a nonce (non order dependent),\n        // otherwise once it's revoked, you can't give the exact same permission again.\n        bytes32 delegationHash = GET_SIGNEDDELEGATION_PACKETHASH(signedDelegation);\n\n        // Each delegation can include any number of caveats.\n        // A caveat is any condition that may reject a proposed transaction.\n        // The caveats specify an external contract that is passed the proposed tx,\n        // As well as some extra terms that are used to parameterize the enforcer.\n        for (uint16 y = 0; y < delegation.caveats.length; y++) {\n          CaveatEnforcer enforcer = CaveatEnforcer(delegation.caveats[y].enforcer);\n          bool caveatSuccess = enforcer.enforceCaveat(\n            delegation.caveats[y].terms,\n            invocation.transaction,\n            delegationHash\n          );\n          require(caveatSuccess, \"Caveat rejected\");\n        }\n\n        // Store the hash of this delegation in `authHash`\n        // That way the next delegation can be verified against it.\n        authHash = delegationHash;\n        canGrant = delegation.delegate;\n      }\n\n      // Here we perform the requested invocation.\n      Transaction memory transaction = invocation.transaction;\n\n      require(transaction.to == address(this), \"Invocation target does not match\");\n      emit DelegationTriggered(intendedSender, sender);\n      success = execute(transaction.to, transaction.data, transaction.gasLimit, intendedSender);\n      require(success, \"Delegator execution failed\");\n    }\n  }\n\n  mapping(address => mapping(uint256 => uint256)) public multiNonce;\n\n  function enforceReplayProtection(address intendedSender, ReplayProtection memory protection)\n    private\n  {\n    uint256 queue = protection.queue;\n    uint256 nonce = protection.nonce;\n    require(\n      nonce == (multiNonce[intendedSender][queue] + 1),\n      \"One-at-a-time order enforced. Nonce2 is too small\"\n    );\n    multiNonce[intendedSender][queue] = nonce;\n  }\n\n  function execute(\n    address to,\n    bytes memory data,\n    uint256 gasLimit,\n    address sender\n  ) internal returns (bool success) {\n    bytes memory full = abi.encodePacked(data, sender);\n    assembly {\n      success := call(gasLimit, to, 0, add(full, 0x20), mload(full), 0, 0)\n    }\n  }\n\n  function verifyInvocationSignature(SignedInvocation memory signedInvocation)\n    public\n    view\n    returns (address)\n  {\n    bytes32 sigHash = getInvocationsTypedDataHash(signedInvocation.invocations);\n    address recoveredSignatureSigner = recover(sigHash, signedInvocation.signature);\n    return recoveredSignatureSigner;\n  }\n\n  function verifyDelegationSignature(SignedDelegation memory signedDelegation)\n    public\n    view\n    returns (address)\n  {\n    Delegation memory delegation = signedDelegation.delegation;\n    bytes32 sigHash = getDelegationTypedDataHash(delegation);\n    address recoveredSignatureSigner = recover(sigHash, signedDelegation.signature);\n    return recoveredSignatureSigner;\n  }\n\n  function getDelegationTypedDataHash(Delegation memory delegation) public view returns (bytes32) {\n    bytes32 digest = keccak256(\n      abi.encodePacked(\"\\x19\\x01\", domainHash, GET_DELEGATION_PACKETHASH(delegation))\n    );\n    return digest;\n  }\n\n  function getInvocationsTypedDataHash(Invocations memory invocations)\n    public\n    view\n    returns (bytes32)\n  {\n    bytes32 digest = keccak256(\n      abi.encodePacked(\"\\x19\\x01\", domainHash, GET_INVOCATIONS_PACKETHASH(invocations))\n    );\n    return digest;\n  }\n\n  function getEIP712DomainHash(\n    string memory contractName,\n    string memory version,\n    uint256 chainId,\n    address verifyingContract\n  ) public pure returns (bytes32) {\n    bytes memory encoded = abi.encode(\n      EIP712DOMAIN_TYPEHASH,\n      keccak256(bytes(contractName)),\n      keccak256(bytes(version)),\n      chainId,\n      verifyingContract\n    );\n    return keccak256(encoded);\n  }\n\n  function _msgSender() internal view virtual returns (address sender) {\n    if (msg.sender == address(this)) {\n      bytes memory array = msg.data;\n      uint256 index = msg.data.length;\n      assembly {\n        // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\n        sender := and(mload(add(array, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n      }\n    } else {\n      sender = msg.sender;\n    }\n    return sender;\n  }\n}\n"
    },
    "contracts/Delegatable/TypesAndDecoders.sol": {
      "content": "pragma solidity ^0.8.13;\n// SPDX-License-Identifier: MIT\nimport \"./ECRecovery.sol\";\n\n// BEGIN EIP712 AUTOGENERATED SETUP\nstruct EIP712Domain {\n  string name;\n  string version;\n  uint256 chainId;\n  address verifyingContract;\n}\n\nbytes32 constant EIP712DOMAIN_TYPEHASH = keccak256(\n  \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n);\n\nstruct Invocation {\n  Transaction transaction;\n  SignedDelegation[] authority;\n}\n\nbytes32 constant INVOCATION_TYPEHASH = keccak256(\n  \"Invocation(Transaction transaction,SignedDelegation[] authority)Caveat(address enforcer,bytes terms)Delegation(address delegate,bytes32 authority,Caveat[] caveats)SignedDelegation(Delegation delegation,bytes signature)Transaction(address to,uint256 gasLimit,bytes data)\"\n);\n\nstruct Invocations {\n  Invocation[] batch;\n  ReplayProtection replayProtection;\n}\n\nbytes32 constant INVOCATIONS_TYPEHASH = keccak256(\n  \"Invocations(Invocation[] batch,ReplayProtection replayProtection)Caveat(address enforcer,bytes terms)Delegation(address delegate,bytes32 authority,Caveat[] caveats)Invocation(Transaction transaction,SignedDelegation[] authority)ReplayProtection(uint nonce,uint queue)SignedDelegation(Delegation delegation,bytes signature)Transaction(address to,uint256 gasLimit,bytes data)\"\n);\n\nstruct SignedInvocation {\n  Invocations invocations;\n  bytes signature;\n}\n\nbytes32 constant SIGNEDINVOCATION_TYPEHASH = keccak256(\n  \"SignedInvocation(Invocations invocations,bytes signature)Caveat(address enforcer,bytes terms)Delegation(address delegate,bytes32 authority,Caveat[] caveats)Invocation(Transaction transaction,SignedDelegation[] authority)Invocations(Invocation[] batch,ReplayProtection replayProtection)ReplayProtection(uint nonce,uint queue)SignedDelegation(Delegation delegation,bytes signature)Transaction(address to,uint256 gasLimit,bytes data)\"\n);\n\nstruct Transaction {\n  address to;\n  uint256 gasLimit;\n  bytes data;\n}\n\nbytes32 constant TRANSACTION_TYPEHASH = keccak256(\n  \"Transaction(address to,uint256 gasLimit,bytes data)\"\n);\n\nstruct ReplayProtection {\n  uint256 nonce;\n  uint256 queue;\n}\n\nbytes32 constant REPLAYPROTECTION_TYPEHASH = keccak256(\"ReplayProtection(uint nonce,uint queue)\");\n\nstruct Delegation {\n  address delegate;\n  bytes32 authority;\n  Caveat[] caveats;\n}\n\nbytes32 constant DELEGATION_TYPEHASH = keccak256(\n  \"Delegation(address delegate,bytes32 authority,Caveat[] caveats)Caveat(address enforcer,bytes terms)\"\n);\n\nstruct Caveat {\n  address enforcer;\n  bytes terms;\n}\n\nbytes32 constant CAVEAT_TYPEHASH = keccak256(\"Caveat(address enforcer,bytes terms)\");\n\nstruct SignedDelegation {\n  Delegation delegation;\n  bytes signature;\n}\n\nbytes32 constant SIGNEDDELEGATION_TYPEHASH = keccak256(\n  \"SignedDelegation(Delegation delegation,bytes signature)Caveat(address enforcer,bytes terms)Delegation(address delegate,bytes32 authority,Caveat[] caveats)\"\n);\n\nstruct IntentionToRevoke {\n  bytes32 delegationHash;\n}\n\nbytes32 constant INTENTIONTOREVOKE_TYPEHASH = keccak256(\n  \"IntentionToRevoke(bytes32 delegationHash)\"\n);\n\nstruct SignedIntentionToRevoke {\n  bytes signature;\n  IntentionToRevoke intentionToRevoke;\n}\n\nbytes32 constant SIGNEDINTENTIONTOREVOKE_TYPEHASH = keccak256(\n  \"SignedIntentionToRevoke(bytes signature,IntentionToRevoke intentionToRevoke)IntentionToRevoke(bytes32 delegationHash)\"\n);\n\n// END EIP712 AUTOGENERATED SETUP\n\ncontract EIP712Decoder is ECRecovery {\n  // BEGIN EIP712 AUTOGENERATED BODY. See scripts/typesToCode.js\n\n  function GET_EIP712DOMAIN_PACKETHASH(EIP712Domain memory _input) public pure returns (bytes32) {\n    bytes memory encoded = abi.encode(\n      EIP712DOMAIN_TYPEHASH,\n      _input.name,\n      _input.version,\n      _input.chainId,\n      _input.verifyingContract\n    );\n\n    return keccak256(encoded);\n  }\n\n  function GET_INVOCATION_PACKETHASH(Invocation memory _input) public pure returns (bytes32) {\n    bytes memory encoded = abi.encode(\n      INVOCATION_TYPEHASH,\n      GET_TRANSACTION_PACKETHASH(_input.transaction),\n      GET_SIGNEDDELEGATION_ARRAY_PACKETHASH(_input.authority)\n    );\n\n    return keccak256(encoded);\n  }\n\n  function GET_SIGNEDDELEGATION_ARRAY_PACKETHASH(SignedDelegation[] memory _input)\n    public\n    pure\n    returns (bytes32)\n  {\n    bytes memory encoded;\n    for (uint256 i = 0; i < _input.length; i++) {\n      encoded = bytes.concat(encoded, GET_SIGNEDDELEGATION_PACKETHASH(_input[i]));\n    }\n\n    bytes32 hash = keccak256(encoded);\n    return hash;\n  }\n\n  function GET_INVOCATIONS_PACKETHASH(Invocations memory _input) public pure returns (bytes32) {\n    bytes memory encoded = abi.encode(\n      INVOCATIONS_TYPEHASH,\n      GET_INVOCATION_ARRAY_PACKETHASH(_input.batch),\n      GET_REPLAYPROTECTION_PACKETHASH(_input.replayProtection)\n    );\n\n    return keccak256(encoded);\n  }\n\n  function GET_INVOCATION_ARRAY_PACKETHASH(Invocation[] memory _input)\n    public\n    pure\n    returns (bytes32)\n  {\n    bytes memory encoded;\n    for (uint256 i = 0; i < _input.length; i++) {\n      encoded = bytes.concat(encoded, GET_INVOCATION_PACKETHASH(_input[i]));\n    }\n\n    bytes32 hash = keccak256(encoded);\n    return hash;\n  }\n\n  function GET_SIGNEDINVOCATION_PACKETHASH(SignedInvocation memory _input)\n    public\n    pure\n    returns (bytes32)\n  {\n    bytes memory encoded = abi.encode(\n      SIGNEDINVOCATION_TYPEHASH,\n      GET_INVOCATIONS_PACKETHASH(_input.invocations),\n      keccak256(_input.signature)\n    );\n\n    return keccak256(encoded);\n  }\n\n  function GET_TRANSACTION_PACKETHASH(Transaction memory _input) public pure returns (bytes32) {\n    bytes memory encoded = abi.encode(\n      TRANSACTION_TYPEHASH,\n      _input.to,\n      _input.gasLimit,\n      keccak256(_input.data)\n    );\n\n    return keccak256(encoded);\n  }\n\n  function GET_REPLAYPROTECTION_PACKETHASH(ReplayProtection memory _input)\n    public\n    pure\n    returns (bytes32)\n  {\n    bytes memory encoded = abi.encode(REPLAYPROTECTION_TYPEHASH, _input.nonce, _input.queue);\n\n    return keccak256(encoded);\n  }\n\n  function GET_DELEGATION_PACKETHASH(Delegation memory _input) public pure returns (bytes32) {\n    bytes memory encoded = abi.encode(\n      DELEGATION_TYPEHASH,\n      _input.delegate,\n      _input.authority,\n      GET_CAVEAT_ARRAY_PACKETHASH(_input.caveats)\n    );\n\n    return keccak256(encoded);\n  }\n\n  function GET_CAVEAT_ARRAY_PACKETHASH(Caveat[] memory _input) public pure returns (bytes32) {\n    bytes memory encoded;\n    for (uint256 i = 0; i < _input.length; i++) {\n      encoded = bytes.concat(encoded, GET_CAVEAT_PACKETHASH(_input[i]));\n    }\n\n    bytes32 hash = keccak256(encoded);\n    return hash;\n  }\n\n  function GET_CAVEAT_PACKETHASH(Caveat memory _input) public pure returns (bytes32) {\n    bytes memory encoded = abi.encode(CAVEAT_TYPEHASH, _input.enforcer, keccak256(_input.terms));\n\n    return keccak256(encoded);\n  }\n\n  function GET_SIGNEDDELEGATION_PACKETHASH(SignedDelegation memory _input)\n    public\n    pure\n    returns (bytes32)\n  {\n    bytes memory encoded = abi.encode(\n      SIGNEDDELEGATION_TYPEHASH,\n      GET_DELEGATION_PACKETHASH(_input.delegation),\n      keccak256(_input.signature)\n    );\n\n    return keccak256(encoded);\n  }\n\n  function GET_INTENTIONTOREVOKE_PACKETHASH(IntentionToRevoke memory _input)\n    public\n    pure\n    returns (bytes32)\n  {\n    bytes memory encoded = abi.encode(INTENTIONTOREVOKE_TYPEHASH, _input.delegationHash);\n\n    return keccak256(encoded);\n  }\n\n  function GET_SIGNEDINTENTIONTOREVOKE_PACKETHASH(SignedIntentionToRevoke memory _input)\n    public\n    pure\n    returns (bytes32)\n  {\n    bytes memory encoded = abi.encode(\n      SIGNEDINTENTIONTOREVOKE_TYPEHASH,\n      keccak256(_input.signature),\n      GET_INTENTIONTOREVOKE_PACKETHASH(_input.intentionToRevoke)\n    );\n\n    return keccak256(encoded);\n  }\n  // END EIP712 AUTOGENERATED BODY\n}\n"
    },
    "contracts/Delegatable/ECRecovery.sol": {
      "content": "pragma solidity ^0.8.13;\n\n// SPDX-License-Identifier: MIT\n\ncontract ECRecovery {\n  /**\n   * @dev Recover signer address from a message by using their signature\n   * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\n   * @param sig bytes signature, the signature is generated using web3.eth.sign()\n   */\n  function recover(bytes32 hash, bytes memory sig) internal pure returns (address) {\n    bytes32 r;\n    bytes32 s;\n    uint8 v;\n\n    //Check the signature length\n    if (sig.length != 65) {\n      return (address(0));\n    }\n\n    // Divide the signature in r, s and v variables\n    assembly {\n      r := mload(add(sig, 32))\n      s := mload(add(sig, 64))\n      v := byte(0, mload(add(sig, 96)))\n    }\n    // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\n    if (v < 27) {\n      v += 27;\n    }\n\n    // If the version is correct return the signer address\n    if (v != 27 && v != 28) {\n      return (address(0));\n    } else {\n      return ecrecover(hash, v, r, s);\n    }\n  }\n}\n"
    },
    "contracts/Delegatable/caveat-enforcers/RevocationEnforcer.sol": {
      "content": "pragma solidity ^0.8.13;\n//SPDX-License-Identifier: MIT\n\nimport \"./CaveatEnforcer.sol\";\nimport \"../Delegatable.sol\";\n\nabstract contract RevocationEnforcer is CaveatEnforcer, Delegatable {\n  mapping(bytes32 => bool) isRevoked;\n\n  function enforceCaveat(\n    bytes calldata terms,\n    Transaction calldata transaction,\n    bytes32 delegationHash\n  ) public virtual override returns (bool) {\n    require(!isRevoked[delegationHash], \"Delegation has been revoked\");\n    return true;\n  }\n\n  function revokeDelegation(\n    SignedDelegation calldata signedDelegation,\n    SignedIntentionToRevoke calldata signedIntentionToRevoke\n  ) public {\n    address signer = verifyDelegationSignature(signedDelegation);\n    address revocationSigner = verifyIntentionToRevokeSignature(signedIntentionToRevoke);\n    require(signer == revocationSigner, \"Only the signer can revoke a delegation\");\n\n    bytes32 delegationHash = GET_SIGNEDDELEGATION_PACKETHASH(signedDelegation);\n    isRevoked[delegationHash] = true;\n  }\n\n  function verifyIntentionToRevokeSignature(SignedIntentionToRevoke memory signedIntentionToRevoke)\n    public\n    view\n    returns (address)\n  {\n    IntentionToRevoke memory intentionToRevoke = signedIntentionToRevoke.intentionToRevoke;\n    bytes32 sigHash = getIntentionToRevokeTypedDataHash(intentionToRevoke);\n    address recoveredSignatureSigner = recover(sigHash, signedIntentionToRevoke.signature);\n    return recoveredSignatureSigner;\n  }\n\n  function getIntentionToRevokeTypedDataHash(IntentionToRevoke memory intentionToRevoke)\n    public\n    view\n    returns (bytes32)\n  {\n    bytes32 digest = keccak256(\n      abi.encodePacked(\"\\x19\\x01\", domainHash, GET_INTENTIONTOREVOKE_PACKETHASH(intentionToRevoke))\n    );\n    return digest;\n  }\n\n  /**\n   * This is boilerplate that must be added to any Delegatable contract if it also inherits\n   * from another class that also implements _msgSender().\n   */\n  function _msgSender() internal view override(Delegatable) returns (address sender) {\n    if (msg.sender == address(this)) {\n      bytes memory array = msg.data;\n      uint256 index = msg.data.length;\n      assembly {\n        // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\n        sender := and(mload(add(array, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n      }\n    } else {\n      sender = msg.sender;\n    }\n    return sender;\n  }\n}\n"
    },
    "contracts/Delegatable/caveat-enforcers/ExpirationEnforcer.sol": {
      "content": "pragma solidity ^0.8.13;\n//SPDX-License-Identifier: MIT\n\nimport \"./CaveatEnforcer.sol\";\n\ncontract ExpirationEnforcer is CaveatEnforcer {\n  function enforceCaveat(\n    bytes calldata terms,\n    Transaction calldata _transaction,\n    bytes32 _delegationHash\n  ) public virtual override returns (bool) {\n    uint256 limit = bytesToUint(terms);\n    require(limit > block.timestamp, \"Expiration has passed\");\n    return true;\n  }\n\n  function bytesToUint(bytes memory b) internal pure returns (uint256) {\n    uint256 number;\n    for (uint256 i = 0; i < b.length; i++) {\n      number = number + uint256(uint8(b[i])) * (2**(8 * (b.length - (i + 1))));\n    }\n    return number;\n  }\n}\n"
    },
    "contracts/Delegatable/caveat-enforcers/AllowedMethods.sol": {
      "content": "pragma solidity ^0.8.13;\n//SPDX-License-Identifier: MIT\n\nimport \"./CaveatEnforcer.sol\";\n\ncontract AllowedMethodsEnforcer is CaveatEnforcer {\n  function enforceCaveat(\n    bytes calldata terms,\n    Transaction calldata transaction,\n    bytes32 delegationHash\n  ) public pure override returns (bool) {\n    bytes4 targetSig = bytes4(transaction.data[0:4]);\n\n    for (uint256 i = 0; i < terms.length; i += 4) {\n      bytes4 allowedSig = bytes4(terms[i:i + 4]);\n      if (allowedSig == targetSig) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n}\n"
    },
    "contracts/Delegatable/caveat-enforcers/AbstractRevocationEnforcer.sol": {
      "content": "pragma solidity ^0.8.13;\n//SPDX-License-Identifier: MIT\nimport \"./CaveatEnforcer.sol\";\nimport \"../Delegatable.sol\";\n\nabstract contract AbstractRevocationEnforcer is CaveatEnforcer, Delegatable {\n  constructor(string memory name) Delegatable(name, \"1\") {}\n\n  mapping(bytes32 => bool) isRevoked;\n\n  function enforceCaveat(\n    bytes calldata terms,\n    Transaction calldata transaction,\n    bytes32 delegationHash\n  ) public override returns (bool) {\n    require(!isRevoked[delegationHash], \"Delegation has been revoked\");\n    return true;\n  }\n\n  function revokeDelegation(\n    SignedDelegation calldata signedDelegation,\n    SignedIntentionToRevoke calldata signedIntentionToRevoke\n  ) public {\n    address signer = verifyDelegationSignature(signedDelegation);\n    address revocationSigner = verifyIntentionToRevokeSignature(signedIntentionToRevoke);\n    require(signer == revocationSigner, \"Only the signer can revoke a delegation\");\n\n    bytes32 delegationHash = GET_SIGNEDDELEGATION_PACKETHASH(signedDelegation);\n    isRevoked[delegationHash] = true;\n  }\n\n  function verifyIntentionToRevokeSignature(SignedIntentionToRevoke memory signedIntentionToRevoke)\n    public\n    view\n    returns (address)\n  {\n    IntentionToRevoke memory intentionToRevoke = signedIntentionToRevoke.intentionToRevoke;\n    bytes32 sigHash = getIntentionToRevokeTypedDataHash(intentionToRevoke);\n    address recoveredSignatureSigner = recover(sigHash, signedIntentionToRevoke.signature);\n    return recoveredSignatureSigner;\n  }\n\n  function getIntentionToRevokeTypedDataHash(IntentionToRevoke memory intentionToRevoke)\n    public\n    view\n    returns (bytes32)\n  {\n    bytes32 digest = keccak256(\n      abi.encodePacked(\"\\x19\\x01\", domainHash, GET_INTENTIONTOREVOKE_PACKETHASH(intentionToRevoke))\n    );\n    return digest;\n  }\n}\n"
    },
    "contracts/Delegatable/caveat-enforcers/LimitedCalls.sol": {
      "content": "pragma solidity ^0.8.13;\n//SPDX-License-Identifier: MIT\n\nimport \"../Delegatable.sol\";\n\ncontract LimitedCallsEnforcer is CaveatEnforcer {\n  mapping(address => mapping(bytes32 => uint256)) callCounts;\n\n  function enforceCaveat(\n    bytes calldata terms,\n    Transaction calldata _transaction,\n    bytes32 delegationHash\n  ) public override returns (bool) {\n    uint256 limit = bytesToUint(terms);\n    uint256 callCount = callCounts[msg.sender][delegationHash];\n\n    require(callCount < limit, \"Call limit exceeded\");\n    callCounts[msg.sender][delegationHash]++;\n    return true;\n  }\n\n  function bytesToUint(bytes memory b) internal pure returns (uint256) {\n    uint256 number;\n    for (uint256 i = 0; i < b.length; i++) {\n      number = number + uint256(uint8(b[i])) * (2**(8 * (b.length - (i + 1))));\n    }\n    return number;\n  }\n}\n"
    },
    "contracts/Delegatable/caveat-enforcers/ERC20Allowance.sol": {
      "content": "pragma solidity ^0.8.13;\n//SPDX-License-Identifier: MIT\n\nimport \"../Delegatable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract ERC20Allowance is CaveatEnforcer {\n  mapping(address => mapping(bytes32 => uint256)) allowances;\n\n  function enforceCaveat(\n    bytes calldata terms,\n    Transaction calldata transaction,\n    bytes32 delegationHash\n  ) public override returns (bool) {\n    // Enforce this is an ERC20 transfer:\n    bytes4 targetSig = bytes4(transaction.data[0:4]);\n    bytes4 allowedSig = bytes4(0xa9059cbb);\n\n    // Enforce the specified allowance:\n    IERC20 token = IERC20(transaction.to);\n\n    uint256 limit = bytesToUint(terms);\n    uint256 spent = allowances[msg.sender][delegationHash];\n\n    require(spent < limit, \"Allowance exceeded\");\n    allowances[msg.sender][delegationHash]++;\n    return true;\n  }\n\n  function bytesToUint(bytes memory b) internal pure returns (uint256) {\n    uint256 number;\n    for (uint256 i = 0; i < b.length; i++) {\n      number = number + uint256(uint8(b[i])) * (2**(8 * (b.length - (i + 1))));\n    }\n    return number;\n  }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "contracts/libraries/twab/LiquidatorLib.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.15;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\nimport \"./ExtendedSafeCastLib.sol\";\nimport \"./CpmmLib.sol\";\n\nlibrary LiquidatorLib {\n  using SafeMath for uint256;\n  using SafeCast for uint256;\n  using ExtendedSafeCastLib for uint256;\n\n  function computeExactAmountIn(\n    uint256 _reserveA,\n    uint256 _reserveB,\n    uint256 _availableBalance,\n    uint256 _amountOut,\n    uint32 _swapMultiplier,\n    uint32 _liquidityFraction\n  ) internal pure returns (uint256) {\n    require(_amountOut <= _availableBalance, \"insuff balance\");\n    (uint256 reserveA, uint256 reserveB) = prepareSwap(_reserveA, _reserveB, _availableBalance);\n    return CpmmLib.getAmountIn(_amountOut, reserveA, reserveB);\n  }\n\n  function computeExactAmountOut(\n    uint256 _reserveA,\n    uint256 _reserveB,\n    uint256 availableBalance,\n    uint256 amountIn,\n    uint32 _swapMultiplier,\n    uint32 _liquidityFraction\n  ) internal pure returns (uint256) {\n    (uint256 reserveA, uint256 reserveB) = prepareSwap(_reserveA, _reserveB, availableBalance);\n    uint256 amountOut = CpmmLib.getAmountOut(amountIn, reserveA, reserveB);\n    require(amountOut <= availableBalance, \"insuff balance\");\n    return amountOut;\n  }\n\n  function prepareSwap(\n    uint256 _reserveA,\n    uint256 _reserveB,\n    uint256 _availableBalance\n  ) internal pure returns (uint256 reserveA, uint256 reserveB) {\n    // swap back yield\n    uint256 wantAmount = CpmmLib.getAmountOut(_availableBalance, _reserveA, _reserveB);\n    reserveB = _reserveB.sub(wantAmount);\n    reserveA = _reserveA.add(_availableBalance);\n  }\n\n  function _finishSwap(\n    uint256 _reserveA,\n    uint256 _reserveB,\n    uint256 _availableBalance,\n    uint256 _reserveBOut,\n    uint32 _swapMultiplier,\n    uint32 _liquidityFraction\n  ) internal view returns (uint256 reserveA, uint256 reserveB) {\n    // apply the additional swap\n    uint256 extraReserveBOut = (_reserveBOut * _swapMultiplier) / 1e9;\n    uint256 extraReserveAIn = CpmmLib.getAmountIn(extraReserveBOut, _reserveA, _reserveB);\n    reserveA = _reserveA.add(extraReserveAIn);\n    reserveB = _reserveB.sub(extraReserveBOut);\n\n    // now, we want to ensure that the accrued yield is always a small fraction of virtual LP position.\n    uint256 multiplier = _availableBalance / (reserveB * _liquidityFraction);\n    reserveA = (reserveA * multiplier) / 1e9;\n    reserveB = (reserveB * multiplier) / 1e9;\n  }\n\n  function swapExactAmountIn(\n    uint256 _reserveA,\n    uint256 _reserveB,\n    uint256 _availableBalance,\n    uint256 _amountIn,\n    uint32 _swapMultiplier,\n    uint32 _liquidityFraction\n  )\n    internal\n    view\n    returns (\n      uint256 reserveA,\n      uint256 reserveB,\n      uint256 amountOut\n    )\n  {\n    require(_availableBalance > 0, \"Whoops! no funds available\");\n\n    (reserveA, reserveB) = prepareSwap(_reserveA, _reserveB, _availableBalance);\n\n    // do swap\n    amountOut = CpmmLib.getAmountOut(_amountIn, reserveB, reserveA);\n    require(amountOut <= _availableBalance, \"Whoops! have exceeds available\");\n    reserveB = reserveB.add(_amountIn);\n    reserveA = reserveA.sub(amountOut);\n\n    (reserveA, reserveB) = _finishSwap(\n      reserveA,\n      reserveB,\n      _availableBalance,\n      amountOut,\n      _swapMultiplier,\n      _liquidityFraction\n    );\n  }\n\n  function swapExactAmountOut(\n    uint256 _reserveA,\n    uint256 _reserveB,\n    uint256 _availableBalance,\n    uint256 _amountOut,\n    uint32 _swapMultiplier,\n    uint32 _liquidityFraction\n  )\n    internal\n    view\n    returns (\n      uint256 reserveA,\n      uint256 reserveB,\n      uint256 amountIn\n    )\n  {\n    require(_availableBalance > 0, \"Whoops! no funds available\");\n    require(_amountOut <= _availableBalance, \"Whoops! have exceeds available\");\n\n    (reserveA, reserveB) = prepareSwap(_reserveA, _reserveB, _availableBalance);\n\n    // do swap\n    amountIn = CpmmLib.getAmountIn(_amountOut, reserveA, reserveB);\n    reserveB = reserveB.add(amountIn);\n    reserveA = reserveA.sub(_amountOut);\n\n    (reserveA, reserveB) = _finishSwap(\n      reserveA,\n      reserveB,\n      _availableBalance,\n      _amountOut,\n      _swapMultiplier,\n      _liquidityFraction\n    );\n  }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeCast.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/SafeCast.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n *\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\n * all math on `uint256` and `int256` and then downcasting.\n */\nlibrary SafeCast {\n    /**\n     * @dev Returns the downcasted uint248 from uint256, reverting on\n     * overflow (when the input is greater than largest uint248).\n     *\n     * Counterpart to Solidity's `uint248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint248(uint256 value) internal pure returns (uint248) {\n        require(value <= type(uint248).max, \"SafeCast: value doesn't fit in 248 bits\");\n        return uint248(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint240 from uint256, reverting on\n     * overflow (when the input is greater than largest uint240).\n     *\n     * Counterpart to Solidity's `uint240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint240(uint256 value) internal pure returns (uint240) {\n        require(value <= type(uint240).max, \"SafeCast: value doesn't fit in 240 bits\");\n        return uint240(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint232 from uint256, reverting on\n     * overflow (when the input is greater than largest uint232).\n     *\n     * Counterpart to Solidity's `uint232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint232(uint256 value) internal pure returns (uint232) {\n        require(value <= type(uint232).max, \"SafeCast: value doesn't fit in 232 bits\");\n        return uint232(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     *\n     * _Available since v4.2._\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        require(value <= type(uint224).max, \"SafeCast: value doesn't fit in 224 bits\");\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint216 from uint256, reverting on\n     * overflow (when the input is greater than largest uint216).\n     *\n     * Counterpart to Solidity's `uint216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint216(uint256 value) internal pure returns (uint216) {\n        require(value <= type(uint216).max, \"SafeCast: value doesn't fit in 216 bits\");\n        return uint216(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint208 from uint256, reverting on\n     * overflow (when the input is greater than largest uint208).\n     *\n     * Counterpart to Solidity's `uint208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint208(uint256 value) internal pure returns (uint208) {\n        require(value <= type(uint208).max, \"SafeCast: value doesn't fit in 208 bits\");\n        return uint208(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint200 from uint256, reverting on\n     * overflow (when the input is greater than largest uint200).\n     *\n     * Counterpart to Solidity's `uint200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint200(uint256 value) internal pure returns (uint200) {\n        require(value <= type(uint200).max, \"SafeCast: value doesn't fit in 200 bits\");\n        return uint200(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint192 from uint256, reverting on\n     * overflow (when the input is greater than largest uint192).\n     *\n     * Counterpart to Solidity's `uint192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint192(uint256 value) internal pure returns (uint192) {\n        require(value <= type(uint192).max, \"SafeCast: value doesn't fit in 192 bits\");\n        return uint192(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint184 from uint256, reverting on\n     * overflow (when the input is greater than largest uint184).\n     *\n     * Counterpart to Solidity's `uint184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint184(uint256 value) internal pure returns (uint184) {\n        require(value <= type(uint184).max, \"SafeCast: value doesn't fit in 184 bits\");\n        return uint184(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint176 from uint256, reverting on\n     * overflow (when the input is greater than largest uint176).\n     *\n     * Counterpart to Solidity's `uint176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint176(uint256 value) internal pure returns (uint176) {\n        require(value <= type(uint176).max, \"SafeCast: value doesn't fit in 176 bits\");\n        return uint176(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint168 from uint256, reverting on\n     * overflow (when the input is greater than largest uint168).\n     *\n     * Counterpart to Solidity's `uint168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint168(uint256 value) internal pure returns (uint168) {\n        require(value <= type(uint168).max, \"SafeCast: value doesn't fit in 168 bits\");\n        return uint168(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint160 from uint256, reverting on\n     * overflow (when the input is greater than largest uint160).\n     *\n     * Counterpart to Solidity's `uint160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint160(uint256 value) internal pure returns (uint160) {\n        require(value <= type(uint160).max, \"SafeCast: value doesn't fit in 160 bits\");\n        return uint160(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint152 from uint256, reverting on\n     * overflow (when the input is greater than largest uint152).\n     *\n     * Counterpart to Solidity's `uint152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint152(uint256 value) internal pure returns (uint152) {\n        require(value <= type(uint152).max, \"SafeCast: value doesn't fit in 152 bits\");\n        return uint152(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint144 from uint256, reverting on\n     * overflow (when the input is greater than largest uint144).\n     *\n     * Counterpart to Solidity's `uint144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint144(uint256 value) internal pure returns (uint144) {\n        require(value <= type(uint144).max, \"SafeCast: value doesn't fit in 144 bits\");\n        return uint144(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint136 from uint256, reverting on\n     * overflow (when the input is greater than largest uint136).\n     *\n     * Counterpart to Solidity's `uint136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint136(uint256 value) internal pure returns (uint136) {\n        require(value <= type(uint136).max, \"SafeCast: value doesn't fit in 136 bits\");\n        return uint136(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        require(value <= type(uint128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint120 from uint256, reverting on\n     * overflow (when the input is greater than largest uint120).\n     *\n     * Counterpart to Solidity's `uint120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint120(uint256 value) internal pure returns (uint120) {\n        require(value <= type(uint120).max, \"SafeCast: value doesn't fit in 120 bits\");\n        return uint120(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint112 from uint256, reverting on\n     * overflow (when the input is greater than largest uint112).\n     *\n     * Counterpart to Solidity's `uint112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint112(uint256 value) internal pure returns (uint112) {\n        require(value <= type(uint112).max, \"SafeCast: value doesn't fit in 112 bits\");\n        return uint112(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint104 from uint256, reverting on\n     * overflow (when the input is greater than largest uint104).\n     *\n     * Counterpart to Solidity's `uint104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint104(uint256 value) internal pure returns (uint104) {\n        require(value <= type(uint104).max, \"SafeCast: value doesn't fit in 104 bits\");\n        return uint104(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     *\n     * _Available since v4.2._\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        require(value <= type(uint96).max, \"SafeCast: value doesn't fit in 96 bits\");\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint88 from uint256, reverting on\n     * overflow (when the input is greater than largest uint88).\n     *\n     * Counterpart to Solidity's `uint88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint88(uint256 value) internal pure returns (uint88) {\n        require(value <= type(uint88).max, \"SafeCast: value doesn't fit in 88 bits\");\n        return uint88(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint80 from uint256, reverting on\n     * overflow (when the input is greater than largest uint80).\n     *\n     * Counterpart to Solidity's `uint80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint80(uint256 value) internal pure returns (uint80) {\n        require(value <= type(uint80).max, \"SafeCast: value doesn't fit in 80 bits\");\n        return uint80(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint72 from uint256, reverting on\n     * overflow (when the input is greater than largest uint72).\n     *\n     * Counterpart to Solidity's `uint72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint72(uint256 value) internal pure returns (uint72) {\n        require(value <= type(uint72).max, \"SafeCast: value doesn't fit in 72 bits\");\n        return uint72(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        require(value <= type(uint64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint56 from uint256, reverting on\n     * overflow (when the input is greater than largest uint56).\n     *\n     * Counterpart to Solidity's `uint56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint56(uint256 value) internal pure returns (uint56) {\n        require(value <= type(uint56).max, \"SafeCast: value doesn't fit in 56 bits\");\n        return uint56(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint48 from uint256, reverting on\n     * overflow (when the input is greater than largest uint48).\n     *\n     * Counterpart to Solidity's `uint48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint48(uint256 value) internal pure returns (uint48) {\n        require(value <= type(uint48).max, \"SafeCast: value doesn't fit in 48 bits\");\n        return uint48(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint40 from uint256, reverting on\n     * overflow (when the input is greater than largest uint40).\n     *\n     * Counterpart to Solidity's `uint40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint40(uint256 value) internal pure returns (uint40) {\n        require(value <= type(uint40).max, \"SafeCast: value doesn't fit in 40 bits\");\n        return uint40(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        require(value <= type(uint32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint24 from uint256, reverting on\n     * overflow (when the input is greater than largest uint24).\n     *\n     * Counterpart to Solidity's `uint24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint24(uint256 value) internal pure returns (uint24) {\n        require(value <= type(uint24).max, \"SafeCast: value doesn't fit in 24 bits\");\n        return uint24(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        require(value <= type(uint16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        require(value <= type(uint8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     *\n     * _Available since v3.0._\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        require(value >= 0, \"SafeCast: value must be positive\");\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int248 from int256, reverting on\n     * overflow (when the input is less than smallest int248 or\n     * greater than largest int248).\n     *\n     * Counterpart to Solidity's `int248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt248(int256 value) internal pure returns (int248) {\n        require(value >= type(int248).min && value <= type(int248).max, \"SafeCast: value doesn't fit in 248 bits\");\n        return int248(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int240 from int256, reverting on\n     * overflow (when the input is less than smallest int240 or\n     * greater than largest int240).\n     *\n     * Counterpart to Solidity's `int240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt240(int256 value) internal pure returns (int240) {\n        require(value >= type(int240).min && value <= type(int240).max, \"SafeCast: value doesn't fit in 240 bits\");\n        return int240(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int232 from int256, reverting on\n     * overflow (when the input is less than smallest int232 or\n     * greater than largest int232).\n     *\n     * Counterpart to Solidity's `int232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt232(int256 value) internal pure returns (int232) {\n        require(value >= type(int232).min && value <= type(int232).max, \"SafeCast: value doesn't fit in 232 bits\");\n        return int232(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int224 from int256, reverting on\n     * overflow (when the input is less than smallest int224 or\n     * greater than largest int224).\n     *\n     * Counterpart to Solidity's `int224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt224(int256 value) internal pure returns (int224) {\n        require(value >= type(int224).min && value <= type(int224).max, \"SafeCast: value doesn't fit in 224 bits\");\n        return int224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int216 from int256, reverting on\n     * overflow (when the input is less than smallest int216 or\n     * greater than largest int216).\n     *\n     * Counterpart to Solidity's `int216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt216(int256 value) internal pure returns (int216) {\n        require(value >= type(int216).min && value <= type(int216).max, \"SafeCast: value doesn't fit in 216 bits\");\n        return int216(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int208 from int256, reverting on\n     * overflow (when the input is less than smallest int208 or\n     * greater than largest int208).\n     *\n     * Counterpart to Solidity's `int208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt208(int256 value) internal pure returns (int208) {\n        require(value >= type(int208).min && value <= type(int208).max, \"SafeCast: value doesn't fit in 208 bits\");\n        return int208(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int200 from int256, reverting on\n     * overflow (when the input is less than smallest int200 or\n     * greater than largest int200).\n     *\n     * Counterpart to Solidity's `int200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt200(int256 value) internal pure returns (int200) {\n        require(value >= type(int200).min && value <= type(int200).max, \"SafeCast: value doesn't fit in 200 bits\");\n        return int200(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int192 from int256, reverting on\n     * overflow (when the input is less than smallest int192 or\n     * greater than largest int192).\n     *\n     * Counterpart to Solidity's `int192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt192(int256 value) internal pure returns (int192) {\n        require(value >= type(int192).min && value <= type(int192).max, \"SafeCast: value doesn't fit in 192 bits\");\n        return int192(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int184 from int256, reverting on\n     * overflow (when the input is less than smallest int184 or\n     * greater than largest int184).\n     *\n     * Counterpart to Solidity's `int184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt184(int256 value) internal pure returns (int184) {\n        require(value >= type(int184).min && value <= type(int184).max, \"SafeCast: value doesn't fit in 184 bits\");\n        return int184(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int176 from int256, reverting on\n     * overflow (when the input is less than smallest int176 or\n     * greater than largest int176).\n     *\n     * Counterpart to Solidity's `int176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt176(int256 value) internal pure returns (int176) {\n        require(value >= type(int176).min && value <= type(int176).max, \"SafeCast: value doesn't fit in 176 bits\");\n        return int176(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int168 from int256, reverting on\n     * overflow (when the input is less than smallest int168 or\n     * greater than largest int168).\n     *\n     * Counterpart to Solidity's `int168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt168(int256 value) internal pure returns (int168) {\n        require(value >= type(int168).min && value <= type(int168).max, \"SafeCast: value doesn't fit in 168 bits\");\n        return int168(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int160 from int256, reverting on\n     * overflow (when the input is less than smallest int160 or\n     * greater than largest int160).\n     *\n     * Counterpart to Solidity's `int160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt160(int256 value) internal pure returns (int160) {\n        require(value >= type(int160).min && value <= type(int160).max, \"SafeCast: value doesn't fit in 160 bits\");\n        return int160(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int152 from int256, reverting on\n     * overflow (when the input is less than smallest int152 or\n     * greater than largest int152).\n     *\n     * Counterpart to Solidity's `int152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt152(int256 value) internal pure returns (int152) {\n        require(value >= type(int152).min && value <= type(int152).max, \"SafeCast: value doesn't fit in 152 bits\");\n        return int152(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int144 from int256, reverting on\n     * overflow (when the input is less than smallest int144 or\n     * greater than largest int144).\n     *\n     * Counterpart to Solidity's `int144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt144(int256 value) internal pure returns (int144) {\n        require(value >= type(int144).min && value <= type(int144).max, \"SafeCast: value doesn't fit in 144 bits\");\n        return int144(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int136 from int256, reverting on\n     * overflow (when the input is less than smallest int136 or\n     * greater than largest int136).\n     *\n     * Counterpart to Solidity's `int136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt136(int256 value) internal pure returns (int136) {\n        require(value >= type(int136).min && value <= type(int136).max, \"SafeCast: value doesn't fit in 136 bits\");\n        return int136(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt128(int256 value) internal pure returns (int128) {\n        require(value >= type(int128).min && value <= type(int128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return int128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int120 from int256, reverting on\n     * overflow (when the input is less than smallest int120 or\n     * greater than largest int120).\n     *\n     * Counterpart to Solidity's `int120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt120(int256 value) internal pure returns (int120) {\n        require(value >= type(int120).min && value <= type(int120).max, \"SafeCast: value doesn't fit in 120 bits\");\n        return int120(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int112 from int256, reverting on\n     * overflow (when the input is less than smallest int112 or\n     * greater than largest int112).\n     *\n     * Counterpart to Solidity's `int112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt112(int256 value) internal pure returns (int112) {\n        require(value >= type(int112).min && value <= type(int112).max, \"SafeCast: value doesn't fit in 112 bits\");\n        return int112(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int104 from int256, reverting on\n     * overflow (when the input is less than smallest int104 or\n     * greater than largest int104).\n     *\n     * Counterpart to Solidity's `int104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt104(int256 value) internal pure returns (int104) {\n        require(value >= type(int104).min && value <= type(int104).max, \"SafeCast: value doesn't fit in 104 bits\");\n        return int104(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int96 from int256, reverting on\n     * overflow (when the input is less than smallest int96 or\n     * greater than largest int96).\n     *\n     * Counterpart to Solidity's `int96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt96(int256 value) internal pure returns (int96) {\n        require(value >= type(int96).min && value <= type(int96).max, \"SafeCast: value doesn't fit in 96 bits\");\n        return int96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int88 from int256, reverting on\n     * overflow (when the input is less than smallest int88 or\n     * greater than largest int88).\n     *\n     * Counterpart to Solidity's `int88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt88(int256 value) internal pure returns (int88) {\n        require(value >= type(int88).min && value <= type(int88).max, \"SafeCast: value doesn't fit in 88 bits\");\n        return int88(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int80 from int256, reverting on\n     * overflow (when the input is less than smallest int80 or\n     * greater than largest int80).\n     *\n     * Counterpart to Solidity's `int80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt80(int256 value) internal pure returns (int80) {\n        require(value >= type(int80).min && value <= type(int80).max, \"SafeCast: value doesn't fit in 80 bits\");\n        return int80(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int72 from int256, reverting on\n     * overflow (when the input is less than smallest int72 or\n     * greater than largest int72).\n     *\n     * Counterpart to Solidity's `int72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt72(int256 value) internal pure returns (int72) {\n        require(value >= type(int72).min && value <= type(int72).max, \"SafeCast: value doesn't fit in 72 bits\");\n        return int72(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt64(int256 value) internal pure returns (int64) {\n        require(value >= type(int64).min && value <= type(int64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return int64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int56 from int256, reverting on\n     * overflow (when the input is less than smallest int56 or\n     * greater than largest int56).\n     *\n     * Counterpart to Solidity's `int56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt56(int256 value) internal pure returns (int56) {\n        require(value >= type(int56).min && value <= type(int56).max, \"SafeCast: value doesn't fit in 56 bits\");\n        return int56(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int48 from int256, reverting on\n     * overflow (when the input is less than smallest int48 or\n     * greater than largest int48).\n     *\n     * Counterpart to Solidity's `int48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt48(int256 value) internal pure returns (int48) {\n        require(value >= type(int48).min && value <= type(int48).max, \"SafeCast: value doesn't fit in 48 bits\");\n        return int48(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int40 from int256, reverting on\n     * overflow (when the input is less than smallest int40 or\n     * greater than largest int40).\n     *\n     * Counterpart to Solidity's `int40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt40(int256 value) internal pure returns (int40) {\n        require(value >= type(int40).min && value <= type(int40).max, \"SafeCast: value doesn't fit in 40 bits\");\n        return int40(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt32(int256 value) internal pure returns (int32) {\n        require(value >= type(int32).min && value <= type(int32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return int32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int24 from int256, reverting on\n     * overflow (when the input is less than smallest int24 or\n     * greater than largest int24).\n     *\n     * Counterpart to Solidity's `int24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt24(int256 value) internal pure returns (int24) {\n        require(value >= type(int24).min && value <= type(int24).max, \"SafeCast: value doesn't fit in 24 bits\");\n        return int24(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt16(int256 value) internal pure returns (int16) {\n        require(value >= type(int16).min && value <= type(int16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return int16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt8(int256 value) internal pure returns (int8) {\n        require(value >= type(int8).min && value <= type(int8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return int8(value);\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     *\n     * _Available since v3.0._\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        require(value <= uint256(type(int256).max), \"SafeCast: value doesn't fit in an int256\");\n        return int256(value);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "contracts/libraries/twab/ExtendedSafeCastLib.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.15;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n *\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\n * all math on `uint256` and `int256` and then downcasting.\n */\nlibrary ExtendedSafeCastLib {\n  /**\n   * @dev Returns the downcasted uint104 from uint256, reverting on\n   * overflow (when the input is greater than largest uint104).\n   *\n   * Counterpart to Solidity's `uint104` operator.\n   *\n   * Requirements:\n   *\n   * - input must fit into 104 bits\n   */\n  function toUint104(uint256 _value) internal pure returns (uint104) {\n    require(_value <= type(uint104).max, \"SafeCast: value doesn't fit in 104 bits\");\n    return uint104(_value);\n  }\n\n  /**\n   * @dev Returns the downcasted uint208 from uint256, reverting on\n   * overflow (when the input is greater than largest uint208).\n   *\n   * Counterpart to Solidity's `uint208` operator.\n   *\n   * Requirements:\n   *\n   * - input must fit into 208 bits\n   */\n  function toUint208(uint256 _value) internal pure returns (uint208) {\n    require(_value <= type(uint208).max, \"SafeCast: value doesn't fit in 208 bits\");\n    return uint208(_value);\n  }\n\n  /**\n   * @dev Returns the downcasted uint224 from uint256, reverting on\n   * overflow (when the input is greater than largest uint224).\n   *\n   * Counterpart to Solidity's `uint224` operator.\n   *\n   * Requirements:\n   *\n   * - input must fit into 224 bits\n   */\n  function toUint224(uint256 _value) internal pure returns (uint224) {\n    require(_value <= type(uint224).max, \"SafeCast: value doesn't fit in 224 bits\");\n    return uint224(_value);\n  }\n\n  /**\n   * @dev Returns the downcasted uint192 from uint256, reverting on\n   * overflow (when the input is greater than largest uint192).\n   *\n   * Counterpart to Solidity's `uint192` operator.\n   *\n   * Requirements:\n   *\n   * - input must fit into 224 bits\n   */\n  function toUint192(uint256 value) internal pure returns (uint192) {\n    require(value <= type(uint192).max, \"SafeCast: value doesn't fit in 192 bits\");\n    return uint192(value);\n  }\n}\n"
    },
    "contracts/libraries/twab/CpmmLib.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.15;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\nlibrary CpmmLib {\n  using SafeMath for uint256;\n\n  // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\n  function getAmountOut(\n    uint256 amountIn,\n    uint256 reserveIn,\n    uint256 reserveOut\n  ) internal pure returns (uint256 amountOut) {\n    // require(amountIn > 0, \"CpmmLib: INSUFFICIENT_INPUT_AMOUNT\");\n    require(reserveIn > 0 && reserveOut > 0, \"CpmmLib: INSUFFICIENT_LIQUIDITY\");\n    uint256 numerator = amountIn.mul(reserveOut);\n    uint256 denominator = reserveIn.add(amountIn);\n    return numerator / denominator;\n  }\n\n  // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\n  function getAmountIn(\n    uint256 amountOut,\n    uint256 reserveIn,\n    uint256 reserveOut\n  ) internal pure returns (uint256 amountIn) {\n    // require(amountOut > 0, \"CpmmLib: INSUFFICIENT_OUTPUT_AMOUNT\");\n    require(reserveIn > 0 && reserveOut > 0, \"CpmmLib: INSUFFICIENT_LIQUIDITY\");\n    uint256 numerator = reserveIn.mul(amountOut);\n    uint256 denominator = reserveOut.sub(amountOut);\n    amountIn = (numerator / denominator);\n  }\n}\n"
    },
    "contracts/libraries/twab/TwabLib.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.15;\n\nimport \"./ExtendedSafeCastLib.sol\";\nimport \"./OverflowSafeComparatorLib.sol\";\nimport \"./RingBufferLib.sol\";\nimport \"./ObservationLib.sol\";\n\n/**\n  * @title  PoolTogether V4 TwabLib (Library)\n  * @author PoolTogether Inc Team\n  * @dev    Time-Weighted Average Balance Library for ERC20 tokens.\n  * @notice This TwabLib adds on-chain historical lookups to a user(s) time-weighted average balance.\n            Each user is mapped to an Account struct containing the TWAB history (ring buffer) and\n            ring buffer parameters. Every token.transfer() creates a new TWAB checkpoint. The new TWAB\n            checkpoint is stored in the circular ring buffer, as either a new checkpoint or rewriting\n            a previous checkpoint with new parameters. The TwabLib (using existing blocktimes of 1block/15sec)\n            guarantees minimum 7.4 years of search history.\n */\nlibrary TwabLib {\n  using OverflowSafeComparatorLib for uint32;\n  using ExtendedSafeCastLib for uint256;\n\n  /**\n      * @notice Sets max ring buffer length in the Account.twabs Observation list.\n                As users transfer/mint/burn tickets new Observation checkpoints are\n                recorded. The current max cardinality guarantees a seven year minimum,\n                of accurate historical lookups with current estimates of 1 new block\n                every 15 seconds - assuming each block contains a transfer to trigger an\n                observation write to storage.\n      * @dev    The user Account.AccountDetails.cardinality parameter can NOT exceed\n                the max cardinality variable. Preventing \"corrupted\" ring buffer lookup\n                pointers and new observation checkpoints.\n\n                The MAX_CARDINALITY in fact guarantees at least 7.4 years of records:\n                If 14 = block time in seconds\n                (2**24) * 14 = 234881024 seconds of history\n                234881024 / (365 * 24 * 60 * 60) ~= 7.44 years\n    */\n  uint24 public constant MAX_CARDINALITY = 16777215; // 2**24\n\n  /** @notice Struct ring buffer parameters for single user Account\n      * @param balance       Current balance for an Account\n      * @param nextTwabIndex Next uninitialized or updatable ring buffer checkpoint storage slot\n      * @param cardinality   Current total \"initialized\" ring buffer checkpoints for single user AccountDetails.\n                             Used to set initial boundary conditions for an efficient binary search.\n    */\n  struct AccountDetails {\n    uint208 balance;\n    uint24 nextTwabIndex;\n    uint24 cardinality;\n  }\n\n  /// @notice Combines account details with their twab history\n  /// @param details The account details\n  /// @param twabs The history of twabs for this account\n  struct Account {\n    AccountDetails details;\n    ObservationLib.Observation[MAX_CARDINALITY] twabs;\n  }\n\n  /// @notice Increases an account's balance and records a new twab.\n  /// @param _account The account whose balance will be increased\n  /// @param _amount The amount to increase the balance by\n  /// @param _currentTime The current time\n  /// @return accountDetails The new AccountDetails\n  /// @return twab The user's latest TWAB\n  /// @return isNew Whether the TWAB is new\n  function increaseBalance(\n    Account storage _account,\n    uint208 _amount,\n    uint32 _currentTime\n  )\n    internal\n    returns (\n      AccountDetails memory accountDetails,\n      ObservationLib.Observation memory twab,\n      bool isNew\n    )\n  {\n    AccountDetails memory _accountDetails = _account.details;\n    (accountDetails, twab, isNew) = _nextTwab(_account.twabs, _accountDetails, _currentTime);\n    accountDetails.balance = _accountDetails.balance + _amount;\n  }\n\n  /** @notice Calculates the next TWAB checkpoint for an account with a decreasing balance.\n   * @dev    With Account struct and amount decreasing calculates the next TWAB observable checkpoint.\n   * @param _account        Account whose balance will be decreased\n   * @param _amount         Amount to decrease the balance by\n   * @param _revertMessage  Revert message for insufficient balance\n   * @return accountDetails Updated Account.details struct\n   * @return twab           TWAB observation (with decreasing average)\n   * @return isNew          Whether TWAB is new or calling twice in the same block\n   */\n  function decreaseBalance(\n    Account storage _account,\n    uint208 _amount,\n    string memory _revertMessage,\n    uint32 _currentTime\n  )\n    internal\n    returns (\n      AccountDetails memory accountDetails,\n      ObservationLib.Observation memory twab,\n      bool isNew\n    )\n  {\n    AccountDetails memory _accountDetails = _account.details;\n\n    require(_accountDetails.balance >= _amount, _revertMessage);\n\n    (accountDetails, twab, isNew) = _nextTwab(_account.twabs, _accountDetails, _currentTime);\n    unchecked {\n      accountDetails.balance -= _amount;\n    }\n  }\n\n  /** @notice Calculates the average balance held by a user for a given time frame.\n      * @dev    Finds the average balance between start and end timestamp epochs.\n                Validates the supplied end time is within the range of elapsed time i.e. less then timestamp of now.\n      * @param _twabs          Individual user Observation recorded checkpoints passed as storage pointer\n      * @param _accountDetails User AccountDetails struct loaded in memory\n      * @param _startTime      Start of timestamp range as an epoch\n      * @param _endTime        End of timestamp range as an epoch\n      * @param _currentTime    Block.timestamp\n      * @return Average balance of user held between epoch timestamps start and end\n    */\n  function getAverageBalanceBetween(\n    ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\n    AccountDetails memory _accountDetails,\n    uint32 _startTime,\n    uint32 _endTime,\n    uint32 _currentTime\n  ) internal view returns (uint256) {\n    uint32 endTime = _endTime > _currentTime ? _currentTime : _endTime;\n\n    return _getAverageBalanceBetween(_twabs, _accountDetails, _startTime, endTime, _currentTime);\n  }\n\n  /// @notice Retrieves the oldest TWAB\n  /// @param _twabs The storage array of twabs\n  /// @param _accountDetails The TWAB account details\n  /// @return index The index of the oldest TWAB in the twabs array\n  /// @return twab The oldest TWAB\n  function oldestTwab(\n    ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\n    AccountDetails memory _accountDetails\n  ) internal view returns (uint24 index, ObservationLib.Observation memory twab) {\n    index = _accountDetails.nextTwabIndex;\n    twab = _twabs[index];\n\n    // If the TWAB is not initialized we go to the beginning of the TWAB circular buffer at index 0\n    if (twab.timestamp == 0) {\n      index = 0;\n      twab = _twabs[0];\n    }\n  }\n\n  /// @notice Retrieves the newest TWAB\n  /// @param _twabs The storage array of twabs\n  /// @param _accountDetails The TWAB account details\n  /// @return index The index of the newest TWAB in the twabs array\n  /// @return twab The newest TWAB\n  function newestTwab(\n    ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\n    AccountDetails memory _accountDetails\n  ) internal view returns (uint24 index, ObservationLib.Observation memory twab) {\n    index = uint24(RingBufferLib.newestIndex(_accountDetails.nextTwabIndex, MAX_CARDINALITY));\n    twab = _twabs[index];\n  }\n\n  /// @notice Retrieves amount at `_targetTime` timestamp\n  /// @param _twabs List of TWABs to search through.\n  /// @param _accountDetails Accounts details\n  /// @param _targetTime Timestamp at which the reserved TWAB should be for.\n  /// @return uint256 TWAB amount at `_targetTime`.\n  function getBalanceAt(\n    ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\n    AccountDetails memory _accountDetails,\n    uint32 _targetTime,\n    uint32 _currentTime\n  ) internal view returns (uint256) {\n    uint32 timeToTarget = _targetTime > _currentTime ? _currentTime : _targetTime;\n    return _getBalanceAt(_twabs, _accountDetails, timeToTarget, _currentTime);\n  }\n\n  /// @notice Calculates the average balance held by a user for a given time frame.\n  /// @param _startTime The start time of the time frame.\n  /// @param _endTime The end time of the time frame.\n  /// @return The average balance that the user held during the time frame.\n  function _getAverageBalanceBetween(\n    ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\n    AccountDetails memory _accountDetails,\n    uint32 _startTime,\n    uint32 _endTime,\n    uint32 _currentTime\n  ) private view returns (uint256) {\n    (uint24 oldestTwabIndex, ObservationLib.Observation memory oldTwab) = oldestTwab(\n      _twabs,\n      _accountDetails\n    );\n\n    (uint24 newestTwabIndex, ObservationLib.Observation memory newTwab) = newestTwab(\n      _twabs,\n      _accountDetails\n    );\n\n    ObservationLib.Observation memory startTwab = _calculateTwab(\n      _twabs,\n      _accountDetails,\n      newTwab,\n      oldTwab,\n      newestTwabIndex,\n      oldestTwabIndex,\n      _startTime,\n      _currentTime\n    );\n\n    ObservationLib.Observation memory endTwab = _calculateTwab(\n      _twabs,\n      _accountDetails,\n      newTwab,\n      oldTwab,\n      newestTwabIndex,\n      oldestTwabIndex,\n      _endTime,\n      _currentTime\n    );\n\n    // Difference in amount / time\n    return\n      (endTwab.amount - startTwab.amount) /\n      OverflowSafeComparatorLib.checkedSub(endTwab.timestamp, startTwab.timestamp, _currentTime);\n  }\n\n  /** @notice Searches TWAB history and calculate the difference between amount(s)/timestamp(s) to return average balance\n                between the Observations closes to the supplied targetTime.\n      * @param _twabs          Individual user Observation recorded checkpoints passed as storage pointer\n      * @param _accountDetails User AccountDetails struct loaded in memory\n      * @param _targetTime     Target timestamp to filter Observations in the ring buffer binary search\n      * @param _currentTime    Block.timestamp\n      * @return uint256 Time-weighted average amount between two closest observations.\n    */\n  function _getBalanceAt(\n    ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\n    AccountDetails memory _accountDetails,\n    uint32 _targetTime,\n    uint32 _currentTime\n  ) private view returns (uint256) {\n    uint24 newestTwabIndex;\n    ObservationLib.Observation memory afterOrAt;\n    ObservationLib.Observation memory beforeOrAt;\n    (newestTwabIndex, beforeOrAt) = newestTwab(_twabs, _accountDetails);\n\n    // If `_targetTime` is chronologically after the newest TWAB, we can simply return the current balance\n    if (beforeOrAt.timestamp.lte(_targetTime, _currentTime)) {\n      return _accountDetails.balance;\n    }\n\n    uint24 oldestTwabIndex;\n    // Now, set before to the oldest TWAB\n    (oldestTwabIndex, beforeOrAt) = oldestTwab(_twabs, _accountDetails);\n\n    // If `_targetTime` is chronologically before the oldest TWAB, we can early return\n    if (_targetTime.lt(beforeOrAt.timestamp, _currentTime)) {\n      return 0;\n    }\n\n    // Otherwise, we perform the `binarySearch`\n    (beforeOrAt, afterOrAt) = ObservationLib.binarySearch(\n      _twabs,\n      newestTwabIndex,\n      oldestTwabIndex,\n      _targetTime,\n      _accountDetails.cardinality,\n      _currentTime\n    );\n\n    // Sum the difference in amounts and divide by the difference in timestamps.\n    // The time-weighted average balance uses time measured between two epoch timestamps as\n    // a constaint on the measurement when calculating the time weighted average balance.\n    return\n      (afterOrAt.amount - beforeOrAt.amount) /\n      OverflowSafeComparatorLib.checkedSub(afterOrAt.timestamp, beforeOrAt.timestamp, _currentTime);\n  }\n\n  /** @notice Calculates a user TWAB for a target timestamp using the historical TWAB records.\n                The balance is linearly interpolated: amount differences / timestamp differences\n                using the simple (after.amount - before.amount / end.timestamp - start.timestamp) formula.\n    /** @dev    Binary search in _calculateTwab fails when searching out of bounds. Thus, before\n                searching we exclude target timestamps out of range of newest/oldest TWAB(s).\n                IF a search is before or after the range we \"extrapolate\" a Observation from the expected state.\n      * @param _twabs           Individual user Observation recorded checkpoints passed as storage pointer\n      * @param _accountDetails  User AccountDetails struct loaded in memory\n      * @param _newestTwab      Newest TWAB in history (end of ring buffer)\n      * @param _oldestTwab      Olderst TWAB in history (end of ring buffer)\n      * @param _newestTwabIndex Pointer in ring buffer to newest TWAB\n      * @param _oldestTwabIndex Pointer in ring buffer to oldest TWAB\n      * @param _targetTimestamp Epoch timestamp to calculate for time (T) in the TWAB\n      * @param _time            Block.timestamp\n      * @return accountDetails Updated Account.details struct\n    */\n  function _calculateTwab(\n    ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\n    AccountDetails memory _accountDetails,\n    ObservationLib.Observation memory _newestTwab,\n    ObservationLib.Observation memory _oldestTwab,\n    uint24 _newestTwabIndex,\n    uint24 _oldestTwabIndex,\n    uint32 _targetTimestamp,\n    uint32 _time\n  ) private view returns (ObservationLib.Observation memory) {\n    // If `_targetTimestamp` is chronologically after the newest TWAB, we extrapolate a new one\n    if (_newestTwab.timestamp.lt(_targetTimestamp, _time)) {\n      return _computeNextTwab(_newestTwab, _accountDetails.balance, _targetTimestamp);\n    }\n\n    if (_newestTwab.timestamp == _targetTimestamp) {\n      return _newestTwab;\n    }\n\n    if (_oldestTwab.timestamp == _targetTimestamp) {\n      return _oldestTwab;\n    }\n\n    // If `_targetTimestamp` is chronologically before the oldest TWAB, we create a zero twab\n    if (_targetTimestamp.lt(_oldestTwab.timestamp, _time)) {\n      return ObservationLib.Observation({ amount: 0, timestamp: _targetTimestamp });\n    }\n\n    // Otherwise, both timestamps must be surrounded by twabs.\n    (\n      ObservationLib.Observation memory beforeOrAtStart,\n      ObservationLib.Observation memory afterOrAtStart\n    ) = ObservationLib.binarySearch(\n        _twabs,\n        _newestTwabIndex,\n        _oldestTwabIndex,\n        _targetTimestamp,\n        _accountDetails.cardinality,\n        _time\n      );\n\n    uint224 heldBalance = (afterOrAtStart.amount - beforeOrAtStart.amount) /\n      OverflowSafeComparatorLib.checkedSub(\n        afterOrAtStart.timestamp,\n        beforeOrAtStart.timestamp,\n        _time\n      );\n\n    return _computeNextTwab(beforeOrAtStart, heldBalance, _targetTimestamp);\n  }\n\n  /**\n   * @notice Calculates the next TWAB using the newestTwab and updated balance.\n   * @dev    Storage of the TWAB obersation is managed by the calling function and not _computeNextTwab.\n   * @param _currentTwab    Newest Observation in the Account.twabs list\n   * @param _currentBalance User balance at time of most recent (newest) checkpoint write\n   * @param _time           Current block.timestamp\n   * @return TWAB Observation\n   */\n  function _computeNextTwab(\n    ObservationLib.Observation memory _currentTwab,\n    uint224 _currentBalance,\n    uint32 _time\n  ) private pure returns (ObservationLib.Observation memory) {\n    // New twab amount = last twab amount (or zero) + (current amount * elapsed seconds)\n    return\n      ObservationLib.Observation({\n        amount: _currentTwab.amount +\n          _currentBalance *\n          (_time.checkedSub(_currentTwab.timestamp, _time)),\n        timestamp: _time\n      });\n  }\n\n  /// @notice Sets a new TWAB Observation at the next available index and returns the new account details.\n  /// @dev Note that if _currentTime is before the last observation timestamp, it appears as an overflow\n  /// @param _twabs The twabs array to insert into\n  /// @param _accountDetails The current account details\n  /// @param _currentTime The current time\n  /// @return accountDetails The new account details\n  /// @return twab The newest twab (may or may not be brand-new)\n  /// @return isNew Whether the newest twab was created by this call\n  function _nextTwab(\n    ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\n    AccountDetails memory _accountDetails,\n    uint32 _currentTime\n  )\n    private\n    returns (\n      AccountDetails memory accountDetails,\n      ObservationLib.Observation memory twab,\n      bool isNew\n    )\n  {\n    (, ObservationLib.Observation memory _newestTwab) = newestTwab(_twabs, _accountDetails);\n\n    // if we're in the same block, return\n    if (_newestTwab.timestamp == _currentTime) {\n      return (_accountDetails, _newestTwab, false);\n    }\n\n    ObservationLib.Observation memory newTwab = _computeNextTwab(\n      _newestTwab,\n      _accountDetails.balance,\n      _currentTime\n    );\n\n    _twabs[_accountDetails.nextTwabIndex] = newTwab;\n\n    AccountDetails memory nextAccountDetails = push(_accountDetails);\n\n    return (nextAccountDetails, newTwab, true);\n  }\n\n  /// @notice \"Pushes\" a new element on the AccountDetails ring buffer, and returns the new AccountDetails\n  /// @param _accountDetails The account details from which to pull the cardinality and next index\n  /// @return The new AccountDetails\n  function push(AccountDetails memory _accountDetails)\n    internal\n    pure\n    returns (AccountDetails memory)\n  {\n    _accountDetails.nextTwabIndex = uint24(\n      RingBufferLib.nextIndex(_accountDetails.nextTwabIndex, MAX_CARDINALITY)\n    );\n\n    // Prevent the Account specific cardinality from exceeding the MAX_CARDINALITY.\n    // The ring buffer length is limited by MAX_CARDINALITY. IF the account.cardinality\n    // exceeds the max cardinality, new observations would be incorrectly set or the\n    // observation would be out of \"bounds\" of the ring buffer. Once reached the\n    // AccountDetails.cardinality will continue to be equal to max cardinality.\n    if (_accountDetails.cardinality < MAX_CARDINALITY) {\n      _accountDetails.cardinality += 1;\n    }\n\n    return _accountDetails;\n  }\n}\n"
    },
    "contracts/libraries/twab/OverflowSafeComparatorLib.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.15;\n\n/// @title OverflowSafeComparatorLib library to share comparator functions between contracts\n/// @dev Code taken from Uniswap V3 Oracle.sol: https://github.com/Uniswap/v3-core/blob/3e88af408132fc957e3e406f65a0ce2b1ca06c3d/contracts/libraries/Oracle.sol\n/// @author PoolTogether Inc.\nlibrary OverflowSafeComparatorLib {\n  /// @notice 32-bit timestamps comparator.\n  /// @dev safe for 0 or 1 overflows, `_a` and `_b` must be chronologically before or equal to time.\n  /// @param _a A comparison timestamp from which to determine the relative position of `_timestamp`.\n  /// @param _b Timestamp to compare against `_a`.\n  /// @param _timestamp A timestamp truncated to 32 bits.\n  /// @return bool Whether `_a` is chronologically < `_b`.\n  function lt(\n    uint32 _a,\n    uint32 _b,\n    uint32 _timestamp\n  ) internal pure returns (bool) {\n    // No need to adjust if there hasn't been an overflow\n    if (_a <= _timestamp && _b <= _timestamp) return _a < _b;\n\n    uint256 aAdjusted = _a > _timestamp ? _a : _a + 2**32;\n    uint256 bAdjusted = _b > _timestamp ? _b : _b + 2**32;\n\n    return aAdjusted < bAdjusted;\n  }\n\n  /// @notice 32-bit timestamps comparator.\n  /// @dev safe for 0 or 1 overflows, `_a` and `_b` must be chronologically before or equal to time.\n  /// @param _a A comparison timestamp from which to determine the relative position of `_timestamp`.\n  /// @param _b Timestamp to compare against `_a`.\n  /// @param _timestamp A timestamp truncated to 32 bits.\n  /// @return bool Whether `_a` is chronologically <= `_b`.\n  function lte(\n    uint32 _a,\n    uint32 _b,\n    uint32 _timestamp\n  ) internal pure returns (bool) {\n    // No need to adjust if there hasn't been an overflow\n    if (_a <= _timestamp && _b <= _timestamp) return _a <= _b;\n\n    uint256 aAdjusted = _a > _timestamp ? _a : _a + 2**32;\n    uint256 bAdjusted = _b > _timestamp ? _b : _b + 2**32;\n\n    return aAdjusted <= bAdjusted;\n  }\n\n  /// @notice 32-bit timestamp subtractor\n  /// @dev safe for 0 or 1 overflows, where `_a` and `_b` must be chronologically before or equal to time\n  /// @param _a The subtraction left operand\n  /// @param _b The subtraction right operand\n  /// @param _timestamp The current time.  Expected to be chronologically after both.\n  /// @return The difference between a and b, adjusted for overflow\n  function checkedSub(\n    uint32 _a,\n    uint32 _b,\n    uint32 _timestamp\n  ) internal pure returns (uint32) {\n    // No need to adjust if there hasn't been an overflow\n\n    if (_a <= _timestamp && _b <= _timestamp) return _a - _b;\n\n    uint256 aAdjusted = _a > _timestamp ? _a : _a + 2**32;\n    uint256 bAdjusted = _b > _timestamp ? _b : _b + 2**32;\n\n    return uint32(aAdjusted - bAdjusted);\n  }\n}\n"
    },
    "contracts/libraries/twab/RingBufferLib.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.15;\n\nlibrary RingBufferLib {\n  /**\n   * @notice Returns wrapped TWAB index.\n   * @dev  In order to navigate the TWAB circular buffer, we need to use the modulo operator.\n   * @dev  For example, if `_index` is equal to 32 and the TWAB circular buffer is of `_cardinality` 32,\n   *       it will return 0 and will point to the first element of the array.\n   * @param _index Index used to navigate through the TWAB circular buffer.\n   * @param _cardinality TWAB buffer cardinality.\n   * @return TWAB index.\n   */\n  function wrap(uint256 _index, uint256 _cardinality) internal pure returns (uint256) {\n    return _index % _cardinality;\n  }\n\n  /**\n   * @notice Computes the negative offset from the given index, wrapped by the cardinality.\n   * @dev  We add `_cardinality` to `_index` to be able to offset even if `_amount` is superior to `_cardinality`.\n   * @param _index The index from which to offset\n   * @param _amount The number of indices to offset.  This is subtracted from the given index.\n   * @param _cardinality The number of elements in the ring buffer\n   * @return Offsetted index.\n   */\n  function offset(\n    uint256 _index,\n    uint256 _amount,\n    uint256 _cardinality\n  ) internal pure returns (uint256) {\n    return wrap(_index + _cardinality - _amount, _cardinality);\n  }\n\n  /// @notice Returns the index of the last recorded TWAB\n  /// @param _nextIndex The next available twab index.  This will be recorded to next.\n  /// @param _cardinality The cardinality of the TWAB history.\n  /// @return The index of the last recorded TWAB\n  function newestIndex(uint256 _nextIndex, uint256 _cardinality) internal pure returns (uint256) {\n    if (_cardinality == 0) {\n      return 0;\n    }\n\n    return wrap(_nextIndex + _cardinality - 1, _cardinality);\n  }\n\n  /// @notice Computes the ring buffer index that follows the given one, wrapped by cardinality\n  /// @param _index The index to increment\n  /// @param _cardinality The number of elements in the Ring Buffer\n  /// @return The next index relative to the given index.  Will wrap around to 0 if the next index == cardinality\n  function nextIndex(uint256 _index, uint256 _cardinality) internal pure returns (uint256) {\n    return wrap(_index + 1, _cardinality);\n  }\n}\n"
    },
    "contracts/libraries/twab/ObservationLib.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.15;\n\nimport \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\n\nimport \"./OverflowSafeComparatorLib.sol\";\nimport \"./RingBufferLib.sol\";\n\n/**\n * @title Observation Library\n * @notice This library allows one to store an array of timestamped values and efficiently binary search them.\n * @dev Largely pulled from Uniswap V3 Oracle.sol: https://github.com/Uniswap/v3-core/blob/c05a0e2c8c08c460fb4d05cfdda30b3ad8deeaac/contracts/libraries/Oracle.sol\n * @author PoolTogether Inc.\n */\nlibrary ObservationLib {\n  using OverflowSafeComparatorLib for uint32;\n  using SafeCast for uint256;\n\n  /// @notice The maximum number of observations\n  uint24 public constant MAX_CARDINALITY = 16777215; // 2**24\n\n  /**\n   * @notice Observation, which includes an amount and timestamp.\n   * @param amount `amount` at `timestamp`.\n   * @param timestamp Recorded `timestamp`.\n   */\n  struct Observation {\n    uint224 amount;\n    uint32 timestamp;\n  }\n\n  /**\n   * @notice Fetches Observations `beforeOrAt` and `atOrAfter` a `_target`, eg: where [`beforeOrAt`, `atOrAfter`] is satisfied.\n   * The result may be the same Observation, or adjacent Observations.\n   * @dev The answer must be contained in the array used when the target is located within the stored Observation.\n   * boundaries: older than the most recent Observation and younger, or the same age as, the oldest Observation.\n   * @dev  If `_newestObservationIndex` is less than `_oldestObservationIndex`, it means that we've wrapped around the circular buffer.\n   *       So the most recent observation will be at `_oldestObservationIndex + _cardinality - 1`, at the beginning of the circular buffer.\n   * @param _observations List of Observations to search through.\n   * @param _newestObservationIndex Index of the newest Observation. Right side of the circular buffer.\n   * @param _oldestObservationIndex Index of the oldest Observation. Left side of the circular buffer.\n   * @param _target Timestamp at which we are searching the Observation.\n   * @param _cardinality Cardinality of the circular buffer we are searching through.\n   * @param _time Timestamp at which we perform the binary search.\n   * @return beforeOrAt Observation recorded before, or at, the target.\n   * @return atOrAfter Observation recorded at, or after, the target.\n   */\n  function binarySearch(\n    Observation[MAX_CARDINALITY] storage _observations,\n    uint24 _newestObservationIndex,\n    uint24 _oldestObservationIndex,\n    uint32 _target,\n    uint24 _cardinality,\n    uint32 _time\n  ) internal view returns (Observation memory beforeOrAt, Observation memory atOrAfter) {\n    uint256 leftSide = _oldestObservationIndex;\n    uint256 rightSide = _newestObservationIndex < leftSide\n      ? leftSide + _cardinality - 1\n      : _newestObservationIndex;\n    uint256 currentIndex;\n\n    while (true) {\n      // We start our search in the middle of the `leftSide` and `rightSide`.\n      // After each iteration, we narrow down the search to the left or the right side while still starting our search in the middle.\n      currentIndex = (leftSide + rightSide) / 2;\n\n      beforeOrAt = _observations[uint24(RingBufferLib.wrap(currentIndex, _cardinality))];\n      uint32 beforeOrAtTimestamp = beforeOrAt.timestamp;\n\n      // We've landed on an uninitialized timestamp, keep searching higher (more recently).\n      if (beforeOrAtTimestamp == 0) {\n        leftSide = currentIndex + 1;\n        continue;\n      }\n\n      atOrAfter = _observations[uint24(RingBufferLib.nextIndex(currentIndex, _cardinality))];\n\n      bool targetAtOrAfter = beforeOrAtTimestamp.lte(_target, _time);\n\n      // Check if we've found the corresponding Observation.\n      if (targetAtOrAfter && _target.lte(atOrAfter.timestamp, _time)) {\n        break;\n      }\n\n      // If `beforeOrAtTimestamp` is greater than `_target`, then we keep searching lower. To the left of the current index.\n      if (!targetAtOrAfter) {\n        rightSide = currentIndex - 1;\n      } else {\n        // Otherwise, we keep searching higher. To the left of the current index.\n        leftSide = currentIndex + 1;\n      }\n    }\n  }\n}\n"
    },
    "contracts/libraries/twab/DrawRingBufferLib.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.15;\n\nimport \"./RingBufferLib.sol\";\n\n/// @title Library for creating and managing a draw ring buffer.\nlibrary DrawRingBufferLib {\n  /// @notice Draw buffer struct.\n  struct Buffer {\n    uint32 lastDrawId;\n    uint32 nextIndex;\n    uint32 cardinality;\n  }\n\n  /// @notice Helper function to know if the draw ring buffer has been initialized.\n  /// @dev since draws start at 1 and are monotonically increased, we know we are uninitialized if nextIndex = 0 and lastDrawId = 0.\n  /// @param _buffer The buffer to check.\n  function isInitialized(Buffer memory _buffer) internal pure returns (bool) {\n    return !(_buffer.nextIndex == 0 && _buffer.lastDrawId == 0);\n  }\n\n  /// @notice Push a draw to the buffer.\n  /// @param _buffer The buffer to push to.\n  /// @param _drawId The drawID to push.\n  /// @return The new buffer.\n  function push(Buffer memory _buffer, uint32 _drawId) internal pure returns (Buffer memory) {\n    require(!isInitialized(_buffer) || _drawId == _buffer.lastDrawId + 1, \"DRB/must-be-contig\");\n\n    return\n      Buffer({\n        lastDrawId: _drawId,\n        nextIndex: uint32(RingBufferLib.nextIndex(_buffer.nextIndex, _buffer.cardinality)),\n        cardinality: _buffer.cardinality\n      });\n  }\n\n  /// @notice Get draw ring buffer index pointer.\n  /// @param _buffer The buffer to get the `nextIndex` from.\n  /// @param _drawId The draw id to get the index for.\n  /// @return The draw ring buffer index pointer.\n  function getIndex(Buffer memory _buffer, uint32 _drawId) internal pure returns (uint32) {\n    require(isInitialized(_buffer) && _drawId <= _buffer.lastDrawId, \"DRB/future-draw\");\n\n    uint32 indexOffset = _buffer.lastDrawId - _drawId;\n    require(indexOffset < _buffer.cardinality, \"DRB/expired-draw\");\n\n    uint256 mostRecent = RingBufferLib.newestIndex(_buffer.nextIndex, _buffer.cardinality);\n\n    return uint32(RingBufferLib.offset(uint32(mostRecent), indexOffset, _buffer.cardinality));\n  }\n}\n"
    },
    "contracts/experiments/TrustToken.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport \"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport { ERC20 } from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport { CitizenAlpha } from \"../CitizenAlpha.sol\";\nimport { ObservationLib } from \"../libraries/twab/ObservationLib.sol\";\nimport { TwabLib } from \"../libraries/twab/TwabLib.sol\";\nimport { ExtendedSafeCastLib } from \"../libraries/twab/ExtendedSafeCastLib.sol\";\n\n/**\n * @title TrustToken\n * @author Kames Geraghty\n * @notice TrustToken is a Web3 of Trust experiment: implementing time-weighted average balances.\n           Credit: PoolTogether Inc (Brendan Asselstine)\n */\ncontract TrustToken is ERC20Permit {\n  using SafeERC20 for IERC20;\n  using ExtendedSafeCastLib for uint256;\n  CitizenAlpha private citizenAlpha;\n  uint256 private distribution = 10000e18;\n  mapping(address => bool) private _claimed;\n\n  bytes32 private immutable _DELEGATE_TYPEHASH =\n    keccak256(\"Delegate(address user,address delegate,uint256 nonce,uint256 deadline)\");\n\n  /// @notice Record of token holders TWABs for each account.\n  mapping(address => TwabLib.Account) internal userTwabs;\n\n  /// @notice Record of tickets total supply and ring buff parameters used for observation.\n  TwabLib.Account internal totalSupplyTwab;\n\n  /// @notice Mapping of delegates.  Each address can delegate their ticket power to another.\n  mapping(address => address) internal delegates;\n\n  /**\n   * @notice Emitted when TWAB balance has been delegated to another user.\n   * @param delegator Address of the delegator.\n   * @param delegate Address of the delegate.\n   */\n  event Delegated(address indexed delegator, address indexed delegate);\n\n  /**\n   * @notice Emitted when a new TWAB has been recorded.\n   * @param delegate The recipient of the ticket power (may be the same as the user).\n   * @param newTwab Updated TWAB of a ticket holder after a successful TWAB recording.\n   */\n  event NewUserTwab(address indexed delegate, ObservationLib.Observation newTwab);\n\n  /**\n   * @notice Emitted when a new total supply TWAB has been recorded.\n   * @param newTotalSupplyTwab Updated TWAB of tickets total supply after a successful total supply TWAB recording.\n   */\n  event NewTotalSupplyTwab(ObservationLib.Observation newTotalSupplyTwab);\n\n  constructor(\n    CitizenAlpha citizenAlpha_,\n    string memory name,\n    string memory symbol\n  ) ERC20Permit(\"Web3Citizen TrustToken\") ERC20(name, symbol) {\n    citizenAlpha = citizenAlpha_;\n  }\n\n  /* ===================================================================================== */\n  /* External Functions                                                                    */\n  /* ===================================================================================== */\n\n  function claim() external {\n    require(citizenAlpha.isCitizen(msg.sender), \"TrustToken:not-trusted\");\n    require(!_claimed[msg.sender], \"TrustToken:trust-previously-issued\");\n    _claimed[msg.sender] = true;\n    _mint(msg.sender, distribution);\n  }\n\n  function getAccountDetails(address _user) external view returns (TwabLib.AccountDetails memory) {\n    return userTwabs[_user].details;\n  }\n\n  function getTwab(address _user, uint16 _index)\n    external\n    view\n    returns (ObservationLib.Observation memory)\n  {\n    return userTwabs[_user].twabs[_index];\n  }\n\n  function getBalanceAt(address _user, uint64 _target) external view returns (uint256) {\n    TwabLib.Account storage account = userTwabs[_user];\n\n    return\n      TwabLib.getBalanceAt(\n        account.twabs,\n        account.details,\n        uint32(_target),\n        uint32(block.timestamp)\n      );\n  }\n\n  function getAverageBalancesBetween(\n    address _user,\n    uint64[] calldata _startTimes,\n    uint64[] calldata _endTimes\n  ) external view returns (uint256[] memory) {\n    return _getAverageBalancesBetween(userTwabs[_user], _startTimes, _endTimes);\n  }\n\n  function getAverageTotalSuppliesBetween(\n    uint64[] calldata _startTimes,\n    uint64[] calldata _endTimes\n  ) external view returns (uint256[] memory) {\n    return _getAverageBalancesBetween(totalSupplyTwab, _startTimes, _endTimes);\n  }\n\n  function getAverageBalanceBetween(\n    address _user,\n    uint64 _startTime,\n    uint64 _endTime\n  ) external view returns (uint256) {\n    TwabLib.Account storage account = userTwabs[_user];\n\n    return\n      TwabLib.getAverageBalanceBetween(\n        account.twabs,\n        account.details,\n        uint32(_startTime),\n        uint32(_endTime),\n        uint32(block.timestamp)\n      );\n  }\n\n  function getBalancesAt(address _user, uint64[] calldata _targets)\n    external\n    view\n    returns (uint256[] memory)\n  {\n    uint256 length = _targets.length;\n    uint256[] memory _balances = new uint256[](length);\n\n    TwabLib.Account storage twabContext = userTwabs[_user];\n    TwabLib.AccountDetails memory details = twabContext.details;\n\n    for (uint256 i = 0; i < length; i++) {\n      _balances[i] = TwabLib.getBalanceAt(\n        twabContext.twabs,\n        details,\n        uint32(_targets[i]),\n        uint32(block.timestamp)\n      );\n    }\n\n    return _balances;\n  }\n\n  function getTotalSupplyAt(uint64 _target) external view returns (uint256) {\n    return\n      TwabLib.getBalanceAt(\n        totalSupplyTwab.twabs,\n        totalSupplyTwab.details,\n        uint32(_target),\n        uint32(block.timestamp)\n      );\n  }\n\n  function getTotalSuppliesAt(uint64[] calldata _targets) external view returns (uint256[] memory) {\n    uint256 length = _targets.length;\n    uint256[] memory totalSupplies = new uint256[](length);\n\n    TwabLib.AccountDetails memory details = totalSupplyTwab.details;\n\n    for (uint256 i = 0; i < length; i++) {\n      totalSupplies[i] = TwabLib.getBalanceAt(\n        totalSupplyTwab.twabs,\n        details,\n        uint32(_targets[i]),\n        uint32(block.timestamp)\n      );\n    }\n\n    return totalSupplies;\n  }\n\n  function delegateOf(address _user) external view returns (address) {\n    return delegates[_user];\n  }\n\n  function delegateWithSignature(\n    address _user,\n    address _newDelegate,\n    uint256 _deadline,\n    uint8 _v,\n    bytes32 _r,\n    bytes32 _s\n  ) external virtual {\n    require(block.timestamp <= _deadline, \"Ticket/delegate-expired-deadline\");\n\n    bytes32 structHash = keccak256(\n      abi.encode(_DELEGATE_TYPEHASH, _user, _newDelegate, _useNonce(_user), _deadline)\n    );\n\n    bytes32 hash = _hashTypedDataV4(structHash);\n\n    address signer = ECDSA.recover(hash, _v, _r, _s);\n    require(signer == _user, \"Ticket/delegate-invalid-signature\");\n\n    _delegate(_user, _newDelegate);\n  }\n\n  function delegate(address _to) external virtual {\n    _delegate(msg.sender, _to);\n  }\n\n  /* ===================================================================================== */\n  /* External Functions                                                                    */\n  /* ===================================================================================== */\n\n  /// @notice Delegates a users chance to another\n  /// @param _user The user whose balance should be delegated\n  /// @param _to The delegate\n  function _delegate(address _user, address _to) internal {\n    uint256 balance = balanceOf(_user);\n    address currentDelegate = delegates[_user];\n\n    if (currentDelegate == _to) {\n      return;\n    }\n\n    delegates[_user] = _to;\n\n    _transferTwab(currentDelegate, _to, balance);\n\n    emit Delegated(_user, _to);\n  }\n\n  /**\n   * @notice Retrieves the average balances held by a user for a given time frame.\n   * @param _account The user whose balance is checked.\n   * @param _startTimes The start time of the time frame.\n   * @param _endTimes The end time of the time frame.\n   * @return The average balance that the user held during the time frame.\n   */\n  function _getAverageBalancesBetween(\n    TwabLib.Account storage _account,\n    uint64[] calldata _startTimes,\n    uint64[] calldata _endTimes\n  ) internal view returns (uint256[] memory) {\n    uint256 startTimesLength = _startTimes.length;\n    require(startTimesLength == _endTimes.length, \"Ticket/start-end-times-length-match\");\n\n    TwabLib.AccountDetails memory accountDetails = _account.details;\n\n    uint256[] memory averageBalances = new uint256[](startTimesLength);\n    uint32 currentTimestamp = uint32(block.timestamp);\n\n    for (uint256 i = 0; i < startTimesLength; i++) {\n      averageBalances[i] = TwabLib.getAverageBalanceBetween(\n        _account.twabs,\n        accountDetails,\n        uint32(_startTimes[i]),\n        uint32(_endTimes[i]),\n        currentTimestamp\n      );\n    }\n\n    return averageBalances;\n  }\n\n  /// @notice Transfers the given TWAB balance from one user to another\n  /// @param _from The user to transfer the balance from.  May be zero in the event of a mint.\n  /// @param _to The user to transfer the balance to.  May be zero in the event of a burn.\n  /// @param _amount The balance that is being transferred.\n  function _transferTwab(\n    address _from,\n    address _to,\n    uint256 _amount\n  ) internal {\n    // If we are transferring tokens from a delegated account to an undelegated account\n    if (_from != address(0)) {\n      _decreaseUserTwab(_from, _amount);\n\n      if (_to == address(0)) {\n        _decreaseTotalSupplyTwab(_amount);\n      }\n    }\n\n    // If we are transferring tokens from an undelegated account to a delegated account\n    if (_to != address(0)) {\n      _increaseUserTwab(_to, _amount);\n\n      if (_from == address(0)) {\n        _increaseTotalSupplyTwab(_amount);\n      }\n    }\n  }\n\n  /**\n   * @notice Increase `_to` TWAB balance.\n   * @param _to Address of the delegate.\n   * @param _amount Amount of tokens to be added to `_to` TWAB balance.\n   */\n  function _increaseUserTwab(address _to, uint256 _amount) internal {\n    if (_amount == 0) {\n      return;\n    }\n\n    TwabLib.Account storage _account = userTwabs[_to];\n\n    (\n      TwabLib.AccountDetails memory accountDetails,\n      ObservationLib.Observation memory twab,\n      bool isNew\n    ) = TwabLib.increaseBalance(_account, _amount.toUint208(), uint32(block.timestamp));\n\n    _account.details = accountDetails;\n\n    if (isNew) {\n      emit NewUserTwab(_to, twab);\n    }\n  }\n\n  /**\n   * @notice Decrease `_to` TWAB balance.\n   * @param _to Address of the delegate.\n   * @param _amount Amount of tokens to be added to `_to` TWAB balance.\n   */\n  function _decreaseUserTwab(address _to, uint256 _amount) internal {\n    if (_amount == 0) {\n      return;\n    }\n\n    TwabLib.Account storage _account = userTwabs[_to];\n\n    (\n      TwabLib.AccountDetails memory accountDetails,\n      ObservationLib.Observation memory twab,\n      bool isNew\n    ) = TwabLib.decreaseBalance(\n        _account,\n        _amount.toUint208(),\n        \"Ticket/twab-burn-lt-balance\",\n        uint32(block.timestamp)\n      );\n\n    _account.details = accountDetails;\n\n    if (isNew) {\n      emit NewUserTwab(_to, twab);\n    }\n  }\n\n  /// @notice Decreases the total supply twab.  Should be called anytime a balance moves from delegated to undelegated\n  /// @param _amount The amount to decrease the total by\n  function _decreaseTotalSupplyTwab(uint256 _amount) internal {\n    if (_amount == 0) {\n      return;\n    }\n\n    (\n      TwabLib.AccountDetails memory accountDetails,\n      ObservationLib.Observation memory tsTwab,\n      bool tsIsNew\n    ) = TwabLib.decreaseBalance(\n        totalSupplyTwab,\n        _amount.toUint208(),\n        \"Ticket/burn-amount-exceeds-total-supply-twab\",\n        uint32(block.timestamp)\n      );\n\n    totalSupplyTwab.details = accountDetails;\n\n    if (tsIsNew) {\n      emit NewTotalSupplyTwab(tsTwab);\n    }\n  }\n\n  /// @notice Increases the total supply twab.  Should be called anytime a balance moves from undelegated to delegated\n  /// @param _amount The amount to increase the total by\n  function _increaseTotalSupplyTwab(uint256 _amount) internal {\n    if (_amount == 0) {\n      return;\n    }\n\n    (\n      TwabLib.AccountDetails memory accountDetails,\n      ObservationLib.Observation memory _totalSupply,\n      bool tsIsNew\n    ) = TwabLib.increaseBalance(totalSupplyTwab, _amount.toUint208(), uint32(block.timestamp));\n\n    totalSupplyTwab.details = accountDetails;\n\n    if (tsIsNew) {\n      emit NewTotalSupplyTwab(_totalSupply);\n    }\n  }\n\n  // @inheritdoc ERC20\n  function _beforeTokenTransfer(\n    address _from,\n    address _to,\n    uint256 _amount\n  ) internal override {\n    if (_from == _to) {\n      return;\n    }\n\n    address _fromDelegate;\n    if (_from != address(0)) {\n      _fromDelegate = delegates[_from];\n    }\n\n    address _toDelegate;\n    if (_to != address(0)) {\n      _toDelegate = delegates[_to];\n    }\n\n    _transferTwab(_fromDelegate, _toDelegate, _amount);\n  }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/extensions/draft-ERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./draft-IERC20Permit.sol\";\nimport \"../ERC20.sol\";\nimport \"../../../utils/cryptography/draft-EIP712.sol\";\nimport \"../../../utils/cryptography/ECDSA.sol\";\nimport \"../../../utils/Counters.sol\";\n\n/**\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * _Available since v3.4._\n */\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\n    using Counters for Counters.Counter;\n\n    mapping(address => Counters.Counter) private _nonces;\n\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private constant _PERMIT_TYPEHASH =\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n    /**\n     * @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.\n     * However, to ensure consistency with the upgradeable transpiler, we will continue\n     * to reserve a slot.\n     * @custom:oz-renamed-from _PERMIT_TYPEHASH\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private _PERMIT_TYPEHASH_DEPRECATED_SLOT;\n\n    /**\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n     *\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\n     */\n    constructor(string memory name) EIP712(name, \"1\") {}\n\n    /**\n     * @dev See {IERC20Permit-permit}.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual override {\n        require(block.timestamp <= deadline, \"ERC20Permit: expired deadline\");\n\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\n\n        bytes32 hash = _hashTypedDataV4(structHash);\n\n        address signer = ECDSA.recover(hash, v, r, s);\n        require(signer == owner, \"ERC20Permit: invalid signature\");\n\n        _approve(owner, spender, value);\n    }\n\n    /**\n     * @dev See {IERC20Permit-nonces}.\n     */\n    function nonces(address owner) public view virtual override returns (uint256) {\n        return _nonces[owner].current();\n    }\n\n    /**\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n\n    /**\n     * @dev \"Consume a nonce\": return the current value and increment.\n     *\n     * _Available since v4.1._\n     */\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\n        Counters.Counter storage nonce = _nonces[owner];\n        current = nonce.current();\n        nonce.increment();\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSA.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n */\nabstract contract EIP712 {\n    /* solhint-disable var-name-mixedcase */\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\n    uint256 private immutable _CACHED_CHAIN_ID;\n    address private immutable _CACHED_THIS;\n\n    bytes32 private immutable _HASHED_NAME;\n    bytes32 private immutable _HASHED_VERSION;\n    bytes32 private immutable _TYPE_HASH;\n\n    /* solhint-enable var-name-mixedcase */\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        bytes32 hashedName = keccak256(bytes(name));\n        bytes32 hashedVersion = keccak256(bytes(version));\n        bytes32 typeHash = keccak256(\n            \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n        );\n        _HASHED_NAME = hashedName;\n        _HASHED_VERSION = hashedVersion;\n        _CACHED_CHAIN_ID = block.chainid;\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\n        _CACHED_THIS = address(this);\n        _TYPE_HASH = typeHash;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\n            return _CACHED_DOMAIN_SEPARATOR;\n        } else {\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\n        }\n    }\n\n    function _buildDomainSeparator(\n        bytes32 typeHash,\n        bytes32 nameHash,\n        bytes32 versionHash\n    ) private view returns (bytes32) {\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/Nation/NationStarter.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.15;\n\nimport \"./Nation.sol\";\n\ncontract NationStarter {\n  address[] private _nations;\n\n  event NationStarted(address indexed M, address indexed _summoner);\n\n  function startNation(address _citizenAlpha_, address[] memory _founders) public {\n    Nation nation_ = new Nation(_citizenAlpha_, _founders);\n\n    _nations.push(address(nation_));\n\n    emit NationStarted(address(nation_), msg.sender);\n  }\n\n  function getNations() public view returns (address[] memory nations) {\n    return _nations;\n  }\n\n  function getNationCount() public view returns (uint256 count) {\n    return _nations.length;\n  }\n}\n"
    },
    "contracts/Deployer.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.15;\n\nimport \"./CitizenAlpha.sol\";\nimport \"./Nation/Nation.sol\";\nimport \"./Notary/Notary.sol\";\n\ncontract Deployer {\n  address private _svgRender;\n  address private _metadata;\n  address[] private _citizenships;\n  address[] private _nations;\n  address[] private _notaries;\n\n  event CitizenshipStarted(address indexed citizenship, address indexed founder);\n  event NationStarted(address indexed nation, address indexed founder);\n  event NotaryStarted(address indexed notary, address indexed founder);\n\n  constructor(address _metadata_) {\n    _metadata = _metadata_;\n  }\n\n  function setupDemocracy(\n    string memory name_,\n    string memory symbol_,\n    address[] memory founders\n  ) public {\n    CitizenAlpha citizenAlpha_ = deployCitizenship(_metadata, name_, symbol_);\n    address nation_ = deployNation(address(citizenAlpha_), founders);\n    address notary_ = deployNotary(address(citizenAlpha_), founders);\n    citizenAlpha_.setNation(nation_);\n    citizenAlpha_.setNotary(notary_);\n  }\n\n  function deployCitizenship(\n    address metadata_,\n    string memory name_,\n    string memory symbol_\n  ) public returns (CitizenAlpha) {\n    CitizenAlpha citizenship_ = new CitizenAlpha(metadata_, name_, symbol_);\n    _citizenships.push(address(citizenship_));\n    emit CitizenshipStarted(address(citizenship_), msg.sender);\n    return citizenship_;\n  }\n\n  function deployNation(address citizenAlpha, address[] memory founders) public returns (address) {\n    Nation nation_ = new Nation(citizenAlpha, founders);\n    _nations.push(address(nation_));\n    emit NationStarted(address(nation_), msg.sender);\n    return address(nation_);\n  }\n\n  function deployNotary(address _citizenAlpha_, address[] memory notaries)\n    public\n    returns (address)\n  {\n    Notary notary_ = new Notary(_citizenAlpha_, notaries);\n    _notaries.push(address(notary_));\n    emit NotaryStarted(address(notary_), msg.sender);\n    return address(notary_);\n  }\n\n  function getCitizenships() public view returns (address[] memory citizenships) {\n    return _citizenships;\n  }\n\n  function getCitizenshipCount() public view returns (uint256 count) {\n    return _nations.length;\n  }\n\n  function getNations() public view returns (address[] memory nations) {\n    return _nations;\n  }\n\n  function getNationCount() public view returns (uint256 count) {\n    return _nations.length;\n  }\n\n  function getNotaries() public view returns (address[] memory notaries) {\n    return _notaries;\n  }\n\n  function getNotaryCount() public view returns (uint256 count) {\n    return _notaries.length;\n  }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "istanbul",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}