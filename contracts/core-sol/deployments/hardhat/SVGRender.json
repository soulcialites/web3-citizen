{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_svgColor",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_alias",
          "type": "string"
        }
      ],
      "name": "generate",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "svgColor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8f4de78b4b90e58b7acab62c3a867a19e9784610bd76b89bd0c8dee007b4f641",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1194721",
    "logsBloom": "0x
    "blockHash": "0xa76a2a62741e89a961cf33de9be9aee1f3fc900942f11e1c4625a191464c01a0",
    "transactionHash": "0x8f4de78b4b90e58b7acab62c3a867a19e9784610bd76b89bd0c8dee007b4f641",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 2,
        "transactionHash": "0x8f4de78b4b90e58b7acab62c3a867a19e9784610bd76b89bd0c8dee007b4f641",
        "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xa76a2a62741e89a961cf33de9be9aee1f3fc900942f11e1c4625a191464c01a0"
      }
    ],
    "blockNumber": 2,
    "cumulativeGasUsed": "1194721",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "02f7e50e45f3bba7948d02749cd12f45",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_svgColor\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_alias\",\"type\":\"string\"}],\"name\":\"generate\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"svgColor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SVGRender.sol\":\"SVGRender\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa73959e6ef0b693e4423a562e612370160b934a75e618361ddd8c9c4b8ddbaaf\",\"license\":\"MIT\"},\"contracts/SVGRender.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.15;\\n\\nimport { Base64 } from \\\"base64-sol/base64.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { Strings } from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport { svg } from \\\"./libraries/SVG.sol\\\";\\nimport { svgUtils } from \\\"./libraries/SVGUtils.sol\\\";\\nimport { SVGColor } from \\\"./libraries/SVGColor.sol\\\";\\n\\ncontract SVGRender is Ownable {\\n  using Strings for uint256;\\n  address public svgColor;\\n\\n  constructor(address _svgColor) {\\n    svgColor = _svgColor;\\n  }\\n\\n  function generate(uint256 _tokenId, string memory _alias) public view returns (string memory) {\\n    string memory _bgDef = svgUtils.getDefURL(\\\"charcoal\\\");\\n\\n    return\\n      string(\\n        abi.encodePacked(\\n          svg.start(),\\n          _getDefs(),\\n          svg.rect(\\n            string.concat(\\n              svg.prop(\\\"fill\\\", _bgDef),\\n              svg.prop(\\\"x\\\", \\\"0\\\"),\\n              svg.prop(\\\"y\\\", \\\"0\\\"),\\n              svg.prop(\\\"width\\\", \\\"100%\\\"),\\n              svg.prop(\\\"height\\\", \\\"100%\\\")\\n            ),\\n            svgUtils.NULL\\n          ),\\n          svg.text(\\n            string.concat(\\n              svg.prop(\\\"x\\\", \\\"50%\\\"),\\n              svg.prop(\\\"y\\\", \\\"50%\\\"),\\n              svg.prop(\\\"dominant-baseline\\\", \\\"middle\\\"),\\n              svg.prop(\\\"text-anchor\\\", \\\"middle\\\"),\\n              svg.prop(\\\"font-size\\\", \\\"48px\\\"),\\n              svg.prop(\\\"fill\\\", \\\"white\\\")\\n            ),\\n            string.concat(\\\"CIV #\\\", _tokenId.toString())\\n          ),\\n          svg.text(\\n            string.concat(\\n              svg.prop(\\\"x\\\", \\\"50%\\\"),\\n              svg.prop(\\\"y\\\", \\\"60%\\\"),\\n              svg.prop(\\\"dominant-baseline\\\", \\\"middle\\\"),\\n              svg.prop(\\\"text-anchor\\\", \\\"middle\\\"),\\n              svg.prop(\\\"font-size\\\", \\\"22px\\\"),\\n              svg.prop(\\\"fill\\\", \\\"white\\\")\\n            ),\\n            _alias\\n          ),\\n          svg.end()\\n        )\\n      );\\n  }\\n\\n  function _getDefs() internal view returns (string memory) {\\n    return\\n      svg.defs(\\n        string.concat(\\n          svg.linearGradient(\\n            string.concat(svg.prop(\\\"id\\\", \\\"charcoal\\\"), svg.prop(\\\"gradientTransform\\\", \\\"rotate(140)\\\")),\\n            string.concat(\\n              svg.stop(\\n                string.concat(\\n                  svg.prop(\\\"offset\\\", \\\"0%\\\"),\\n                  svg.prop(\\\"stop-color\\\", SVGColor(svgColor).getRgba(\\\"Dark1\\\"))\\n                )\\n              ),\\n              svg.stop(\\n                string.concat(\\n                  svg.prop(\\\"offset\\\", \\\"70%\\\"),\\n                  svg.prop(\\\"stop-color\\\", SVGColor(svgColor).getRgba(\\\"Dark2\\\"))\\n                )\\n              )\\n            )\\n          )\\n        )\\n      );\\n  }\\n}\\n\",\"keccak256\":\"0x5ac8319a6b5997c29b33bd2d32f44b7f4f60688aedfeadd4ce40a598fea971ac\",\"license\":\"GPL-3.0\"},\"contracts/libraries/SVG.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"./SVGUtils.sol\\\";\\n\\n/**\\n * @title svg\\n * @author Kames Geraghty\\n * @notice SVG construction library using web-like API.\\n * @dev Original code from w1nt3r-eth/hot-chain-svg (https://github.com/w1nt3r-eth/hot-chain-svg)\\n */\\nlibrary svg {\\n  using Strings for uint256;\\n  using Strings for uint8;\\n\\n  function g(string memory _props, string memory _children) internal pure returns (string memory) {\\n    return el(\\\"g\\\", _props, _children);\\n  }\\n\\n  function path(string memory _props, string memory _children)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    return el(\\\"path\\\", _props, _children);\\n  }\\n\\n  function text(string memory _props, string memory _children)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    return el(\\\"text\\\", _props, _children);\\n  }\\n\\n  function line(string memory _props, string memory _children)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    return el(\\\"line\\\", _props, _children);\\n  }\\n\\n  function circle(string memory _props, string memory _children)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    return el(\\\"circle\\\", _props, _children);\\n  }\\n\\n  function circle(string memory _props) internal pure returns (string memory) {\\n    return el(\\\"circle\\\", _props);\\n  }\\n\\n  function rect(string memory _props, string memory _children)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    return el(\\\"rect\\\", _props, _children);\\n  }\\n\\n  function rect(string memory _props) internal pure returns (string memory) {\\n    return el(\\\"rect\\\", _props);\\n  }\\n\\n  function stop(string memory _props) internal pure returns (string memory) {\\n    return el(\\\"stop\\\", _props);\\n  }\\n\\n  function filter(string memory _props, string memory _children)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    return el(\\\"filter\\\", _props, _children);\\n  }\\n\\n  function defs(string memory _children) internal pure returns (string memory) {\\n    return el(\\\"defs\\\", \\\"\\\", _children);\\n  }\\n\\n  function cdata(string memory _content) internal pure returns (string memory) {\\n    return string.concat(\\\"<![CDATA[\\\", _content, \\\"]]>\\\");\\n  }\\n\\n  /* GRADIENTS */\\n  function radialGradient(string memory _props, string memory _children)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    return el(\\\"radialGradient\\\", _props, _children);\\n  }\\n\\n  function linearGradient(string memory _props, string memory _children)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    return el(\\\"linearGradient\\\", _props, _children);\\n  }\\n\\n  function gradientStop(\\n    uint256 offset,\\n    string memory stopColor,\\n    string memory _props\\n  ) internal pure returns (string memory) {\\n    return\\n      el(\\n        \\\"stop\\\",\\n        string.concat(\\n          prop(\\\"stop-color\\\", stopColor),\\n          \\\" \\\",\\n          prop(\\\"offset\\\", string.concat(svgUtils.uint2str(offset), \\\"%\\\")),\\n          \\\" \\\",\\n          _props\\n        )\\n      );\\n  }\\n\\n  function animateTransform(string memory _props) internal pure returns (string memory) {\\n    return el(\\\"animateTransform\\\", _props);\\n  }\\n\\n  function image(string memory _href, string memory _props) internal pure returns (string memory) {\\n    return el(\\\"image\\\", string.concat(prop(\\\"href\\\", _href), \\\" \\\", _props));\\n  }\\n\\n  function start() internal pure returns (string memory) {\\n    return\\n      string.concat(\\n        '<svg width=\\\"400\\\" height=\\\"400\\\" style=\\\"background:#541563\\\" ',\\n        'viewBox=\\\"0 0 400 400\\\" ',\\n        'xmlns=\\\"http://www.w3.org/2000/svg\\\" ',\\n        \\\">\\\"\\n      );\\n  }\\n\\n  function end() internal pure returns (bytes memory) {\\n    return (\\\"</svg>\\\");\\n  }\\n\\n  /* COMMON */\\n  // A generic element, can be used to construct any SVG (or HTML) element\\n  function el(\\n    string memory _tag,\\n    string memory _props,\\n    string memory _children\\n  ) internal pure returns (string memory) {\\n    return string.concat(\\\"<\\\", _tag, \\\" \\\", _props, \\\">\\\", _children, \\\"</\\\", _tag, \\\">\\\");\\n  }\\n\\n  // A generic element, can be used to construct any SVG (or HTML) element without children\\n  function el(string memory _tag, string memory _props) internal pure returns (string memory) {\\n    return string.concat(\\\"<\\\", _tag, \\\" \\\", _props, \\\"/>\\\");\\n  }\\n\\n  // an SVG attribute\\n  function prop(string memory _key, string memory _val) internal pure returns (string memory) {\\n    return string.concat(_key, \\\"=\\\", '\\\"', _val, '\\\" ');\\n  }\\n\\n  function stringifyIntSet(\\n    bytes memory _data,\\n    uint256 _offset,\\n    uint256 _len\\n  ) public pure returns (bytes memory) {\\n    bytes memory res;\\n    require(_data.length >= _offset + _len, \\\"Out of range\\\");\\n    for (uint256 i = _offset; i < _offset + _len; i++) {\\n      res = abi.encodePacked(res, byte2uint8(_data, i).toString(), \\\" \\\");\\n    }\\n    return res;\\n  }\\n\\n  function byte2uint8(bytes memory _data, uint256 _offset) public pure returns (uint8) {\\n    require(_data.length > _offset, \\\"Out of range\\\");\\n    return uint8(_data[_offset]);\\n  }\\n}\\n\",\"keccak256\":\"0xef52c3884017a442187844cd9e54e9b1cfc3b17ff40a3008c7cbec918a7f9f7a\",\"license\":\"MIT\"},\"contracts/libraries/SVGColor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\ncontract SVGColor {\\n  using Strings for uint256;\\n  using Strings for uint8;\\n\\n  mapping(string => bytes) public colors;\\n\\n  constructor() {\\n    colors[\\\"Black\\\"] = hex\\\"000000\\\";\\n    colors[\\\"White\\\"] = hex\\\"FFFFFF\\\";\\n    colors[\\\"Dark1\\\"] = hex\\\"232323\\\";\\n    colors[\\\"Dark2\\\"] = hex\\\"464646\\\";\\n  }\\n\\n  function getColor(string memory _colorName) public view returns (bytes memory) {\\n    require(colors[_colorName].length == 3, \\\"Unknown color\\\");\\n    return abi.encodePacked(colors[_colorName], hex\\\"64\\\");\\n  }\\n\\n  function getColor(string memory _colorName, uint8 _alpha) public view returns (bytes memory) {\\n    require(colors[_colorName].length == 3, \\\"Unknown color\\\");\\n    return abi.encodePacked(colors[_colorName], _alpha);\\n  }\\n\\n  function getRgba(string memory _colorName) public view returns (string memory) {\\n    return string(toRgba(getColor(_colorName), 0));\\n  }\\n\\n  // Input: array of colors (without alpha)\\n  // Ouputs a linearGradient\\n  function autoLinearGradient(\\n    bytes memory _colors,\\n    bytes memory _id,\\n    bytes memory _customAttributes\\n  ) public view returns (bytes memory) {\\n    return this.autoLinearGradient(\\\"\\\", _colors, _id, _customAttributes);\\n  }\\n\\n  function autoLinearGradient(\\n    bytes memory _coordinates,\\n    bytes memory _colors,\\n    bytes memory _id,\\n    bytes memory _customAttributes\\n  ) external view returns (bytes memory) {\\n    bytes memory _b;\\n    if (_coordinates.length > 3) {\\n      _b = abi.encodePacked(uint8(128), _coordinates);\\n    } else {\\n      _b = hex\\\"00\\\";\\n    }\\n    // Count the number of colors passed, each on 4 byte\\n    uint256 colorCount = _colors.length / 4;\\n    uint8 i = 0;\\n    while (i < colorCount) {\\n      _b = abi.encodePacked(\\n        _b,\\n        uint8(i * (100 / (colorCount - 1))), // grad. stop %\\n        uint8(_colors[i * 4]),\\n        uint8(_colors[i * 4 + 1]),\\n        uint8(_colors[i * 4 + 2]),\\n        uint8(_colors[i * 4 + 3])\\n      );\\n      i++;\\n    }\\n    return linearGradient(_b, _id, _customAttributes);\\n  }\\n\\n  function linearGradient(\\n    bytes memory _lg,\\n    bytes memory _id,\\n    bytes memory _customAttributes\\n  ) public pure returns (bytes memory) {\\n    bytes memory grdata;\\n    uint8 offset = 1;\\n\\n    if (uint8(_lg[0]) & 128 == 128) {\\n      grdata = abi.encodePacked(\\n        'x1=\\\"',\\n        byte2uint8(_lg, 1).toString(),\\n        '%\\\" x2=\\\"',\\n        byte2uint8(_lg, 2).toString(),\\n        '%\\\" y1=\\\"',\\n        byte2uint8(_lg, 3).toString(),\\n        '%\\\" y2=\\\"',\\n        byte2uint8(_lg, 4).toString(),\\n        '%\\\"'\\n      );\\n      offset = 5;\\n    }\\n    grdata = abi.encodePacked('<linearGradient id=\\\"', _id, '\\\" ', _customAttributes, grdata, \\\">\\\");\\n    for (uint256 i = offset; i < _lg.length; i += 5) {\\n      grdata = abi.encodePacked(\\n        grdata,\\n        '<stop offset=\\\"',\\n        byte2uint8(_lg, i).toString(),\\n        '%\\\" stop-color=\\\"',\\n        toRgba(_lg, i + 1),\\n        '\\\" id=\\\"',\\n        _id,\\n        byte2uint8(_lg, i).toString(),\\n        '\\\"/>'\\n      );\\n    }\\n    return abi.encodePacked(grdata, \\\"</linearGradient>\\\");\\n  }\\n\\n  function toRgba(bytes memory _rgba, uint256 offset) public pure returns (bytes memory) {\\n    return\\n      abi.encodePacked(\\n        \\\"rgba(\\\",\\n        byte2uint8(_rgba, offset).toString(),\\n        \\\",\\\",\\n        byte2uint8(_rgba, offset + 1).toString(),\\n        \\\",\\\",\\n        byte2uint8(_rgba, offset + 2).toString(),\\n        \\\",\\\",\\n        byte2uint8(_rgba, offset + 3).toString(),\\n        \\\"%)\\\"\\n      );\\n  }\\n\\n  function byte2uint8(bytes memory _data, uint256 _offset) public pure returns (uint8) {\\n    require(_data.length > _offset, \\\"Out of range\\\");\\n    return uint8(_data[_offset]);\\n  }\\n\\n  // formats rgba white with a specified opacity / alpha\\n  function white_a(uint256 _a) internal pure returns (string memory) {\\n    return rgba(255, 255, 255, _a);\\n  }\\n\\n  // formats rgba black with a specified opacity / alpha\\n  function black_a(uint256 _a) internal pure returns (string memory) {\\n    return rgba(0, 0, 0, _a);\\n  }\\n\\n  // formats generic rgba color in css\\n  function rgba(\\n    uint256 _r,\\n    uint256 _g,\\n    uint256 _b,\\n    uint256 _a\\n  ) internal pure returns (string memory) {\\n    string memory formattedA = _a < 100 ? string.concat(\\\"0.\\\", uint2str(_a)) : \\\"1\\\";\\n    return\\n      string.concat(\\n        \\\"rgba(\\\",\\n        uint2str(_r),\\n        \\\",\\\",\\n        uint2str(_g),\\n        \\\",\\\",\\n        uint2str(_b),\\n        \\\",\\\",\\n        formattedA,\\n        \\\")\\\"\\n      );\\n  }\\n\\n  function uint2str(uint256 _i) internal pure returns (string memory _uintAsString) {\\n    if (_i == 0) {\\n      return \\\"0\\\";\\n    }\\n    uint256 j = _i;\\n    uint256 len;\\n    while (j != 0) {\\n      len++;\\n      j /= 10;\\n    }\\n    bytes memory bstr = new bytes(len);\\n    uint256 k = len;\\n    while (_i != 0) {\\n      k = k - 1;\\n      uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\n      bytes1 b1 = bytes1(temp);\\n      bstr[k] = b1;\\n      _i /= 10;\\n    }\\n    return string(bstr);\\n  }\\n}\\n\",\"keccak256\":\"0x2e33aeee09dbb045bc969ba9b9bc119394b12f0c1d9014172fea986df942af9c\",\"license\":\"MIT\"},\"contracts/libraries/SVGUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n/**\\n  * @title  SVG Utilities\\n  * @author Kames Geraghty\\n  * @notice The SVG Utilities Library provides functions for constructing SVG; format CSS and numbers.\\n  * @dev Original code from w1nt3r-eth/hot-chain-svg (https://github.com/w1nt3r-eth/hot-chain-svg)\\n*/\\nlibrary svgUtils {\\n    using Strings for uint256;\\n    using Strings for uint8;\\n    \\n    /// @notice Empty SVG element\\n    string internal constant NULL = \\\"\\\";\\n\\n    /**\\n     * @notice Formats a CSS variable line. Includes a semicolon for formatting.\\n     * @param _key User for which to calculate prize amount.\\n     * @param _val User for which to calculate prize amount.\\n     * @return string Generated CSS variable.\\n    */\\n    function setCssVar(string memory _key, string memory _val)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return string.concat(\\\"--\\\", _key, \\\":\\\", _val, \\\";\\\");\\n    }\\n\\n    /**\\n     * @notice Formats getting a css variable\\n     * @param _key User for which to calculate prize amount.\\n     * @return string Generated CSS variable.\\n    */\\n    function getCssVar(string memory _key)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return string.concat(\\\"var(--\\\", _key, \\\")\\\");\\n    }\\n\\n    // formats getting a def URL\\n    function getDefURL(string memory _id)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return string.concat(\\\"url(#\\\", _id, \\\")\\\");\\n    }\\n\\n    // checks if two strings are equal\\n    function stringsEqual(string memory _a, string memory _b)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return\\n            keccak256(abi.encodePacked(_a)) == keccak256(abi.encodePacked(_b));\\n    }\\n\\n    // returns the length of a string in characters\\n    function utfStringLength(string memory _str)\\n        internal\\n        pure\\n        returns (uint256 length)\\n    {\\n        uint256 i = 0;\\n        bytes memory string_rep = bytes(_str);\\n\\n        while (i < string_rep.length) {\\n            if (string_rep[i] >> 7 == 0) i += 1;\\n            else if (string_rep[i] >> 5 == bytes1(uint8(0x6))) i += 2;\\n            else if (string_rep[i] >> 4 == bytes1(uint8(0xE))) i += 3;\\n            else if (string_rep[i] >> 3 == bytes1(uint8(0x1E)))\\n                i += 4;\\n                //For safety\\n            else i += 1;\\n\\n            length++;\\n        }\\n    }\\n\\n    function round2Txt(\\n        uint256 _value,\\n        uint8 _decimals,\\n        uint8 _prec\\n    ) internal pure returns (bytes memory) {\\n        return abi.encodePacked(\\n            (_value / 10 ** _decimals).toString(), \\n            \\\".\\\",\\n            ( _value / 10 ** (_decimals - _prec) -\\n                _value / 10 ** (_decimals ) * 10 ** _prec\\n            ).toString()\\n        );\\n    }\\n\\n     // converts an unsigned integer to a string\\n     function uint2str(uint256 _i)\\n     internal\\n     pure\\n     returns (string memory _uintAsString)\\n {\\n     if (_i == 0) {\\n         return \\\"0\\\";\\n     }\\n     uint256 j = _i;\\n     uint256 len;\\n     while (j != 0) {\\n         len++;\\n         j /= 10;\\n     }\\n     bytes memory bstr = new bytes(len);\\n     uint256 k = len;\\n     while (_i != 0) {\\n         k = k - 1;\\n         uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\n         bytes1 b1 = bytes1(temp);\\n         bstr[k] = b1;\\n         _i /= 10;\\n     }\\n     return string(bstr);\\n }\\n}\\n\",\"keccak256\":\"0xe8ac1b5676a5d9850445e97799a09a1a30026f03728cb2286eeba23bc57b06e0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516114aa3803806114aa83398101604081905261002f916100ad565b6100383361005d565b600180546001600160a01b0319166001600160a01b03929092169190911790556100dd565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100bf57600080fd5b81516001600160a01b03811681146100d657600080fd5b9392505050565b6113be806100ec6000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063231c1d431461005c5780635942fda914610085578063715018a6146100b05780638da5cb5b146100ba578063f2fde38b146100cb575b600080fd5b61006f61006a366004610e69565b6100de565b60405161007c9190610f23565b60405180910390f35b600154610098906001600160a01b031681565b6040516001600160a01b03909116815260200161007c565b6100b8610686565b005b6000546001600160a01b0316610098565b6100b86100d9366004610f56565b61069a565b6060600061010b6040518060400160405280600881526020016718da185c98dbd85b60c21b815250610718565b9050610115610741565b61011d61080b565b61027761014660405180604001604052806004815260200163199a5b1b60e21b81525085610ae7565b610182604051806040016040528060018152602001600f60fb1b815250604051806040016040528060018152602001600360fc1b815250610ae7565b6101be604051806040016040528060018152602001607960f81b815250604051806040016040528060018152602001600360fc1b815250610ae7565b610201604051806040016040528060058152602001640eed2c8e8d60db1b815250604051806040016040528060048152602001633130302560e01b815250610ae7565b610245604051806040016040528060068152602001651a195a59da1d60d21b815250604051806040016040528060048152602001633130302560e01b815250610ae7565b604051602001610259959493929190610f7f565b60408051601f19818403018152602083019091526000825290610b13565b61046d6102b8604051806040016040528060018152602001600f60fb1b8152506040518060400160405280600381526020016235302560e81b815250610ae7565b6102f6604051806040016040528060018152602001607960f81b8152506040518060400160405280600381526020016235302560e81b815250610ae7565b61034760405180604001604052806011815260200170646f6d696e616e742d626173656c696e6560781b815250604051806040016040528060068152602001656d6964646c6560d01b815250610ae7565b6103926040518060400160405280600b81526020016a3a32bc3a16b0b731b437b960a91b815250604051806040016040528060068152602001656d6964646c6560d01b815250610ae7565b6103d960405180604001604052806009815260200168666f6e742d73697a6560b81b8152506040518060400160405280600481526020016306870e0f60e31b815250610ae7565b61041c60405180604001604052806004815260200163199a5b1b60e21b81525060405180604001604052806005815260200164776869746560d81b815250610ae7565b60405160200161043196959493929190610fea565b60405160208183030381529060405261044989610b43565b6040516020016104599190611069565b604051602081830303815290604052610c4c565b61063c6104ae604051806040016040528060018152602001600f60fb1b8152506040518060400160405280600381526020016235302560e81b815250610ae7565b6104ec604051806040016040528060018152602001607960f81b8152506040518060400160405280600381526020016236302560e81b815250610ae7565b61053d60405180604001604052806011815260200170646f6d696e616e742d626173656c696e6560781b815250604051806040016040528060068152602001656d6964646c6560d01b815250610ae7565b6105886040518060400160405280600b81526020016a3a32bc3a16b0b731b437b960a91b815250604051806040016040528060068152602001656d6964646c6560d01b815250610ae7565b6105cf60405180604001604052806009815260200168666f6e742d73697a6560b81b8152506040518060400160405280600481526020016306464e0f60e31b815250610ae7565b61061260405180604001604052806004815260200163199a5b1b60e21b81525060405180604001604052806005815260200164776869746560d81b815250610ae7565b60405160200161062796959493929190610fea565b60405160208183030381529060405288610c4c565b6040805180820190915260068152651e17b9bb339f60d11b602082015260405160200161066e96959493929190610fea565b60405160208183030381529060405291505092915050565b61068e610c75565b6106986000610ccf565b565b6106a2610c75565b6001600160a01b03811661070c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b61071581610ccf565b50565b60608160405160200161072b9190611096565b6040516020818303038152906040529050919050565b60606040516020016107f7907f3c7376672077696474683d2234303022206865696768743d223430302220737481527f796c653d226261636b67726f756e643a2335343135363322200000000000000060208201527503b34b2bba137bc1e91181018101a1818101a181811160551b60398201527f786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323030302f7376604f8201526203391160ed1b606f820152601f60f91b607282015260730190565b604051602081830303815290604052905090565b6060610ae2610abe610857604051806040016040528060028152602001611a5960f21b8152506040518060400160405280600881526020016718da185c98dbd85b60c21b815250610ae7565b6108ad604051806040016040528060118152602001706772616469656e745472616e73666f726d60781b8152506040518060400160405280600b81526020016a726f74617465283134302960a81b815250610ae7565b6040516020016108be9291906110ce565b6040516020818303038152906040526109ea610912604051806040016040528060068152602001651bd9999cd95d60d21b81525060405180604001604052806002815260200161302560f01b815250610ae7565b604080518082018252600a81526939ba37b816b1b7b637b960b11b60208201526001549151630cde589160e41b81526109c5926001600160a01b03169063cde589109061097b906004016020808252600590820152644461726b3160d81b604082015260600190565b600060405180830381865afa158015610998573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109c091908101906110fd565b610ae7565b6040516020016109d69291906110ce565b604051602081830303815290604052610d1f565b610a99610a30604051806040016040528060068152602001651bd9999cd95d60d21b8152506040518060400160405280600381526020016237302560e81b815250610ae7565b604080518082018252600a81526939ba37b816b1b7b637b960b11b60208201526001549151630cde589160e41b81526109c5926001600160a01b03169063cde589109061097b906004016020808252600590820152642230b9359960d91b604082015260600190565b604051602001610aaa9291906110ce565b604051602081830303815290604052610d4d565b604051602001610ace9190611174565b604051602081830303815290604052610d80565b905090565b60608282604051602001610afc929190611190565b604051602081830303815290604052905092915050565b6060610b3c604051806040016040528060048152602001631c9958dd60e21b8152508484610db4565b9392505050565b606081600003610b6a5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610b945780610b7e816111fb565b9150610b8d9050600a8361122a565b9150610b6e565b60008167ffffffffffffffff811115610baf57610baf610dfa565b6040519080825280601f01601f191660200182016040528015610bd9576020820181803683370190505b5090505b8415610c4457610bee60018361123e565b9150610bfb600a86611255565b610c06906030611269565b60f81b818381518110610c1b57610c1b611281565b60200101906001600160f81b031916908160001a905350610c3d600a8661122a565b9450610bdd565b949350505050565b6060610b3c604051806040016040528060048152602001631d195e1d60e21b8152508484610db4565b6000546001600160a01b031633146106985760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610703565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6060610d4760405180604001604052806004815260200163073746f760e41b81525083610de5565b92915050565b6060610b3c6040518060400160405280600e81526020016d1b1a5b99585c91dc98591a595b9d60921b8152508484610db4565b6060610d47604051806040016040528060048152602001636465667360e01b81525060405180602001604052806000815250845b606083838386604051602001610dcd9493929190611297565b60405160208183030381529060405290509392505050565b60608282604051602001610afc929190611330565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610e3957610e39610dfa565b604052919050565b600067ffffffffffffffff821115610e5b57610e5b610dfa565b50601f01601f191660200190565b60008060408385031215610e7c57600080fd5b82359150602083013567ffffffffffffffff811115610e9a57600080fd5b8301601f81018513610eab57600080fd5b8035610ebe610eb982610e41565b610e10565b818152866020838501011115610ed357600080fd5b816020840160208301376000602083830101528093505050509250929050565b60005b83811015610f0e578181015183820152602001610ef6565b83811115610f1d576000848401525b50505050565b6020815260008251806020840152610f42816040850160208701610ef3565b601f01601f19169190910160400192915050565b600060208284031215610f6857600080fd5b81356001600160a01b0381168114610b3c57600080fd5b60008651610f91818460208b01610ef3565b865190830190610fa5818360208b01610ef3565b8651910190610fb8818360208a01610ef3565b8551910190610fcb818360208901610ef3565b8451910190610fde818360208801610ef3565b01979650505050505050565b600087516020610ffd8285838d01610ef3565b8851918401916110108184848d01610ef3565b88519201916110228184848c01610ef3565b87519201916110348184848b01610ef3565b86519201916110468184848a01610ef3565b85519201916110588184848901610ef3565b919091019998505050505050505050565b64434956202360d81b815260008251611089816005850160208701610ef3565b9190910160050192915050565b6475726c282360d81b8152600082516110b6816005850160208701610ef3565b602960f81b6005939091019283015250600601919050565b600083516110e0818460208801610ef3565b8351908301906110f4818360208801610ef3565b01949350505050565b60006020828403121561110f57600080fd5b815167ffffffffffffffff81111561112657600080fd5b8201601f8101841361113757600080fd5b8051611145610eb982610e41565b81815285602083850101111561115a57600080fd5b61116b826020830160208601610ef3565b95945050505050565b60008251611186818460208701610ef3565b9190910192915050565b600083516111a2818460208801610ef3565b603d60f81b908301908152601160f91b600182015283516111ca816002840160208801610ef3565b61011160f51b60029290910191820152600401949350505050565b634e487b7160e01b600052601160045260246000fd5b60006001820161120d5761120d6111e5565b5060010190565b634e487b7160e01b600052601260045260246000fd5b60008261123957611239611214565b500490565b600082821015611250576112506111e5565b500390565b60008261126457611264611214565b500690565b6000821982111561127c5761127c6111e5565b500190565b634e487b7160e01b600052603260045260246000fd5b600f60fa1b8152600085516112b3816001850160208a01610ef3565b600160fd1b60019184019182015285516112d4816002840160208a01610ef3565b808201915050601f60f91b80600283015285516112f8816003850160208a01610ef3565b613c2f60f01b60039390910192830152845161131b816005850160208901610ef3565b60059201918201526006019695505050505050565b600f60fa1b81526000835161134c816001850160208801610ef3565b600160fd1b600191840191820152835161136d816002840160208801610ef3565b61179f60f11b6002929091019182015260040194935050505056fea2646970667358221220a645e0e6201f82868c67af2964b7d175fb1d2281cfb30f7d85351f9ec47475d464736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c8063231c1d431461005c5780635942fda914610085578063715018a6146100b05780638da5cb5b146100ba578063f2fde38b146100cb575b600080fd5b61006f61006a366004610e69565b6100de565b60405161007c9190610f23565b60405180910390f35b600154610098906001600160a01b031681565b6040516001600160a01b03909116815260200161007c565b6100b8610686565b005b6000546001600160a01b0316610098565b6100b86100d9366004610f56565b61069a565b6060600061010b6040518060400160405280600881526020016718da185c98dbd85b60c21b815250610718565b9050610115610741565b61011d61080b565b61027761014660405180604001604052806004815260200163199a5b1b60e21b81525085610ae7565b610182604051806040016040528060018152602001600f60fb1b815250604051806040016040528060018152602001600360fc1b815250610ae7565b6101be604051806040016040528060018152602001607960f81b815250604051806040016040528060018152602001600360fc1b815250610ae7565b610201604051806040016040528060058152602001640eed2c8e8d60db1b815250604051806040016040528060048152602001633130302560e01b815250610ae7565b610245604051806040016040528060068152602001651a195a59da1d60d21b815250604051806040016040528060048152602001633130302560e01b815250610ae7565b604051602001610259959493929190610f7f565b60408051601f19818403018152602083019091526000825290610b13565b61046d6102b8604051806040016040528060018152602001600f60fb1b8152506040518060400160405280600381526020016235302560e81b815250610ae7565b6102f6604051806040016040528060018152602001607960f81b8152506040518060400160405280600381526020016235302560e81b815250610ae7565b61034760405180604001604052806011815260200170646f6d696e616e742d626173656c696e6560781b815250604051806040016040528060068152602001656d6964646c6560d01b815250610ae7565b6103926040518060400160405280600b81526020016a3a32bc3a16b0b731b437b960a91b815250604051806040016040528060068152602001656d6964646c6560d01b815250610ae7565b6103d960405180604001604052806009815260200168666f6e742d73697a6560b81b8152506040518060400160405280600481526020016306870e0f60e31b815250610ae7565b61041c60405180604001604052806004815260200163199a5b1b60e21b81525060405180604001604052806005815260200164776869746560d81b815250610ae7565b60405160200161043196959493929190610fea565b60405160208183030381529060405261044989610b43565b6040516020016104599190611069565b604051602081830303815290604052610c4c565b61063c6104ae604051806040016040528060018152602001600f60fb1b8152506040518060400160405280600381526020016235302560e81b815250610ae7565b6104ec604051806040016040528060018152602001607960f81b8152506040518060400160405280600381526020016236302560e81b815250610ae7565b61053d60405180604001604052806011815260200170646f6d696e616e742d626173656c696e6560781b815250604051806040016040528060068152602001656d6964646c6560d01b815250610ae7565b6105886040518060400160405280600b81526020016a3a32bc3a16b0b731b437b960a91b815250604051806040016040528060068152602001656d6964646c6560d01b815250610ae7565b6105cf60405180604001604052806009815260200168666f6e742d73697a6560b81b8152506040518060400160405280600481526020016306464e0f60e31b815250610ae7565b61061260405180604001604052806004815260200163199a5b1b60e21b81525060405180604001604052806005815260200164776869746560d81b815250610ae7565b60405160200161062796959493929190610fea565b60405160208183030381529060405288610c4c565b6040805180820190915260068152651e17b9bb339f60d11b602082015260405160200161066e96959493929190610fea565b60405160208183030381529060405291505092915050565b61068e610c75565b6106986000610ccf565b565b6106a2610c75565b6001600160a01b03811661070c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b61071581610ccf565b50565b60608160405160200161072b9190611096565b6040516020818303038152906040529050919050565b60606040516020016107f7907f3c7376672077696474683d2234303022206865696768743d223430302220737481527f796c653d226261636b67726f756e643a2335343135363322200000000000000060208201527503b34b2bba137bc1e91181018101a1818101a181811160551b60398201527f786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323030302f7376604f8201526203391160ed1b606f820152601f60f91b607282015260730190565b604051602081830303815290604052905090565b6060610ae2610abe610857604051806040016040528060028152602001611a5960f21b8152506040518060400160405280600881526020016718da185c98dbd85b60c21b815250610ae7565b6108ad604051806040016040528060118152602001706772616469656e745472616e73666f726d60781b8152506040518060400160405280600b81526020016a726f74617465283134302960a81b815250610ae7565b6040516020016108be9291906110ce565b6040516020818303038152906040526109ea610912604051806040016040528060068152602001651bd9999cd95d60d21b81525060405180604001604052806002815260200161302560f01b815250610ae7565b604080518082018252600a81526939ba37b816b1b7b637b960b11b60208201526001549151630cde589160e41b81526109c5926001600160a01b03169063cde589109061097b906004016020808252600590820152644461726b3160d81b604082015260600190565b600060405180830381865afa158015610998573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109c091908101906110fd565b610ae7565b6040516020016109d69291906110ce565b604051602081830303815290604052610d1f565b610a99610a30604051806040016040528060068152602001651bd9999cd95d60d21b8152506040518060400160405280600381526020016237302560e81b815250610ae7565b604080518082018252600a81526939ba37b816b1b7b637b960b11b60208201526001549151630cde589160e41b81526109c5926001600160a01b03169063cde589109061097b906004016020808252600590820152642230b9359960d91b604082015260600190565b604051602001610aaa9291906110ce565b604051602081830303815290604052610d4d565b604051602001610ace9190611174565b604051602081830303815290604052610d80565b905090565b60608282604051602001610afc929190611190565b604051602081830303815290604052905092915050565b6060610b3c604051806040016040528060048152602001631c9958dd60e21b8152508484610db4565b9392505050565b606081600003610b6a5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610b945780610b7e816111fb565b9150610b8d9050600a8361122a565b9150610b6e565b60008167ffffffffffffffff811115610baf57610baf610dfa565b6040519080825280601f01601f191660200182016040528015610bd9576020820181803683370190505b5090505b8415610c4457610bee60018361123e565b9150610bfb600a86611255565b610c06906030611269565b60f81b818381518110610c1b57610c1b611281565b60200101906001600160f81b031916908160001a905350610c3d600a8661122a565b9450610bdd565b949350505050565b6060610b3c604051806040016040528060048152602001631d195e1d60e21b8152508484610db4565b6000546001600160a01b031633146106985760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610703565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6060610d4760405180604001604052806004815260200163073746f760e41b81525083610de5565b92915050565b6060610b3c6040518060400160405280600e81526020016d1b1a5b99585c91dc98591a595b9d60921b8152508484610db4565b6060610d47604051806040016040528060048152602001636465667360e01b81525060405180602001604052806000815250845b606083838386604051602001610dcd9493929190611297565b60405160208183030381529060405290509392505050565b60608282604051602001610afc929190611330565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610e3957610e39610dfa565b604052919050565b600067ffffffffffffffff821115610e5b57610e5b610dfa565b50601f01601f191660200190565b60008060408385031215610e7c57600080fd5b82359150602083013567ffffffffffffffff811115610e9a57600080fd5b8301601f81018513610eab57600080fd5b8035610ebe610eb982610e41565b610e10565b818152866020838501011115610ed357600080fd5b816020840160208301376000602083830101528093505050509250929050565b60005b83811015610f0e578181015183820152602001610ef6565b83811115610f1d576000848401525b50505050565b6020815260008251806020840152610f42816040850160208701610ef3565b601f01601f19169190910160400192915050565b600060208284031215610f6857600080fd5b81356001600160a01b0381168114610b3c57600080fd5b60008651610f91818460208b01610ef3565b865190830190610fa5818360208b01610ef3565b8651910190610fb8818360208a01610ef3565b8551910190610fcb818360208901610ef3565b8451910190610fde818360208801610ef3565b01979650505050505050565b600087516020610ffd8285838d01610ef3565b8851918401916110108184848d01610ef3565b88519201916110228184848c01610ef3565b87519201916110348184848b01610ef3565b86519201916110468184848a01610ef3565b85519201916110588184848901610ef3565b919091019998505050505050505050565b64434956202360d81b815260008251611089816005850160208701610ef3565b9190910160050192915050565b6475726c282360d81b8152600082516110b6816005850160208701610ef3565b602960f81b6005939091019283015250600601919050565b600083516110e0818460208801610ef3565b8351908301906110f4818360208801610ef3565b01949350505050565b60006020828403121561110f57600080fd5b815167ffffffffffffffff81111561112657600080fd5b8201601f8101841361113757600080fd5b8051611145610eb982610e41565b81815285602083850101111561115a57600080fd5b61116b826020830160208601610ef3565b95945050505050565b60008251611186818460208701610ef3565b9190910192915050565b600083516111a2818460208801610ef3565b603d60f81b908301908152601160f91b600182015283516111ca816002840160208801610ef3565b61011160f51b60029290910191820152600401949350505050565b634e487b7160e01b600052601160045260246000fd5b60006001820161120d5761120d6111e5565b5060010190565b634e487b7160e01b600052601260045260246000fd5b60008261123957611239611214565b500490565b600082821015611250576112506111e5565b500390565b60008261126457611264611214565b500690565b6000821982111561127c5761127c6111e5565b500190565b634e487b7160e01b600052603260045260246000fd5b600f60fa1b8152600085516112b3816001850160208a01610ef3565b600160fd1b60019184019182015285516112d4816002840160208a01610ef3565b808201915050601f60f91b80600283015285516112f8816003850160208a01610ef3565b613c2f60f01b60039390910192830152845161131b816005850160208901610ef3565b60059201918201526006019695505050505050565b600f60fa1b81526000835161134c816001850160208801610ef3565b600160fd1b600191840191820152835161136d816002840160208801610ef3565b61179f60f11b6002929091019182015260040194935050505056fea2646970667358221220a645e0e6201f82868c67af2964b7d175fb1d2281cfb30f7d85351f9ec47475d464736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 550,
        "contract": "contracts/SVGRender.sol:SVGRender",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 12010,
        "contract": "contracts/SVGRender.sol:SVGRender",
        "label": "svgColor",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}