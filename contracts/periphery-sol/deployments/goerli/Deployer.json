{
  "address": "0x804305c203D26ce11cb124FDBdf58e3FC1788f29",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_metadata_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "metadata_",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "address[]",
          "name": "founders",
          "type": "address[]"
        }
      ],
      "name": "deployCitizenship",
      "outputs": [
        {
          "internalType": "contract CitizenAlpha",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "citizenAlpha",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "founders",
          "type": "address[]"
        }
      ],
      "name": "deployNation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_citizenAlpha_",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "notaries",
          "type": "address[]"
        }
      ],
      "name": "deployNotary",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCitizenshipCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCitizenships",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "citizenships",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNationCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNations",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "nations",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNotaries",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "notaries",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNotaryCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "nationName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "nationSymbol",
          "type": "string"
        },
        {
          "internalType": "address[]",
          "name": "founders",
          "type": "address[]"
        }
      ],
      "name": "setupDemocracy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa0c48f1bb0bef4af06559be5bb3ebe51ee2874ca39ebc7e55b711002c16ff419",
  "receipt": {
    "to": null,
    "from": "0x9342d17D9161d642F73aE9Feebb627F46F1029C5",
    "contractAddress": "0x804305c203D26ce11cb124FDBdf58e3FC1788f29",
    "transactionIndex": 40,
    "gasUsed": "5304522",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x5c30ae6074085f7d3649aaa63cd392944287c389bcd7a345e3fdd05e26dde0c4",
    "transactionHash": "0xa0c48f1bb0bef4af06559be5bb3ebe51ee2874ca39ebc7e55b711002c16ff419",
    "logs": [],
    "blockNumber": 7380559,
    "cumulativeGasUsed": "21063092",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0156a3d673EfDdDab6A13d09dD311036554fA6BF"
  ],
  "numDeployments": 3,
  "solcInputHash": "e3a87c3b77886dd67814dcbca5b97b8a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_metadata_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"metadata_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"founders\",\"type\":\"address[]\"}],\"name\":\"deployCitizenship\",\"outputs\":[{\"internalType\":\"contract CitizenAlpha\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"citizenAlpha\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"founders\",\"type\":\"address[]\"}],\"name\":\"deployNation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_citizenAlpha_\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"notaries\",\"type\":\"address[]\"}],\"name\":\"deployNotary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCitizenshipCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCitizenships\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"citizenships\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNationCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNations\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"nations\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNotaries\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"notaries\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNotaryCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"nationName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"nationSymbol\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"founders\",\"type\":\"address[]\"}],\"name\":\"setupDemocracy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Deployer.sol\":\"Deployer\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5b35d8e68aeaccc685239bd9dd79b9ba01a0357930f8a3307ab85511733d9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\",\"keccak256\":\"0x13f5e15f2a0650c0b6aaee2ef19e89eaf4870d6e79662d572a393334c1397247\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x0b606994df12f0ce35f6d2f6dcdde7e55e6899cdef7e00f180980caa81e3844e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5050943b32b6a8f282573d166b2e9d87ab7eb4dbba4ab6acf36ecb54fe6995e4\",\"license\":\"MIT\"},\"@web3-citizen/core-sol/contracts/CitizenAlpha.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { ERC721 } from \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport { Metadata } from \\\"./Metadata.sol\\\";\\nimport { Nation } from \\\"./Nation/Nation.sol\\\";\\nimport { Notary } from \\\"./Notary/Notary.sol\\\";\\n\\n/**\\n * @title CitizenAlpha\\n * @author Kames Geraghty\\n */\\ncontract CitizenAlpha is ERC721, Ownable {\\n  /// @notice Total tokens issued\\n  uint256 private _idCounter;\\n\\n  /// @notice Metadata instance\\n  address private _metadata;\\n\\n  /// @notice Notary instance\\n  address private _notary;\\n\\n  /// @notice TrustResolver instance\\n  address private _resolver;\\n\\n  /// @notice tokenURISplit logic operator\\n  bool private _tokenURISplit;\\n\\n  /// @notice Reverse lookup of a tokenId using the owner address\\n  mapping(address => uint256) private _tokenIds;\\n\\n  /// @notice Lookup address of Citizenship trust link\\n  mapping(address => address) private _links;\\n\\n  /**\\n   * @notice Emit when Metadata instnace is updated.\\n   * @param metadata Address of new Metadata instance\\n   */\\n  event NewMetadata(address metadata);\\n\\n  /**\\n   * @notice Emit when Nation instnace is updated.\\n   * @param nation Address of new Nation instance\\n   */\\n  event NewNation(address nation);\\n\\n  /**\\n   * @notice Emit when Notary instnace is updated.\\n   * @param notary Address of new Notary instance\\n   */\\n  event NewNotary(address notary);\\n\\n  /**\\n   * @notice Emit when Resolver instnace is updated.\\n   * @param resolver Address of new Resolver instance\\n   */\\n  event NewResolver(address resolver);\\n\\n  /**\\n   * @notice Emit when Citizenship is issued.\\n   * @param id Citizen ID\\n   * @param citizen Address of new Citizen\\n   * @param link Address of  Citizen issuing new Citizenship\\n   */\\n  event Issued(uint256 id, address indexed citizen, address indexed link);\\n\\n  /**\\n   * @notice Emit when Citizenship is revoked.\\n   * @param id Citizen ID\\n   * @param citizen Address of new Citizen\\n   * @param link Address of Founder revoking Citizenship\\n   */\\n  event Revoked(uint256 id, address indexed citizen, address indexed link);\\n\\n  /**\\n   * @notice CitizenAlpha Construction\\n   * @param metadata_ address - Metadata instance\\n   * @param name_ string - Name of ERC721 token\\n   * @param symbol_ string - Symbol of ERC721 token\\n   */\\n  constructor(\\n    address metadata_,\\n    string memory name_,\\n    string memory symbol_,\\n    address[] memory founders_\\n  ) ERC721(name_, symbol_) {\\n    _metadata = metadata_;\\n    for (uint256 i = 0; i < founders_.length; i++) {\\n      _issue(founders_[i], address(0));\\n    }\\n  }\\n\\n  /* ===================================================================================== */\\n  /* External Functions                                                                    */\\n  /* ===================================================================================== */\\n\\n  /**\\n   * @notice Get Metadata instance\\n   * @return metadata Metadata\\n   */\\n  function getMetadata() external view returns (address metadata) {\\n    return _metadata;\\n  }\\n\\n  /**\\n   * @notice Get Notary instance\\n   * @return notary Notary\\n   */\\n  function getNotary() external view returns (address notary) {\\n    return _notary;\\n  }\\n\\n  /**\\n   * @notice Get Resolver instance\\n   * @return resolver Resolver\\n   */\\n  function getResolver() external view returns (address resolver) {\\n    return _resolver;\\n  }\\n\\n  /**\\n   * @notice Read totalIssued (_idCounter)\\n   * @return totalIssued uint256\\n   */\\n  function totalIssued() external view returns (uint256) {\\n    return _idCounter;\\n  }\\n\\n  /**\\n   * @notice Check Citizenship ID\\n   * @param citizen address\\n   * @return id uint256\\n   */\\n  function getId(address citizen) external view returns (uint256) {\\n    require(_isCitizen(citizen), \\\"CitizenAlpha:not-active-citizen\\\");\\n    return _tokenIds[citizen];\\n  }\\n\\n  /**\\n   * @notice Lookup Citizenship link\\n   * @param citizen address\\n   * @return link address\\n   */\\n  function getLink(address citizen) external view returns (address link) {\\n    return _links[citizen];\\n  }\\n\\n  /**\\n   * @notice Check Role status of Citizen via Nation\\n   * @param citizen Address of Citizen\\n   * @return status bool\\n   */\\n  function hasRole(\\n    address nation,\\n    bytes32 role,\\n    address citizen\\n  ) external view returns (bool) {\\n    return Nation(nation).hasRole(role, citizen);\\n  }\\n\\n  /**\\n   * @notice Check Citizenship status\\n   * @param citizen Address of potential Citizen\\n   * @return status bool\\n   */\\n  function isCitizen(address citizen) external view returns (bool status) {\\n    return balanceOf(citizen) == 1 ? true : false;\\n  }\\n\\n  /**\\n   * @notice Generate token URI\\n   * @param tokenId uint256\\n   * @return metadata string\\n   */\\n  function tokenURI(uint256 tokenId) public view override returns (string memory) {\\n    Metadata metadata_ = Metadata(_metadata);\\n    if (!_tokenURISplit) {\\n      return metadata_.tokenURI(tokenId);\\n    } else {\\n      return\\n        _resolver == _msgSender()\\n          ? metadata_.tokenURIResolver(tokenId)\\n          : metadata_.tokenURI(tokenId);\\n    }\\n  }\\n\\n  /**\\n   * @notice Issue a new Citizenship\\n   * @param to address\\n   */\\n  function issue(address to) external {\\n    address _sender = _msgSender();\\n    require(Notary(_notary).isNotary(_sender), \\\"CitizenAlpha:not-notary\\\");\\n    require(!_isCitizen(to), \\\"CitizenAlpha:is-citizen\\\");\\n    require(!_isPreviouslyIssued(to), \\\"CitizenAlpha:revoked-citizenship\\\");\\n    _issue(to, _sender);\\n  }\\n\\n  /**\\n   * @notice Revoke an existing Citizenship\\n   * @param from address\\n   */\\n  function revoke(address from) external {\\n    address _sender = _msgSender();\\n    require(Notary(_notary).isNotary(_sender), \\\"CitizenAlpha:not-notary\\\");\\n    require(_isCitizen(from), \\\"CitizenAlpha:not-citizen\\\");\\n    _revoke(from, _sender);\\n  }\\n\\n  /**\\n   * @notice Reset Citizenship status\\n   * @param citizen address\\n   */\\n  function reset(address citizen) external {\\n    require(Notary(_notary).isNotary(_msgSender()), \\\"CitizenAlpha:not-notary\\\");\\n    require(!_isCitizen(citizen), \\\"CitizenAlpha:is-citizen\\\");\\n    require(_isPreviouslyIssued(citizen), \\\"CitizenAlpha:never-citizen\\\");\\n    _tokenIds[citizen] = 0;\\n  }\\n\\n  /**\\n   * @notice Set URI Splitter status\\n   * @param status bool\\n   */\\n  function setURISplitter(bool status) external onlyOwner {\\n    _tokenURISplit = status;\\n  }\\n\\n  /**\\n   * @notice Set Metadata instance\\n   * @param metadata address\\n   */\\n  function setMetadata(address metadata) external onlyOwner {\\n    _metadata = metadata;\\n    emit NewMetadata(metadata);\\n  }\\n\\n  /**\\n   * @notice Set Notary instance\\n   * @param notary address\\n   */\\n  function setNotary(address notary) external onlyOwner {\\n    _notary = notary;\\n    emit NewNotary(notary);\\n  }\\n\\n  /**\\n   * @notice Set Resolver instance\\n   * @param resolver address\\n   */\\n  function setResolver(address resolver) external onlyOwner {\\n    _resolver = resolver;\\n    emit NewResolver(resolver);\\n  }\\n\\n  /**\\n   * @notice Override transferFrom to make non-transferable\\n   */\\n  function transferFrom(\\n    address,\\n    address,\\n    uint256\\n  ) public virtual override {\\n    revert(\\\"CitizenAlpha: Soulbound\\\");\\n  }\\n\\n  function supportsInterface(bytes4 interfaceId)\\n    public\\n    view\\n    virtual\\n    override(ERC721)\\n    returns (bool)\\n  {\\n    return super.supportsInterface(interfaceId);\\n  }\\n\\n  /* ===================================================================================== */\\n  /* Internal Functions                                                                    */\\n  /* ===================================================================================== */\\n\\n  function _isCitizen(address citizen) internal view returns (bool) {\\n    return balanceOf(citizen) == 1 ? true : false;\\n  }\\n\\n  /**\\n   * @dev First Founder can be issued<>revoked<>issued.\\n   *      All other address can only be issued<>revoked.\\n   *      Unless the account is reset.\\n   */\\n  function _isPreviouslyIssued(address citizen) internal view returns (bool) {\\n    return _tokenIds[citizen] != 0 ? true : false;\\n  }\\n\\n  function _issue(address to, address link) internal {\\n    uint256 __idCounter = _idCounter++;\\n    _links[to] = link;\\n    _tokenIds[to] = __idCounter;\\n    _mint(to, __idCounter);\\n    emit Issued(__idCounter, to, link);\\n  }\\n\\n  function _revoke(address from, address link) internal {\\n    uint256 tokenId = _tokenIds[from];\\n    _burn(tokenId);\\n    emit Revoked(tokenId, from, link);\\n  }\\n}\\n\",\"keccak256\":\"0x8df691ae3db31d2098f4e286e87927eb1d420e1c10cd3617bdcc35281cb2c827\",\"license\":\"MIT\"},\"@web3-citizen/core-sol/contracts/Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.15;\\n\\nimport { Base64 } from \\\"base64-sol/base64.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { Strings } from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport { svg } from \\\"./libraries/SVG.sol\\\";\\nimport { svgUtils } from \\\"./libraries/SVGUtils.sol\\\";\\nimport { SVGColor } from \\\"./libraries/SVGColor.sol\\\";\\nimport { ISource } from \\\"./interfaces/ISource.sol\\\";\\nimport { ICitizenAlpha } from \\\"./interfaces/ICitizenAlpha.sol\\\";\\nimport { SourceENS } from \\\"./Sources/SourceENS.sol\\\";\\nimport { CitizenAlpha } from \\\"./CitizenAlpha.sol\\\";\\nimport { SVGRender } from \\\"./SVGRender.sol\\\";\\n\\n/**\\n * @title Metadata\\n * @author Kames Geraghty\\n * @notice CitizenAlpha metadata resolver.\\n */\\ncontract Metadata is Ownable {\\n  using Strings for uint256;\\n\\n  /// @notice Token instance\\n  address private _token;\\n\\n  /// @notice SVGRender instance\\n  address private _svgRender;\\n\\n  /// @notice ISources[] list\\n  address[] private _sources;\\n\\n  struct Metadata {\\n    string name;\\n    string description;\\n    string avatar;\\n    string did;\\n    string ensAlias;\\n    string ensNode;\\n    string ensResolver;\\n    string traits;\\n  }\\n\\n  struct ExternalMetadata {\\n    string avatar;\\n    string did;\\n    string ensNode;\\n    string ensAlias;\\n    string ensResolver;\\n    string traits;\\n  }\\n\\n  constructor(address _svgRender_) {\\n    _svgRender = _svgRender_;\\n  }\\n\\n  /* ===================================================================================== */\\n  /* External Functions                                                                    */\\n  /* ===================================================================================== */\\n\\n  /**\\n   * @notice Get Token instance\\n   * @return token Token\\n   */\\n  function getToken() external view returns (address token) {\\n    return _token;\\n  }\\n\\n  /**\\n   * @notice Get Token instance\\n   * @return token Token\\n   */\\n  function getSVGRender() external view returns (address token) {\\n    return _svgRender;\\n  }\\n\\n  function getSourceData(uint256 idx, address user)\\n    external\\n    view\\n    returns (string[] memory, string[] memory)\\n  {\\n    return _getSourceData(idx, user);\\n  }\\n\\n  function getSourcesData(address user) external view returns (string[] memory, string[] memory) {\\n    return _getSourcesData(user);\\n  }\\n\\n  /**\\n   * @notice Construct tokenURI\\n   * @param tokenId address\\n   * @return uri string - Uniform Resource Identifier (URI) for `tokenId` token.\\n   */\\n  function tokenURI(uint256 tokenId) external view returns (string memory) {\\n    return _constructTokenURI(tokenId);\\n  }\\n\\n  /**\\n   * @notice Construct resolver tokenURI\\n   * @param tokenId address\\n   * @return uri string - Uniform Resource Identifier (URI) for `tokenId` token.\\n   */\\n  function tokenURIResolver(uint256 tokenId) external view returns (string memory) {\\n    return _constructTokenURIResolver(tokenId);\\n  }\\n\\n  /**\\n   * @notice Get User Metadata\\n   * @param user address\\n   * @return metadata Metadata\\n   */\\n  function getMetadata(address user) external view returns (Metadata memory) {\\n    return _constructMetadata(user, CitizenAlpha(_token).getId(user));\\n  }\\n\\n  /**\\n   * @notice Get User Avatar\\n   * @param user address\\n   * @return avatar string\\n   */\\n  function getAvatar(address user) external view returns (string memory) {\\n    uint256 _tokenId = ICitizenAlpha(_token).getId(user);\\n    SourceENS _resolverEns = SourceENS(_sources[0]);\\n    (, string memory alias_, ) = _resolverEns.getMetadata(user);\\n    string memory avatar_ = _resolverEns.getValue(user, \\\"avatar\\\");\\n    return _generateAvatar(avatar_, _tokenId, alias_);\\n  }\\n\\n  /**\\n   * @notice Get User Image\\n   * @param user address\\n   * @return avatar string\\n   */\\n  function getImage(address user) external view returns (string memory) {\\n    uint256 _tokenId = ICitizenAlpha(_token).getId(user);\\n    SourceENS _resolverEns = SourceENS(_sources[0]);\\n    (, string memory alias_, ) = _resolverEns.getMetadata(user);\\n    return _generateImage(_tokenId, alias_);\\n  }\\n\\n  /**\\n   * @notice Append Source instance\\n   * @param source address\\n   */\\n  function appendSource(address source) external onlyOwner {\\n    _sources.push(source);\\n  }\\n\\n  /**\\n   * @notice Set Source instance\\n   * @param idx uint256\\n   * @param source address\\n   */\\n  function updateSource(uint256 idx, address source) external onlyOwner {\\n    require(idx < _sources.length - 1, \\\"Metadata:invalid-index\\\");\\n    _sources[idx] = source;\\n  }\\n\\n  /**\\n   * @notice Set Token instance\\n   * @param token_ address\\n   */\\n  function setToken(address token_) external onlyOwner {\\n    _token = token_;\\n  }\\n\\n  /**\\n   * @notice Set SVGRender instance\\n   * @param svgRender_ address\\n   */\\n  function setSVGRender(address svgRender_) external onlyOwner {\\n    _svgRender = svgRender_;\\n  }\\n\\n  /* ===================================================================================== */\\n  /* Internal Functions                                                                    */\\n  /* ===================================================================================== */\\n\\n  function _constructTokenURI(uint256 _tokenId) internal view returns (string memory) {\\n    ICitizenAlpha token_ = ICitizenAlpha(_token);\\n    Metadata memory _meta = _constructMetadata(token_.ownerOf(_tokenId), _tokenId);\\n\\n    return\\n      string(\\n        abi.encodePacked(\\n          \\\"data:application/json;base64,\\\",\\n          Base64.encode(\\n            bytes(\\n              string.concat(\\n                '{\\\"name\\\":',\\n                '\\\"',\\n                _meta.name,\\n                '\\\",',\\n                '\\\"description\\\":',\\n                '\\\"',\\n                _meta.description,\\n                '\\\",',\\n                '\\\"image\\\":',\\n                '\\\"',\\n                _meta.avatar,\\n                '\\\",',\\n                '\\\"attributes\\\": [',\\n                _meta.traits,\\n                \\\"]\\\",\\n                \\\"}\\\"\\n              )\\n            )\\n          )\\n        )\\n      );\\n  }\\n\\n  function _constructTokenURIResolver(uint256 _tokenId) internal view returns (string memory) {\\n    ICitizenAlpha token_ = ICitizenAlpha(_token);\\n    address owner_ = token_.ownerOf(_tokenId);\\n    ExternalMetadata memory externalMetadata_ = _getExternalMetadata(owner_, _tokenId);\\n    string memory name_ = string(abi.encodePacked(\\\"Citizen #\\\", _tokenId.toString()));\\n    string memory description_ = bytes(externalMetadata_.ensAlias).length > 0\\n      ? externalMetadata_.ensAlias\\n      : Strings.toHexString(uint256(uint160(owner_)), 20);\\n    string memory avatar_ = _generateImage(_tokenId, externalMetadata_.ensAlias);\\n    address link_ = ICitizenAlpha(_token).getLink(owner_);\\n    return\\n      string(\\n        abi.encodePacked(\\n          \\\"data:application/json;base64,\\\",\\n          Base64.encode(\\n            bytes(\\n              string.concat(\\n                '{\\\"name\\\":',\\n                '\\\"',\\n                name_,\\n                '\\\",',\\n                '\\\"description\\\":',\\n                '\\\"',\\n                description_,\\n                '\\\",',\\n                '\\\"image\\\":',\\n                '\\\"',\\n                avatar_,\\n                '\\\",',\\n                '\\\"attributes\\\": [',\\n                _generateTrait(\\\"link\\\", Strings.toHexString(uint256(uint160(link_)), 20)),\\n                \\\"]\\\",\\n                \\\"}\\\"\\n              )\\n            )\\n          )\\n        )\\n      );\\n  }\\n\\n  function _constructMetadata(address user, uint256 tokenId)\\n    internal\\n    view\\n    returns (Metadata memory)\\n  {\\n    ExternalMetadata memory externalMetadata_ = _getExternalMetadata(user, tokenId);\\n    string memory name_ = string(abi.encodePacked(\\\"Citizen #\\\", tokenId.toString()));\\n    string memory description_ = bytes(externalMetadata_.ensAlias).length > 0\\n      ? externalMetadata_.ensAlias\\n      : Strings.toHexString(uint256(uint160(user)), 20);\\n    address link_ = ICitizenAlpha(_token).getLink(user);\\n\\n    Metadata memory _meta = Metadata({\\n      name: name_,\\n      description: description_,\\n      avatar: externalMetadata_.avatar,\\n      did: externalMetadata_.did,\\n      ensNode: externalMetadata_.ensNode,\\n      ensAlias: externalMetadata_.ensAlias,\\n      ensResolver: externalMetadata_.ensResolver,\\n      traits: string.concat(\\n        externalMetadata_.traits,\\n        _generateTrait(\\\"link\\\", Strings.toHexString(uint256(uint160(link_)), 20))\\n      )\\n    });\\n\\n    return _meta;\\n  }\\n\\n  function _getExternalMetadata(address user, uint256 _tokenId)\\n    internal\\n    view\\n    returns (ExternalMetadata memory)\\n  {\\n    /// @dev ENS resolver must always be in the first slot. TODO: make better\\n    SourceENS _resolverEns = SourceENS(_sources[0]);\\n    string memory did_ = _resolverEns.getValue(user, \\\"did\\\");\\n    string memory avatar_ = _resolverEns.getValue(user, \\\"avatar\\\");\\n    (bytes32 node, string memory alias_, address resolver_) = _resolverEns.getMetadata(user);\\n    string memory traits_ = _getUnwrappedTraits(user);\\n    return\\n      ExternalMetadata({\\n        avatar: _generateAvatar(avatar_, _tokenId, alias_),\\n        did: did_,\\n        ensNode: string(abi.encodePacked(node)),\\n        ensAlias: string(alias_),\\n        ensResolver: resolver_ != 0x0000000000000000000000000000000000000000\\n          ? Strings.toHexString(uint256(uint160(resolver_)), 20)\\n          : \\\"\\\",\\n        traits: traits_\\n      });\\n  }\\n\\n  function _getExternalAvatar(address user, uint256 _tokenId)\\n    internal\\n    view\\n    returns (string memory)\\n  {\\n    /// @dev ENS PublicResolver must be in first slot. TODO: make better in V2\\n    SourceENS _resolverEns = SourceENS(_sources[0]);\\n    string memory avatar_ = _resolverEns.getValue(user, \\\"avatar\\\");\\n    (, string memory alias_, ) = _resolverEns.getMetadata(user);\\n    return _generateAvatar(avatar_, _tokenId, alias_);\\n  }\\n\\n  function _getUnwrappedTraits(address user) internal view returns (string memory) {\\n    (string[] memory keys_, string[] memory values_) = _getSourcesData(user);\\n    return _generateTraits(keys_, values_);\\n  }\\n\\n  function _getSourceData(uint256 _sourceIndex, address _user)\\n    internal\\n    view\\n    returns (string[] memory, string[] memory)\\n  {\\n    ISource _source = ISource(_sources[_sourceIndex]);\\n    uint256 count = _source.count(_user);\\n\\n    string[] memory keys_ = new string[](count);\\n    string[] memory values_ = new string[](count);\\n\\n    (string[] memory keys__, string[] memory values__) = _source.getData(_user);\\n\\n    for (uint256 k = 0; k < count; k++) {\\n      keys_[k] = (keys__[k]);\\n      values_[k] = values__[k];\\n    }\\n\\n    return (keys_, values_);\\n  }\\n\\n  function _getSourcesData(address _user) internal view returns (string[] memory, string[] memory) {\\n    uint256 count = 0;\\n    address[] memory __sources = _sources;\\n    for (uint256 i = 0; i < __sources.length; i++) {\\n      ISource _source = ISource(__sources[i]);\\n      count = count + _source.count(_user);\\n    }\\n\\n    string[] memory keys_ = new string[](count);\\n    string[] memory values_ = new string[](count);\\n\\n    uint256 __start;\\n    for (uint256 i = 0; i < __sources.length; i++) {\\n      ISource _source = ISource(__sources[i]);\\n      (string[] memory keys__, string[] memory values__) = _source.getData(_user);\\n      for (uint256 k = __start; k < count; k++) {\\n        keys_[k] = (keys__[k]);\\n        values_[k] = values__[k];\\n      }\\n    }\\n\\n    return (keys_, values_);\\n  }\\n\\n  /* ===================================================================================== */\\n  /* Traits Functions                                                                      */\\n  /* ===================================================================================== */\\n\\n  function _appendTrait(string memory _traits, string memory _traitAppending)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    return string.concat(_traits, bytes(_traits).length > 0 ? \\\",\\\" : \\\"\\\", _traitAppending);\\n  }\\n\\n  function _generateTrait(string memory _key, string memory _value)\\n    internal\\n    pure\\n    returns (string memory __traits)\\n  {\\n    return string.concat('{\\\"trait_type\\\":' '\\\"', _key, '\\\",', '\\\"value\\\":', '\\\"', _value, '\\\"}');\\n  }\\n\\n  function _generateTraits(string[] memory _keys, string[] memory _values)\\n    internal\\n    pure\\n    returns (string memory __traits)\\n  {\\n    string memory _traits = \\\"\\\";\\n    for (uint256 i = 0; i < _keys.length; i++) {\\n      if (bytes(_values[i]).length > 0) {\\n        _traits = string.concat(_traits, _generateTrait(_keys[i], _values[i]), \\\",\\\");\\n      }\\n    }\\n    return _traits;\\n  }\\n\\n  function _generateAvatar(\\n    string memory _avatar,\\n    uint256 tokenId,\\n    string memory alias_\\n  ) internal view returns (string memory) {\\n    if (bytes(_avatar).length == 0) {\\n      return\\n        string(\\n          abi.encodePacked(\\n            \\\"data:image/svg+xml;base64,\\\",\\n            Base64.encode(bytes(SVGRender(_svgRender).generate(tokenId, alias_)))\\n          )\\n        );\\n    }\\n    return _avatar;\\n  }\\n\\n  function _generateImage(uint256 tokenId, string memory alias_)\\n    internal\\n    view\\n    returns (string memory)\\n  {\\n    return\\n      string(\\n        abi.encodePacked(\\n          \\\"data:image/svg+xml;base64,\\\",\\n          Base64.encode(bytes(SVGRender(_svgRender).generate(tokenId, alias_)))\\n        )\\n      );\\n  }\\n}\\n\",\"keccak256\":\"0xf025fd26f4562c931e659009f78cf16a5ca28088aa1f4123505447ce5a07e0fd\",\"license\":\"GPL-3.0\"},\"@web3-citizen/core-sol/contracts/Nation/Nation.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.15;\\n\\nimport { AccessControlEnumerable, AccessControl, IAccessControl } from \\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { CitizenAlpha } from \\\"../CitizenAlpha.sol\\\";\\nimport { Notary } from \\\"../Notary/Notary.sol\\\";\\n\\n/**\\n * @title Nation\\n * @author Kames Geraghty\\n * @notice Nation is an AccessControl layer for CitizenAlpha.\\n * @dev Extends Citizen on-chain permissions using nested Roles.\\n           \\n */\\ncontract Nation is AccessControlEnumerable {\\n  // Nation name\\n  string private _name;\\n\\n  // Nation symbol\\n  string private _symbol;\\n\\n  // Nation DID (Decentralized Identifier)\\n  string private _did;\\n\\n  /// @notice CitizenAlpha instance\\n  address private _citizenAlpha;\\n\\n  /// @notice Founder Role\\n  bytes32 private constant FOUNDER =\\n    0x464f554e44455200000000000000000000000000000000000000000000000000;\\n\\n  /// @notice Governance Role\\n  bytes32 private constant GOVERNANCE =\\n    0x474f5645524e414e434500000000000000000000000000000000000000000000;\\n\\n  /// @notice Global Role AccessControl\\n  mapping(bytes32 => bool) private _roleActive;\\n\\n  /**\\n   * @notice Nation Constructor\\n   * @param name string - Name of Nation\\n   * @param symbol string - Symbol of Nation\\n   * @param citizenAlpha address - Address of CitizenAlpha\\n   * @param founders array(address) - Array of Founders\\n   */\\n  constructor(\\n    string memory name,\\n    string memory symbol,\\n    address citizenAlpha,\\n    address[] memory founders\\n  ) {\\n    _name = name;\\n    _symbol = symbol;\\n    _citizenAlpha = citizenAlpha;\\n    _roleActive[FOUNDER] = true;\\n    _roleActive[GOVERNANCE] = true;\\n    _roleActive[DEFAULT_ADMIN_ROLE] = true;\\n    for (uint256 i = 0; i < founders.length; i++) {\\n      _setupRole(FOUNDER, founders[i]);\\n      _setupRole(DEFAULT_ADMIN_ROLE, founders[i]);\\n    }\\n    _setRoleAdmin(FOUNDER, DEFAULT_ADMIN_ROLE);\\n  }\\n\\n  /**\\n   * @notice Admin modifier\\n   * @param role bytes32\\n   */\\n  modifier _onlyAdmin(bytes32 role) {\\n    address sender_ = _msgSender();\\n    require(\\n      hasRole(getRoleAdmin(role), sender_) ||\\n        hasRole(GOVERNANCE, sender_) ||\\n        hasRole(DEFAULT_ADMIN_ROLE, sender_),\\n      \\\"Nation:unauthorized\\\"\\n    );\\n    _;\\n  }\\n\\n  /**\\n   * @notice Governance modifier\\n   */\\n  modifier _onlyGovernance() {\\n    address sender_ = _msgSender();\\n    require(\\n      (hasRole(GOVERNANCE, sender_) || hasRole(DEFAULT_ADMIN_ROLE, sender_)),\\n      \\\"Nation:unauthorized\\\"\\n    );\\n    _;\\n  }\\n\\n  /* ===================================================================================== */\\n  /* External Functions                                                                    */\\n  /* ===================================================================================== */\\n\\n  function name() external view virtual returns (string memory) {\\n    return _name;\\n  }\\n\\n  function symbol() external view virtual returns (string memory) {\\n    return _symbol;\\n  }\\n\\n  function did() external view virtual returns (string memory) {\\n    return _did;\\n  }\\n\\n  function metadata()\\n    external\\n    view\\n    virtual\\n    returns (\\n      string memory name,\\n      string memory symbol,\\n      string memory did\\n    )\\n  {\\n    return (_name, _symbol, _did);\\n  }\\n\\n  /**\\n   * @notice Get CitizenAlpha instance\\n   * @return citizenAlpha address of CitizenAlpha instance\\n   */\\n  function getCitizenAlpha() external view returns (address) {\\n    return _citizenAlpha;\\n  }\\n\\n  /**\\n   * @notice Check if Account has Role\\n   * @dev Include check for Role activication is Citizenship\\n   * @return active bool\\n   */\\n  function hasRole(bytes32 role, address account)\\n    public\\n    view\\n    virtual\\n    override(AccessControl, IAccessControl)\\n    returns (bool)\\n  {\\n    if (!_roleActive[role] || !CitizenAlpha(_citizenAlpha).isCitizen(account)) {\\n      return false;\\n    }\\n    return super.hasRole(role, account);\\n  }\\n\\n  /**\\n   * @notice Check Founder status\\n   * @param citizen address\\n   * @return status bool\\n   */\\n  function isFounder(address citizen) external view returns (bool status) {\\n    return hasRole(FOUNDER, citizen);\\n  }\\n\\n  /**\\n   * @notice Check Governance status\\n   * @param module address\\n   * @return status bool\\n   */\\n  function isGovernance(address module) external view returns (bool status) {\\n    return hasRole(GOVERNANCE, module);\\n  }\\n\\n  /**\\n   * @notice Get status of Role global settings\\n   * @return status bool\\n   */\\n  function roleStatus(bytes32 role) external view returns (bool status) {\\n    return _roleActive[role];\\n  }\\n\\n  /**\\n   * @notice Grant Role to Citizen\\n   * @param role bytes32\\n   * @param citizen address\\n   */\\n  function grantRole(bytes32 role, address citizen)\\n    public\\n    virtual\\n    override(AccessControl, IAccessControl)\\n    _onlyAdmin(role)\\n  {\\n    require(_roleActive[role], \\\"Nation:inactive-role\\\");\\n    _grantRole(role, citizen);\\n  }\\n\\n  /**\\n   * @notice Revoke Role from Citizen\\n   * @param role bytes32\\n   * @param citizen address\\n   */\\n  function revokeRole(bytes32 role, address citizen)\\n    public\\n    virtual\\n    override(AccessControl, IAccessControl)\\n    _onlyAdmin(role)\\n  {\\n    require(role != DEFAULT_ADMIN_ROLE, \\\"Nation:invalid-request\\\");\\n    require(_roleActive[role], \\\"Nation:inactive-role\\\");\\n    _revokeRole(role, citizen);\\n  }\\n\\n  /**\\n   * @notice Enable Role status\\n   * @param role bytes32\\n   */\\n  function enableRole(bytes32 role) external onlyRole(FOUNDER) {\\n    require(_roleActive[role] == false, \\\"Nation:role-enabled\\\");\\n    _setRoleAdmin(role, FOUNDER);\\n    _roleActive[role] = true;\\n  }\\n\\n  /**\\n   * @notice Enable Role status\\n   * @param role bytes32\\n   * @param adminRole bytes32\\n   */\\n  function enableRoleWithAdmin(bytes32 role, bytes32 adminRole) external _onlyGovernance {\\n    require(_roleActive[role] == false, \\\"Nation:role-enabled\\\");\\n    _setRoleAdmin(role, adminRole);\\n    _roleActive[role] = true;\\n  }\\n\\n  /**\\n   * @notice Disable Role status\\n   * @param role bytes32\\n   */\\n  function disableRole(bytes32 role) external _onlyGovernance {\\n    require(_roleActive[role] == true, \\\"Nation:role-disabled\\\");\\n    _setRoleAdmin(role, DEFAULT_ADMIN_ROLE);\\n    _roleActive[role] = false;\\n  }\\n\\n  /**\\n   * @notice Set Role admin\\n   * @param role bytes32\\n   * @param adminRole bytes32\\n   */\\n  function setRoleAdmin(bytes32 role, bytes32 adminRole) external _onlyGovernance {\\n    _setRoleAdmin(role, adminRole);\\n  }\\n\\n  function setCitizenAlpha(address citizenAlpha) external _onlyGovernance {\\n    _citizenAlpha = citizenAlpha;\\n  }\\n\\n  function setDid(string calldata did) external _onlyGovernance {\\n    _did = did;\\n  }\\n\\n  function setName(string calldata name) external _onlyGovernance {\\n    _name = name;\\n  }\\n\\n  function setSymbol(string calldata symbol) external _onlyGovernance {\\n    _symbol = symbol;\\n  }\\n}\\n\",\"keccak256\":\"0x65f7758632fb60291c19b4474f6e188335abbf0aed903ebb260683523f332b89\",\"license\":\"GPL-3.0\"},\"@web3-citizen/core-sol/contracts/Notary/Notary.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport { AccessControl } from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport { ICitizenAlpha } from \\\"../interfaces/ICitizenAlpha.sol\\\";\\n\\n/**\\n * @title Notary\\n * @author Kames Geraghty\\n * @notice Notary is a minimal AccessControl layer for Citizen issuance.\\n */\\ncontract Notary is AccessControl {\\n  /// @notice CitizenAlpha instance\\n  address private _citizenAlpha;\\n\\n  /// @notice Notary Role\\n  bytes32 private constant NOTARY =\\n    0x4e4f544152590000000000000000000000000000000000000000000000000000;\\n\\n  /**\\n   * @notice Notary Constructor\\n   * @dev Set CitizenAlpha instance and set start Notaries.\\n   * @param _citizenAlpha_ CitizenAlpha instance\\n   * @param _notaries Array of Notaries\\n   */\\n  constructor(address _citizenAlpha_, address[] memory _notaries) {\\n    _citizenAlpha = _citizenAlpha_;\\n    _setupRole(NOTARY, address(this));\\n    for (uint256 i = 0; i < _notaries.length; i++) {\\n      _setupRole(DEFAULT_ADMIN_ROLE, _notaries[i]);\\n      _setupRole(NOTARY, _notaries[i]);\\n    }\\n    _setRoleAdmin(NOTARY, DEFAULT_ADMIN_ROLE);\\n  }\\n\\n  /* ===================================================================================== */\\n  /* External Functions                                                                    */\\n  /* ===================================================================================== */\\n\\n  function getCitizenAlpha() external view returns (address) {\\n    return _citizenAlpha;\\n  }\\n\\n  /**\\n   * @notice Check Notary status\\n   * @param citizen address\\n   * @return status bool\\n   */\\n  function isNotary(address citizen) external view returns (bool status) {\\n    return hasRole(NOTARY, citizen);\\n  }\\n\\n  /**\\n   * @notice Issue Citizenship\\n   * @param to address\\n   */\\n  function issue(address to) external {\\n    require(hasRole(NOTARY, _msgSender()), \\\"Notary:unauthorized-access\\\");\\n    _issue(to);\\n  }\\n\\n  /**\\n   * @notice Batch issue Citizenships\\n   * @param to address\\n   */\\n  function issueBatch(address[] calldata to) external {\\n    require(hasRole(NOTARY, _msgSender()), \\\"Notary:unauthorized-access\\\");\\n    for (uint256 i = 0; i < to.length; i++) {\\n      _issue(to[i]);\\n    }\\n  }\\n\\n  /**\\n   * @notice Revoke Citizenship\\n   * @param from address\\n   */\\n  function revoke(address from) external {\\n    require(hasRole(NOTARY, _msgSender()), \\\"Notary:unauthorized-access\\\");\\n    _revoke(from);\\n  }\\n\\n  /**\\n   * @notice Batch Revoke Citizenships\\n   * @param from address\\n   */\\n  function revokeBatch(address[] calldata from) external {\\n    require(hasRole(NOTARY, _msgSender()), \\\"Notary:unauthorized-access\\\");\\n    for (uint256 i = 0; i < from.length; i++) {\\n      _revoke(from[i]);\\n    }\\n  }\\n\\n  /* ===================================================================================== */\\n  /* Internal Functions                                                                    */\\n  /* ===================================================================================== */\\n\\n  function _issue(address _to) internal {\\n    ICitizenAlpha(_citizenAlpha).issue(_to);\\n  }\\n\\n  function _revoke(address _from) internal {\\n    ICitizenAlpha(_citizenAlpha).revoke(_from);\\n  }\\n}\\n\",\"keccak256\":\"0x24ddf63184192de0677fc9bd3ef49766f8b4b4ee5566afb578452c37d2d7cbe4\",\"license\":\"MIT\"},\"@web3-citizen/core-sol/contracts/SVGRender.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.15;\\n\\nimport { Base64 } from \\\"base64-sol/base64.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { Strings } from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport { svg } from \\\"./libraries/SVG.sol\\\";\\nimport { svgUtils } from \\\"./libraries/SVGUtils.sol\\\";\\nimport { SVGColor } from \\\"./libraries/SVGColor.sol\\\";\\n\\ncontract SVGRender is Ownable {\\n  using Strings for uint256;\\n  address public svgColor;\\n\\n  constructor(address _svgColor) {\\n    svgColor = _svgColor;\\n  }\\n\\n  function generate(uint256 _tokenId, string memory _alias) public view returns (string memory) {\\n    string memory _bgDef = svgUtils.getDefURL(\\\"charcoal\\\");\\n\\n    return\\n      string(\\n        abi.encodePacked(\\n          svg.start(),\\n          _getDefs(),\\n          svg.rect(\\n            string.concat(\\n              svg.prop(\\\"fill\\\", _bgDef),\\n              svg.prop(\\\"x\\\", \\\"0\\\"),\\n              svg.prop(\\\"y\\\", \\\"0\\\"),\\n              svg.prop(\\\"width\\\", \\\"100%\\\"),\\n              svg.prop(\\\"height\\\", \\\"100%\\\")\\n            ),\\n            svgUtils.NULL\\n          ),\\n          svg.text(\\n            string.concat(\\n              svg.prop(\\\"x\\\", \\\"50%\\\"),\\n              svg.prop(\\\"y\\\", \\\"50%\\\"),\\n              svg.prop(\\\"dominant-baseline\\\", \\\"middle\\\"),\\n              svg.prop(\\\"text-anchor\\\", \\\"middle\\\"),\\n              svg.prop(\\\"font-size\\\", \\\"48px\\\"),\\n              svg.prop(\\\"fill\\\", \\\"white\\\")\\n            ),\\n            string.concat(\\\"CIV #\\\", _tokenId.toString())\\n          ),\\n          svg.text(\\n            string.concat(\\n              svg.prop(\\\"x\\\", \\\"50%\\\"),\\n              svg.prop(\\\"y\\\", \\\"60%\\\"),\\n              svg.prop(\\\"dominant-baseline\\\", \\\"middle\\\"),\\n              svg.prop(\\\"text-anchor\\\", \\\"middle\\\"),\\n              svg.prop(\\\"font-size\\\", \\\"22px\\\"),\\n              svg.prop(\\\"fill\\\", \\\"white\\\")\\n            ),\\n            _alias\\n          ),\\n          svg.end()\\n        )\\n      );\\n  }\\n\\n  function _getDefs() internal view returns (string memory) {\\n    return\\n      svg.defs(\\n        string.concat(\\n          svg.linearGradient(\\n            string.concat(svg.prop(\\\"id\\\", \\\"charcoal\\\"), svg.prop(\\\"gradientTransform\\\", \\\"rotate(140)\\\")),\\n            string.concat(\\n              svg.stop(\\n                string.concat(\\n                  svg.prop(\\\"offset\\\", \\\"0%\\\"),\\n                  svg.prop(\\\"stop-color\\\", SVGColor(svgColor).getRgba(\\\"Dark1\\\"))\\n                )\\n              ),\\n              svg.stop(\\n                string.concat(\\n                  svg.prop(\\\"offset\\\", \\\"70%\\\"),\\n                  svg.prop(\\\"stop-color\\\", SVGColor(svgColor).getRgba(\\\"Dark2\\\"))\\n                )\\n              )\\n            )\\n          )\\n        )\\n      );\\n  }\\n}\\n\",\"keccak256\":\"0x5ac8319a6b5997c29b33bd2d32f44b7f4f60688aedfeadd4ce40a598fea971ac\",\"license\":\"GPL-3.0\"},\"@web3-citizen/core-sol/contracts/Sources/SourceENS.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.15;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { NameEncoder } from \\\"../libraries/NameEncoder.sol\\\";\\nimport { ISource } from \\\"../interfaces/ISource.sol\\\";\\nimport { IReverseRegistrar } from \\\"../interfaces/ENS/IReverseRegistrar.sol\\\";\\nimport { ITextResolver } from \\\"../interfaces/ENS/ITextResolver.sol\\\";\\nimport { IDefaultReverseResolver } from \\\"../interfaces/ENS/IDefaultReverseResolver.sol\\\";\\n\\ncontract SourceENS is ISource, Ownable {\\n  using NameEncoder for string;\\n\\n  string[] private _keys;\\n  address private constant RESOLVER = 0x4976fb03C32e5B8cfe2b6cCB31c09Ba78EBaBa41;\\n  address private constant REVERSE_REGISTRAR = 0x084b1c3C81545d370f3634392De611CaaBFf8148;\\n  address private constant DEFAULT_REVERSE_RESOLVER = 0xA2C122BE93b0074270ebeE7f6b7292C7deB45047;\\n\\n  constructor() {\\n    _keys.push(\\\"avatar\\\");\\n    _keys.push(\\\"url\\\");\\n    _keys.push(\\\"description\\\");\\n    _keys.push(\\\"com.github\\\");\\n    _keys.push(\\\"com.twitter\\\");\\n    _keys.push(\\\"org.telegram\\\");\\n    _keys.push(\\\"did\\\");\\n  }\\n\\n  /* ===================================================================================== */\\n  /* External Functions                                                                    */\\n  /* ===================================================================================== */\\n\\n  /**\\n   * @notice Get Keys\\n   * @return keys string[]\\n   */\\n  function getKeys() external view returns (string[] memory keys) {\\n    return _keys;\\n  }\\n\\n  /**\\n   * @notice Get data fields count for user\\n   * @return count uint256\\n   */\\n  function count(address user) external view returns (uint256 count) {\\n    (, bytes32 node_, ITextResolver res_) = _resolveOwner(user);\\n    (string[] memory keys_, ) = _fetchNodeTextFields(_keys, node_, res_);\\n    return keys_.length;\\n  }\\n\\n  /**\\n   * @notice Get all available data for user\\n   * @param user address\\n   * @return keys string[]\\n   * @return values string[]\\n   */\\n  function getData(address user)\\n    external\\n    view\\n    returns (string[] memory keys, string[] memory values)\\n  {\\n    (, bytes32 node_, ITextResolver res_) = _resolveOwner(user);\\n    (string[] memory keys_, string[] memory values_) = _fetchNodeTextFields(_keys, node_, res_);\\n    return (keys_, values_);\\n  }\\n\\n  function getMetadata(address _address)\\n    external\\n    view\\n    returns (\\n      bytes32 node,\\n      string memory name,\\n      address resolver\\n    )\\n  {\\n    (string memory name, bytes32 node, ITextResolver resolver) = _resolveOwner(_address);\\n    return (node, name, address(resolver));\\n  }\\n\\n  /**\\n   * @notice Get data value for user\\n   * @param user address\\n   * @param key string\\n   * @return value string\\n   */\\n  function getValue(address user, string memory key) external view returns (string memory) {\\n    (, bytes32 node_, ITextResolver res_) = _resolveOwner(user);\\n    return res_.text(node_, key);\\n  }\\n\\n  /**\\n   * @notice Append Key\\n   * @param key string\\n   */\\n  function appendKey(string calldata key) external onlyOwner {\\n    _keys.push(key);\\n  }\\n\\n  /**\\n   * @notice Set Key\\n   * @param idx uint256\\n   * @param key string\\n   */\\n  function updateKey(uint256 idx, string calldata key) external onlyOwner {\\n    _keys[idx] = key;\\n  }\\n\\n  /* ===================================================================================== */\\n  /* Internal Functions                                                                    */\\n  /* ===================================================================================== */\\n\\n  function _resolveOwner(address owner_)\\n    internal\\n    view\\n    returns (\\n      string memory,\\n      bytes32,\\n      ITextResolver\\n    )\\n  {\\n    bytes32 node_ = IReverseRegistrar(REVERSE_REGISTRAR).node(owner_);\\n    string memory _name = IDefaultReverseResolver(DEFAULT_REVERSE_RESOLVER).name(node_);\\n    (, bytes32 _node) = _name.dnsEncodeName();\\n    ITextResolver _resolver = ITextResolver(RESOLVER);\\n    return (_name, _node, _resolver);\\n  }\\n\\n  function _fetchNodeTextFields(\\n    string[] memory _traits,\\n    bytes32 _node,\\n    ITextResolver _resolver\\n  ) internal view returns (string[] memory keys_, string[] memory values_) {\\n    string[] memory __keys = new string[](_traits.length);\\n    string[] memory __values = new string[](_traits.length);\\n    for (uint256 i = 0; i < _traits.length; i++) {\\n      __keys[i] = _traits[i];\\n      __values[i] = _resolver.text(_node, _traits[i]);\\n    }\\n    return (__keys, __values);\\n  }\\n}\\n\",\"keccak256\":\"0x3d67b0f7c68575a88878fe9cd90a858e28ad4c93e92ef9fbe03b866006f62b89\",\"license\":\"GPL-3.0\"},\"@web3-citizen/core-sol/contracts/interfaces/ENS/IDefaultReverseResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IDefaultReverseResolver {\\n  function name(bytes32 input) external view returns (string calldata);\\n}\\n\",\"keccak256\":\"0x925b12b523e5caf06f107ea15529c741bd6afaa8df5b9396783cff1aa5a4e21f\",\"license\":\"MIT\"},\"@web3-citizen/core-sol/contracts/interfaces/ENS/IReverseRegistrar.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface IReverseRegistrar {\\n  function setDefaultResolver(address resolver) external;\\n\\n  function claim(address owner) external returns (bytes32);\\n\\n  function claimForAddr(\\n    address addr,\\n    address owner,\\n    address resolver\\n  ) external returns (bytes32);\\n\\n  function claimWithResolver(address owner, address resolver) external returns (bytes32);\\n\\n  function setName(string memory name) external returns (bytes32);\\n\\n  function setNameForAddr(\\n    address addr,\\n    address owner,\\n    address resolver,\\n    string memory name\\n  ) external returns (bytes32);\\n\\n  function node(address addr) external pure returns (bytes32);\\n}\\n\",\"keccak256\":\"0x722f2ccfa92f91c005f396f84de8f54213b93d992552e69a489167c55204558b\"},\"@web3-citizen/core-sol/contracts/interfaces/ENS/ITextResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface ITextResolver {\\n  event TextChanged(bytes32 indexed node, string indexed indexedKey, string key);\\n\\n  /**\\n   * Returns the text data associated with an ENS node and key.\\n   * @param node The ENS node to query.\\n   * @param key The text data key to query.\\n   * @return The associated text data.\\n   */\\n  function text(bytes32 node, string calldata key) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa99d8aa00bf995a18766905f6e4d72efdca1843fb7092e0222442379731347e5\",\"license\":\"MIT\"},\"@web3-citizen/core-sol/contracts/interfaces/ICitizenAlpha.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\ninterface ICitizenAlpha {\\n  function ownerOf(uint256 _id) external view returns (address owner);\\n\\n  function issue(address _citizen) external;\\n\\n  function revoke(address _citizen) external;\\n\\n  function getId(address citizen) external view returns (uint256);\\n\\n  function getLink(address citizen) external view returns (address issuer);\\n\\n  function hasRole(bytes32 role, address citizen) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xafe5d8783f057ce08af9dc8c19b80a874d00d16514d7cf5c9bb12c9b4b0d5b78\",\"license\":\"MIT\"},\"@web3-citizen/core-sol/contracts/interfaces/ISource.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\ninterface ISource {\\n  function count(address _address) external view returns (uint256);\\n\\n  function getData(address _address)\\n    external\\n    view\\n    returns (string[] memory keys, string[] memory values);\\n\\n  function getValue(address _address, string memory _key) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x3c653a62add5c98009f63d9522866cead8ae3a4722aaedcbd9ec3af0952f9b4f\",\"license\":\"MIT\"},\"@web3-citizen/core-sol/contracts/libraries/BytesUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nlibrary BytesUtils {\\n  /*\\n   * @dev Returns the keccak-256 hash of a byte range.\\n   * @param self The byte string to hash.\\n   * @param offset The position to start hashing at.\\n   * @param len The number of bytes to hash.\\n   * @return The hash of the byte range.\\n   */\\n  function keccak(\\n    bytes memory self,\\n    uint256 offset,\\n    uint256 len\\n  ) internal pure returns (bytes32 ret) {\\n    require(offset + len <= self.length);\\n    assembly {\\n      ret := keccak256(add(add(self, 32), offset), len)\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the ENS namehash of a DNS-encoded name.\\n   * @param self The DNS-encoded name to hash.\\n   * @param offset The offset at which to start hashing.\\n   * @return The namehash of the name.\\n   */\\n  function namehash(bytes memory self, uint256 offset) internal pure returns (bytes32) {\\n    (bytes32 labelhash, uint256 newOffset) = readLabel(self, offset);\\n    if (labelhash == bytes32(0)) {\\n      require(offset == self.length - 1, \\\"namehash: Junk at end of name\\\");\\n      return bytes32(0);\\n    }\\n    return keccak256(abi.encodePacked(namehash(self, newOffset), labelhash));\\n  }\\n\\n  /**\\n   * @dev Returns the keccak-256 hash of a DNS-encoded label, and the offset to the start of the next label.\\n   * @param self The byte string to read a label from.\\n   * @param idx The index to read a label at.\\n   * @return labelhash The hash of the label at the specified index, or 0 if it is the last label.\\n   * @return newIdx The index of the start of the next label.\\n   */\\n  function readLabel(bytes memory self, uint256 idx)\\n    internal\\n    pure\\n    returns (bytes32 labelhash, uint256 newIdx)\\n  {\\n    require(idx < self.length, \\\"readLabel: Index out of bounds\\\");\\n    uint256 len = uint256(uint8(self[idx]));\\n    if (len > 0) {\\n      labelhash = keccak(self, idx + 1, len);\\n    } else {\\n      labelhash = bytes32(0);\\n    }\\n    newIdx = idx + len + 1;\\n  }\\n}\\n\",\"keccak256\":\"0x319e6759879d5d686e11aa0b546c6fac08e2cb5e5c92b41bd852c48159f2f2b4\",\"license\":\"MIT\"},\"@web3-citizen/core-sol/contracts/libraries/NameEncoder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport \\\"./BytesUtils.sol\\\";\\n\\nlibrary NameEncoder {\\n  using BytesUtils for bytes;\\n\\n  function dnsEncodeName(string memory name)\\n    internal\\n    pure\\n    returns (bytes memory dnsName, bytes32 node)\\n  {\\n    uint8 labelLength = 0;\\n    bytes memory bytesName = bytes(name);\\n    uint256 length = bytesName.length;\\n    dnsName = new bytes(length + 2);\\n    node = 0;\\n    if (length == 0) {\\n      dnsName[0] = 0;\\n      return (dnsName, node);\\n    }\\n\\n    // use unchecked to save gas since we check for an underflow\\n    // and we check for the length before the loop\\n    unchecked {\\n      for (uint256 i = length - 1; i >= 0; i--) {\\n        if (bytesName[i] == \\\".\\\") {\\n          dnsName[i + 1] = bytes1(labelLength);\\n          node = keccak256(abi.encodePacked(node, bytesName.keccak(i + 1, labelLength)));\\n          labelLength = 0;\\n        } else {\\n          labelLength += 1;\\n          dnsName[i + 1] = bytesName[i];\\n        }\\n        if (i == 0) {\\n          break;\\n        }\\n      }\\n    }\\n\\n    node = keccak256(abi.encodePacked(node, bytesName.keccak(0, labelLength)));\\n\\n    dnsName[0] = bytes1(labelLength);\\n    return (dnsName, node);\\n  }\\n}\\n\",\"keccak256\":\"0x3226a3f83a46c88c88218c261c9002571acd4cdce39c7acabdb59d00c91142ac\",\"license\":\"MIT\"},\"@web3-citizen/core-sol/contracts/libraries/SVG.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"./SVGUtils.sol\\\";\\n\\n/**\\n * @title svg\\n * @author Kames Geraghty\\n * @notice SVG construction library using web-like API.\\n * @dev Original code from w1nt3r-eth/hot-chain-svg (https://github.com/w1nt3r-eth/hot-chain-svg)\\n */\\nlibrary svg {\\n  using Strings for uint256;\\n  using Strings for uint8;\\n\\n  function g(string memory _props, string memory _children) internal pure returns (string memory) {\\n    return el(\\\"g\\\", _props, _children);\\n  }\\n\\n  function path(string memory _props, string memory _children)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    return el(\\\"path\\\", _props, _children);\\n  }\\n\\n  function text(string memory _props, string memory _children)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    return el(\\\"text\\\", _props, _children);\\n  }\\n\\n  function line(string memory _props, string memory _children)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    return el(\\\"line\\\", _props, _children);\\n  }\\n\\n  function circle(string memory _props, string memory _children)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    return el(\\\"circle\\\", _props, _children);\\n  }\\n\\n  function circle(string memory _props) internal pure returns (string memory) {\\n    return el(\\\"circle\\\", _props);\\n  }\\n\\n  function rect(string memory _props, string memory _children)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    return el(\\\"rect\\\", _props, _children);\\n  }\\n\\n  function rect(string memory _props) internal pure returns (string memory) {\\n    return el(\\\"rect\\\", _props);\\n  }\\n\\n  function stop(string memory _props) internal pure returns (string memory) {\\n    return el(\\\"stop\\\", _props);\\n  }\\n\\n  function filter(string memory _props, string memory _children)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    return el(\\\"filter\\\", _props, _children);\\n  }\\n\\n  function defs(string memory _children) internal pure returns (string memory) {\\n    return el(\\\"defs\\\", \\\"\\\", _children);\\n  }\\n\\n  function cdata(string memory _content) internal pure returns (string memory) {\\n    return string.concat(\\\"<![CDATA[\\\", _content, \\\"]]>\\\");\\n  }\\n\\n  /* GRADIENTS */\\n  function radialGradient(string memory _props, string memory _children)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    return el(\\\"radialGradient\\\", _props, _children);\\n  }\\n\\n  function linearGradient(string memory _props, string memory _children)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    return el(\\\"linearGradient\\\", _props, _children);\\n  }\\n\\n  function gradientStop(\\n    uint256 offset,\\n    string memory stopColor,\\n    string memory _props\\n  ) internal pure returns (string memory) {\\n    return\\n      el(\\n        \\\"stop\\\",\\n        string.concat(\\n          prop(\\\"stop-color\\\", stopColor),\\n          \\\" \\\",\\n          prop(\\\"offset\\\", string.concat(svgUtils.uint2str(offset), \\\"%\\\")),\\n          \\\" \\\",\\n          _props\\n        )\\n      );\\n  }\\n\\n  function animateTransform(string memory _props) internal pure returns (string memory) {\\n    return el(\\\"animateTransform\\\", _props);\\n  }\\n\\n  function image(string memory _href, string memory _props) internal pure returns (string memory) {\\n    return el(\\\"image\\\", string.concat(prop(\\\"href\\\", _href), \\\" \\\", _props));\\n  }\\n\\n  function start() internal pure returns (string memory) {\\n    return\\n      string.concat(\\n        '<svg width=\\\"400\\\" height=\\\"400\\\" style=\\\"background:#541563\\\" ',\\n        'viewBox=\\\"0 0 400 400\\\" ',\\n        'xmlns=\\\"http://www.w3.org/2000/svg\\\" ',\\n        \\\">\\\"\\n      );\\n  }\\n\\n  function end() internal pure returns (bytes memory) {\\n    return (\\\"</svg>\\\");\\n  }\\n\\n  /* COMMON */\\n  // A generic element, can be used to construct any SVG (or HTML) element\\n  function el(\\n    string memory _tag,\\n    string memory _props,\\n    string memory _children\\n  ) internal pure returns (string memory) {\\n    return string.concat(\\\"<\\\", _tag, \\\" \\\", _props, \\\">\\\", _children, \\\"</\\\", _tag, \\\">\\\");\\n  }\\n\\n  // A generic element, can be used to construct any SVG (or HTML) element without children\\n  function el(string memory _tag, string memory _props) internal pure returns (string memory) {\\n    return string.concat(\\\"<\\\", _tag, \\\" \\\", _props, \\\"/>\\\");\\n  }\\n\\n  // an SVG attribute\\n  function prop(string memory _key, string memory _val) internal pure returns (string memory) {\\n    return string.concat(_key, \\\"=\\\", '\\\"', _val, '\\\" ');\\n  }\\n\\n  function stringifyIntSet(\\n    bytes memory _data,\\n    uint256 _offset,\\n    uint256 _len\\n  ) public pure returns (bytes memory) {\\n    bytes memory res;\\n    require(_data.length >= _offset + _len, \\\"Out of range\\\");\\n    for (uint256 i = _offset; i < _offset + _len; i++) {\\n      res = abi.encodePacked(res, byte2uint8(_data, i).toString(), \\\" \\\");\\n    }\\n    return res;\\n  }\\n\\n  function byte2uint8(bytes memory _data, uint256 _offset) public pure returns (uint8) {\\n    require(_data.length > _offset, \\\"Out of range\\\");\\n    return uint8(_data[_offset]);\\n  }\\n}\\n\",\"keccak256\":\"0xef52c3884017a442187844cd9e54e9b1cfc3b17ff40a3008c7cbec918a7f9f7a\",\"license\":\"MIT\"},\"@web3-citizen/core-sol/contracts/libraries/SVGColor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\ncontract SVGColor {\\n  using Strings for uint256;\\n  using Strings for uint8;\\n\\n  mapping(string => bytes) public colors;\\n\\n  constructor() {\\n    colors[\\\"Black\\\"] = hex\\\"000000\\\";\\n    colors[\\\"White\\\"] = hex\\\"FFFFFF\\\";\\n    colors[\\\"Dark1\\\"] = hex\\\"232323\\\";\\n    colors[\\\"Dark2\\\"] = hex\\\"464646\\\";\\n  }\\n\\n  function getColor(string memory _colorName) public view returns (bytes memory) {\\n    require(colors[_colorName].length == 3, \\\"Unknown color\\\");\\n    return abi.encodePacked(colors[_colorName], hex\\\"64\\\");\\n  }\\n\\n  function getColor(string memory _colorName, uint8 _alpha) public view returns (bytes memory) {\\n    require(colors[_colorName].length == 3, \\\"Unknown color\\\");\\n    return abi.encodePacked(colors[_colorName], _alpha);\\n  }\\n\\n  function getRgba(string memory _colorName) public view returns (string memory) {\\n    return string(toRgba(getColor(_colorName), 0));\\n  }\\n\\n  // Input: array of colors (without alpha)\\n  // Ouputs a linearGradient\\n  function autoLinearGradient(\\n    bytes memory _colors,\\n    bytes memory _id,\\n    bytes memory _customAttributes\\n  ) public view returns (bytes memory) {\\n    return this.autoLinearGradient(\\\"\\\", _colors, _id, _customAttributes);\\n  }\\n\\n  function autoLinearGradient(\\n    bytes memory _coordinates,\\n    bytes memory _colors,\\n    bytes memory _id,\\n    bytes memory _customAttributes\\n  ) external view returns (bytes memory) {\\n    bytes memory _b;\\n    if (_coordinates.length > 3) {\\n      _b = abi.encodePacked(uint8(128), _coordinates);\\n    } else {\\n      _b = hex\\\"00\\\";\\n    }\\n    // Count the number of colors passed, each on 4 byte\\n    uint256 colorCount = _colors.length / 4;\\n    uint8 i = 0;\\n    while (i < colorCount) {\\n      _b = abi.encodePacked(\\n        _b,\\n        uint8(i * (100 / (colorCount - 1))), // grad. stop %\\n        uint8(_colors[i * 4]),\\n        uint8(_colors[i * 4 + 1]),\\n        uint8(_colors[i * 4 + 2]),\\n        uint8(_colors[i * 4 + 3])\\n      );\\n      i++;\\n    }\\n    return linearGradient(_b, _id, _customAttributes);\\n  }\\n\\n  function linearGradient(\\n    bytes memory _lg,\\n    bytes memory _id,\\n    bytes memory _customAttributes\\n  ) public pure returns (bytes memory) {\\n    bytes memory grdata;\\n    uint8 offset = 1;\\n\\n    if (uint8(_lg[0]) & 128 == 128) {\\n      grdata = abi.encodePacked(\\n        'x1=\\\"',\\n        byte2uint8(_lg, 1).toString(),\\n        '%\\\" x2=\\\"',\\n        byte2uint8(_lg, 2).toString(),\\n        '%\\\" y1=\\\"',\\n        byte2uint8(_lg, 3).toString(),\\n        '%\\\" y2=\\\"',\\n        byte2uint8(_lg, 4).toString(),\\n        '%\\\"'\\n      );\\n      offset = 5;\\n    }\\n    grdata = abi.encodePacked('<linearGradient id=\\\"', _id, '\\\" ', _customAttributes, grdata, \\\">\\\");\\n    for (uint256 i = offset; i < _lg.length; i += 5) {\\n      grdata = abi.encodePacked(\\n        grdata,\\n        '<stop offset=\\\"',\\n        byte2uint8(_lg, i).toString(),\\n        '%\\\" stop-color=\\\"',\\n        toRgba(_lg, i + 1),\\n        '\\\" id=\\\"',\\n        _id,\\n        byte2uint8(_lg, i).toString(),\\n        '\\\"/>'\\n      );\\n    }\\n    return abi.encodePacked(grdata, \\\"</linearGradient>\\\");\\n  }\\n\\n  function toRgba(bytes memory _rgba, uint256 offset) public pure returns (bytes memory) {\\n    return\\n      abi.encodePacked(\\n        \\\"rgba(\\\",\\n        byte2uint8(_rgba, offset).toString(),\\n        \\\",\\\",\\n        byte2uint8(_rgba, offset + 1).toString(),\\n        \\\",\\\",\\n        byte2uint8(_rgba, offset + 2).toString(),\\n        \\\",\\\",\\n        byte2uint8(_rgba, offset + 3).toString(),\\n        \\\"%)\\\"\\n      );\\n  }\\n\\n  function byte2uint8(bytes memory _data, uint256 _offset) public pure returns (uint8) {\\n    require(_data.length > _offset, \\\"Out of range\\\");\\n    return uint8(_data[_offset]);\\n  }\\n\\n  // formats rgba white with a specified opacity / alpha\\n  function white_a(uint256 _a) internal pure returns (string memory) {\\n    return rgba(255, 255, 255, _a);\\n  }\\n\\n  // formats rgba black with a specified opacity / alpha\\n  function black_a(uint256 _a) internal pure returns (string memory) {\\n    return rgba(0, 0, 0, _a);\\n  }\\n\\n  // formats generic rgba color in css\\n  function rgba(\\n    uint256 _r,\\n    uint256 _g,\\n    uint256 _b,\\n    uint256 _a\\n  ) internal pure returns (string memory) {\\n    string memory formattedA = _a < 100 ? string.concat(\\\"0.\\\", uint2str(_a)) : \\\"1\\\";\\n    return\\n      string.concat(\\n        \\\"rgba(\\\",\\n        uint2str(_r),\\n        \\\",\\\",\\n        uint2str(_g),\\n        \\\",\\\",\\n        uint2str(_b),\\n        \\\",\\\",\\n        formattedA,\\n        \\\")\\\"\\n      );\\n  }\\n\\n  function uint2str(uint256 _i) internal pure returns (string memory _uintAsString) {\\n    if (_i == 0) {\\n      return \\\"0\\\";\\n    }\\n    uint256 j = _i;\\n    uint256 len;\\n    while (j != 0) {\\n      len++;\\n      j /= 10;\\n    }\\n    bytes memory bstr = new bytes(len);\\n    uint256 k = len;\\n    while (_i != 0) {\\n      k = k - 1;\\n      uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\n      bytes1 b1 = bytes1(temp);\\n      bstr[k] = b1;\\n      _i /= 10;\\n    }\\n    return string(bstr);\\n  }\\n}\\n\",\"keccak256\":\"0x2e33aeee09dbb045bc969ba9b9bc119394b12f0c1d9014172fea986df942af9c\",\"license\":\"MIT\"},\"@web3-citizen/core-sol/contracts/libraries/SVGUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n/**\\n  * @title  SVG Utilities\\n  * @author Kames Geraghty\\n  * @notice The SVG Utilities Library provides functions for constructing SVG; format CSS and numbers.\\n  * @dev Original code from w1nt3r-eth/hot-chain-svg (https://github.com/w1nt3r-eth/hot-chain-svg)\\n*/\\nlibrary svgUtils {\\n    using Strings for uint256;\\n    using Strings for uint8;\\n    \\n    /// @notice Empty SVG element\\n    string internal constant NULL = \\\"\\\";\\n\\n    /**\\n     * @notice Formats a CSS variable line. Includes a semicolon for formatting.\\n     * @param _key User for which to calculate prize amount.\\n     * @param _val User for which to calculate prize amount.\\n     * @return string Generated CSS variable.\\n    */\\n    function setCssVar(string memory _key, string memory _val)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return string.concat(\\\"--\\\", _key, \\\":\\\", _val, \\\";\\\");\\n    }\\n\\n    /**\\n     * @notice Formats getting a css variable\\n     * @param _key User for which to calculate prize amount.\\n     * @return string Generated CSS variable.\\n    */\\n    function getCssVar(string memory _key)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return string.concat(\\\"var(--\\\", _key, \\\")\\\");\\n    }\\n\\n    // formats getting a def URL\\n    function getDefURL(string memory _id)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return string.concat(\\\"url(#\\\", _id, \\\")\\\");\\n    }\\n\\n    // checks if two strings are equal\\n    function stringsEqual(string memory _a, string memory _b)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return\\n            keccak256(abi.encodePacked(_a)) == keccak256(abi.encodePacked(_b));\\n    }\\n\\n    // returns the length of a string in characters\\n    function utfStringLength(string memory _str)\\n        internal\\n        pure\\n        returns (uint256 length)\\n    {\\n        uint256 i = 0;\\n        bytes memory string_rep = bytes(_str);\\n\\n        while (i < string_rep.length) {\\n            if (string_rep[i] >> 7 == 0) i += 1;\\n            else if (string_rep[i] >> 5 == bytes1(uint8(0x6))) i += 2;\\n            else if (string_rep[i] >> 4 == bytes1(uint8(0xE))) i += 3;\\n            else if (string_rep[i] >> 3 == bytes1(uint8(0x1E)))\\n                i += 4;\\n                //For safety\\n            else i += 1;\\n\\n            length++;\\n        }\\n    }\\n\\n    function round2Txt(\\n        uint256 _value,\\n        uint8 _decimals,\\n        uint8 _prec\\n    ) internal pure returns (bytes memory) {\\n        return abi.encodePacked(\\n            (_value / 10 ** _decimals).toString(), \\n            \\\".\\\",\\n            ( _value / 10 ** (_decimals - _prec) -\\n                _value / 10 ** (_decimals ) * 10 ** _prec\\n            ).toString()\\n        );\\n    }\\n\\n     // converts an unsigned integer to a string\\n     function uint2str(uint256 _i)\\n     internal\\n     pure\\n     returns (string memory _uintAsString)\\n {\\n     if (_i == 0) {\\n         return \\\"0\\\";\\n     }\\n     uint256 j = _i;\\n     uint256 len;\\n     while (j != 0) {\\n         len++;\\n         j /= 10;\\n     }\\n     bytes memory bstr = new bytes(len);\\n     uint256 k = len;\\n     while (_i != 0) {\\n         k = k - 1;\\n         uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\n         bytes1 b1 = bytes1(temp);\\n         bstr[k] = b1;\\n         _i /= 10;\\n     }\\n     return string(bstr);\\n }\\n}\\n\",\"keccak256\":\"0xe8ac1b5676a5d9850445e97799a09a1a30026f03728cb2286eeba23bc57b06e0\",\"license\":\"MIT\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa73959e6ef0b693e4423a562e612370160b934a75e618361ddd8c9c4b8ddbaaf\",\"license\":\"MIT\"},\"contracts/Deployer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.15;\\n\\nimport \\\"@web3-citizen/core-sol/contracts/CitizenAlpha.sol\\\";\\nimport \\\"@web3-citizen/core-sol/contracts/Nation/Nation.sol\\\";\\nimport \\\"@web3-citizen/core-sol/contracts/Notary/Notary.sol\\\";\\n\\ncontract Deployer {\\n  address private _metadata;\\n  address[] private _citizenships;\\n  address[] private _nations;\\n  address[] private _notaries;\\n\\n  // event CitizenshipStarted(address indexed citizenship, address indexed founder);\\n  // event NationStarted(address indexed nation, address indexed founder);\\n  // event NotaryStarted(address indexed notary, address indexed founder);\\n\\n  constructor(address _metadata_) {\\n    _metadata = _metadata_;\\n  }\\n\\n  function setupDemocracy(\\n    string memory name,\\n    string memory symbol,\\n    string memory nationName,\\n    string memory nationSymbol,\\n    address[] calldata founders\\n  ) public {\\n    CitizenAlpha citizenAlpha_ = deployCitizenship(_metadata, name, symbol, founders);\\n    deployNation(nationName, nationSymbol, address(citizenAlpha_), founders);\\n    address notary_ = deployNotary(address(citizenAlpha_), founders);\\n    citizenAlpha_.setNotary(notary_);\\n  }\\n\\n  function deployCitizenship(\\n    address metadata_,\\n    string memory name_,\\n    string memory symbol_,\\n    address[] calldata founders\\n  ) public returns (CitizenAlpha) {\\n    CitizenAlpha citizenship_ = new CitizenAlpha(metadata_, name_, symbol_, founders);\\n    _citizenships.push(address(citizenship_));\\n    // emit CitizenshipStarted(address(citizenship_), msg.sender);\\n    return citizenship_;\\n  }\\n\\n  function deployNation(\\n    string memory name,\\n    string memory symbol,\\n    address citizenAlpha,\\n    address[] calldata founders\\n  ) public returns (address) {\\n    Nation nation_ = new Nation(name, symbol, citizenAlpha, founders);\\n    _nations.push(address(nation_));\\n    // emit NationStarted(address(nation_), msg.sender);\\n    return address(nation_);\\n  }\\n\\n  function deployNotary(address _citizenAlpha_, address[] calldata notaries)\\n    public\\n    returns (address)\\n  {\\n    Notary notary_ = new Notary(_citizenAlpha_, notaries);\\n    _notaries.push(address(notary_));\\n    // emit NotaryStarted(address(notary_), msg.sender);\\n    return address(notary_);\\n  }\\n\\n  function getCitizenships() public view returns (address[] memory citizenships) {\\n    return _citizenships;\\n  }\\n\\n  function getCitizenshipCount() public view returns (uint256 count) {\\n    return _nations.length;\\n  }\\n\\n  function getNations() public view returns (address[] memory nations) {\\n    return _nations;\\n  }\\n\\n  function getNationCount() public view returns (uint256 count) {\\n    return _nations.length;\\n  }\\n\\n  function getNotaries() public view returns (address[] memory notaries) {\\n    return _notaries;\\n  }\\n\\n  function getNotaryCount() public view returns (uint256 count) {\\n    return _notaries.length;\\n  }\\n}\\n\",\"keccak256\":\"0xdeda8d39ca2ed6cf5b2dea814d86504c7bcdf5259ffe6badb16bd16975cb12c7\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051615f3a380380615f3a83398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b615ea7806100936000396000f3fe60806040523480156200001157600080fd5b5060043610620000ab5760003560e01c80639e2122ba116200006e5780639e2122ba146200013e578063a4ac4aec1462000147578063aaf34b941462000160578063d5a2a5dd146200013e578063e0f9ba96146200016a57600080fd5b8063335fc3b414620000b0578063488558b214620000e4578063510c7b2f14620000fb57806362386c7b146200010e5780638ff190801462000125575b600080fd5b620000c7620000c13660046200064c565b62000174565b6040516001600160a01b0390911681526020015b60405180910390f35b620000c7620000f5366004620006f8565b6200020e565b6003545b604051908152602001620000db565b620000c76200011f3660046200076d565b620002a7565b6200013c62000136366004620007c6565b6200033b565b005b600254620000ff565b62000151620003e3565b604051620000db9190620008ae565b6200015162000447565b62000151620004a9565b60008086868686866040516200018a906200050b565b6200019a95949392919062000998565b604051809103906000f080158015620001b7573d6000803e3d6000fd5b50600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0319166001600160a01b038316179055979650505050505050565b6000808686868686604051620002249062000519565b62000234959493929190620009f3565b604051809103906000f08015801562000251573d6000803e3d6000fd5b506001805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b0319166001600160a01b038316179055979650505050505050565b600080848484604051620002bb9062000527565b620002c99392919062000a44565b604051809103906000f080158015620002e6573d6000803e3d6000fd5b50600380546001810182556000919091527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0180546001600160a01b0319166001600160a01b03831617905595945050505050565b6000805462000357906001600160a01b0316888886866200020e565b905062000368858583868662000174565b50600062000378828585620002a7565b6040516351ca507360e11b81526001600160a01b0380831660048301529192509083169063a394a0e690602401600060405180830381600087803b158015620003c057600080fd5b505af1158015620003d5573d6000803e3d6000fd5b505050505050505050505050565b606060018054806020026020016040519081016040528092919081815260200182805480156200043d57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116200041e575b5050505050905090565b606060038054806020026020016040519081016040528092919081815260200182805480156200043d576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116200041e575050505050905090565b606060028054806020026020016040519081016040528092919081815260200182805480156200043d576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116200041e575050505050905090565b611fc78062000a7583390190565b61258c8062002a3c83390190565b610eaa8062004fc883390190565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200055d57600080fd5b813567ffffffffffffffff808211156200057b576200057b62000535565b604051601f8301601f19908116603f01168101908282118183101715620005a657620005a662000535565b81604052838152866020858801011115620005c057600080fd5b836020870160208301376000602085830101528094505050505092915050565b80356001600160a01b0381168114620005f857600080fd5b919050565b60008083601f8401126200061057600080fd5b50813567ffffffffffffffff8111156200062957600080fd5b6020830191508360208260051b85010111156200064557600080fd5b9250929050565b6000806000806000608086880312156200066557600080fd5b853567ffffffffffffffff808211156200067e57600080fd5b6200068c89838a016200054b565b96506020880135915080821115620006a357600080fd5b620006b189838a016200054b565b9550620006c160408901620005e0565b94506060880135915080821115620006d857600080fd5b50620006e788828901620005fd565b969995985093965092949392505050565b6000806000806000608086880312156200071157600080fd5b6200071c86620005e0565b9450602086013567ffffffffffffffff808211156200073a57600080fd5b6200074889838a016200054b565b955060408801359150808211156200075f57600080fd5b620006c189838a016200054b565b6000806000604084860312156200078357600080fd5b6200078e84620005e0565b9250602084013567ffffffffffffffff811115620007ab57600080fd5b620007b986828701620005fd565b9497909650939450505050565b60008060008060008060a08789031215620007e057600080fd5b863567ffffffffffffffff80821115620007f957600080fd5b620008078a838b016200054b565b975060208901359150808211156200081e57600080fd5b6200082c8a838b016200054b565b965060408901359150808211156200084357600080fd5b620008518a838b016200054b565b955060608901359150808211156200086857600080fd5b620008768a838b016200054b565b945060808901359150808211156200088d57600080fd5b506200089c89828a01620005fd565b979a9699509497509295939492505050565b6020808252825182820181905260009190848201906040850190845b81811015620008f15783516001600160a01b031683529284019291840191600101620008ca565b50909695505050505050565b6000815180845260005b81811015620009255760208185018101518683018201520162000907565b8181111562000938576000602083870101525b50601f01601f19169290920160200192915050565b8183526000602080850194508260005b858110156200098d576001600160a01b036200097983620005e0565b16875295820195908201906001016200095d565b509495945050505050565b608081526000620009ad6080830188620008fd565b8281036020840152620009c18188620008fd565b6001600160a01b038716604085015283810360608501529050620009e78185876200094d565b98975050505050505050565b6001600160a01b038616815260806020820181905260009062000a1990830187620008fd565b828103604084015262000a2d8187620008fd565b90508281036060840152620009e78185876200094d565b6001600160a01b038416815260406020820181905260009062000a6b90830184866200094d565b9594505050505056fe60806040523480156200001157600080fd5b5060405162001fc738038062001fc7833981016040819052620000349162000505565b6002620000428582620006aa565b506003620000518482620006aa565b50600580546001600160a01b0319166001600160a01b03841617905560066020527f5beac58aad0c637879eba9673a3539c90e0177d6d0b5496bd46b465d769e6341805460ff1990811660019081179092557f609910be899f2b1215d939c765c51150bb77ff3c25e65539c171a28601363a53805482168317905560008080527f54cdd369e4e8a8515e52ca72ec816c2101831ad1f18bf44102ed171459c9b4f8805490921690921790555b8151811015620001745762000142662327aaa72222a960c91b60001b8383815181106200012e576200012e62000776565b60200260200101516200019660201b60201c565b6200015f6000801b8383815181106200012e576200012e62000776565b806200016b816200078c565b915050620000fd565b506200018c662327aaa72222a960c91b6000620001a6565b50505050620007df565b620001a28282620001f1565b5050565b600082815260208190526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b6200020882826200023460201b62000d611760201c565b60008281526001602090815260409091206200022f91839062000de5620002bc821b17901c565b505050565b620002408282620002dc565b620001a2576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620002783390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000620002d3836001600160a01b0384166200038f565b90505b92915050565b60008281526006602052604081205460ff16158062000369575060055460405163f3caad0360e01b81526001600160a01b0384811660048301529091169063f3caad0390602401602060405180830381865afa15801562000341573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003679190620007b4565b155b156200037857506000620002d6565b620002d38383620003e160201b62000dfa1760201c565b6000818152600183016020526040812054620003d857508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155620002d6565b506000620002d6565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156200044b576200044b6200040a565b604052919050565b600082601f8301126200046557600080fd5b81516001600160401b038111156200048157620004816200040a565b602062000497601f8301601f1916820162000420565b8281528582848701011115620004ac57600080fd5b60005b83811015620004cc578581018301518282018401528201620004af565b83811115620004de5760008385840101525b5095945050505050565b80516001600160a01b03811681146200050057600080fd5b919050565b600080600080608085870312156200051c57600080fd5b84516001600160401b03808211156200053457600080fd5b620005428883890162000453565b95506020915081870151818111156200055a57600080fd5b6200056889828a0162000453565b9550506200057960408801620004e8565b93506060870151818111156200058e57600080fd5b8701601f81018913620005a057600080fd5b805182811115620005b557620005b56200040a565b8060051b9250620005c884840162000420565b818152928201840192848101908b851115620005e357600080fd5b928501925b848410156200060c57620005fc84620004e8565b82529285019290850190620005e8565b989b979a50959850505050505050565b600181811c908216806200063157607f821691505b6020821081036200065257634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200022f57600081815260208120601f850160051c81016020861015620006815750805b601f850160051c820191505b81811015620006a2578281556001016200068d565b505050505050565b81516001600160401b03811115620006c657620006c66200040a565b620006de81620006d784546200061c565b8462000658565b602080601f831160018114620007165760008415620006fd5750858301515b600019600386901b1c1916600185901b178555620006a2565b600085815260208120601f198616915b82811015620007475788860151825594840194600190910190840162000726565b5085821015620007665787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052603260045260246000fd5b600060018201620007ad57634e487b7160e01b600052601160045260246000fd5b5060010190565b600060208284031215620007c757600080fd5b81518015158114620007d857600080fd5b9392505050565b6117d880620007ef6000396000f3fe608060405234801561001057600080fd5b50600436106101735760003560e01c806395d89b41116100de578063d547741f11610097578063e6b92bbc11610071578063e6b92bbc14610354578063e6fcc84b14610365578063eb7f494d1461036d578063ffa629a31461038057600080fd5b8063d547741f1461031b578063dee1f0e41461032e578063e39d127a1461034157600080fd5b806395d89b41146102bf578063a217fddf146102c7578063b84c8246146102cf578063c47f0027146102e2578063c7b57841146102f5578063ca15c8731461030857600080fd5b806336568abe1161013057806336568abe14610231578063392f37e9146102445780637c4a13b11461025b578063870725221461026e5780639010d07c1461028157806391d14854146102ac57600080fd5b806301ffc9a71461017857806306fdde03146101a05780631e4e0091146101b5578063248a9ca3146101ca5780632da74d8c146101fb5780632f2ff15d1461021e575b600080fd5b61018b6101863660046112f0565b610393565b60405190151581526020015b60405180910390f35b6101a86103be565b6040516101979190611372565b6101c86101c3366004611385565b610450565b005b6101ed6101d83660046113a7565b60009081526020819052604090206001015490565b604051908152602001610197565b61018b6102093660046113a7565b60009081526006602052604090205460ff1690565b6101c861022c3660046113dc565b6104ad565b6101c861023f3660046113dc565b61057d565b61024c6105fb565b60405161019793929190611408565b6101c86102693660046113a7565b6107b5565b6101c861027c366004611385565b610878565b61029461028f366004611385565b610939565b6040516001600160a01b039091168152602001610197565b61018b6102ba3660046113dc565b610958565b6101a86109f8565b6101ed600081565b6101c86102dd36600461144b565b610a07565b6101c86102f036600461144b565b610a59565b61018b6103033660046114bd565b610aab565b6101ed6103163660046113a7565b610ac1565b6101c86103293660046113dc565b610ad8565b61018b61033c3660046114bd565b610be6565b6101c861034f36600461144b565b610bff565b6005546001600160a01b0316610294565b6101a8610c51565b6101c861037b3660046113a7565b610c60565b6101c861038e3660046114bd565b610cf9565b60006001600160e01b03198216635a05180f60e01b14806103b857506103b882610e23565b92915050565b6060600280546103cd906114d8565b80601f01602080910402602001604051908101604052809291908181526020018280546103f9906114d8565b80156104465780601f1061041b57610100808354040283529160200191610446565b820191906000526020600020905b81548152906001019060200180831161042957829003601f168201915b5050505050905090565b3361046869474f5645524e414e434560b01b82610958565b806104795750610479600082610958565b61049e5760405162461bcd60e51b815260040161049590611512565b60405180910390fd5b6104a88383610e58565b505050565b600082815260208190526040902060010154829033906104ce905b82610958565b806104eb57506104eb69474f5645524e414e434560b01b82610958565b806104fc57506104fc600082610958565b6105185760405162461bcd60e51b815260040161049590611512565b60008481526006602052604090205460ff1661056d5760405162461bcd60e51b81526020600482015260146024820152734e6174696f6e3a696e6163746976652d726f6c6560601b6044820152606401610495565b6105778484610ea3565b50505050565b6001600160a01b03811633146105ed5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610495565b6105f78282610ec5565b5050565b6060806060600260036004828054610612906114d8565b80601f016020809104026020016040519081016040528092919081815260200182805461063e906114d8565b801561068b5780601f106106605761010080835404028352916020019161068b565b820191906000526020600020905b81548152906001019060200180831161066e57829003601f168201915b5050505050925081805461069e906114d8565b80601f01602080910402602001604051908101604052809291908181526020018280546106ca906114d8565b80156107175780601f106106ec57610100808354040283529160200191610717565b820191906000526020600020905b8154815290600101906020018083116106fa57829003601f168201915b5050505050915080805461072a906114d8565b80601f0160208091040260200160405190810160405280929190818152602001828054610756906114d8565b80156107a35780601f10610778576101008083540402835291602001916107a3565b820191906000526020600020905b81548152906001019060200180831161078657829003601f168201915b50505050509050925092509250909192565b336107cd69474f5645524e414e434560b01b82610958565b806107de57506107de600082610958565b6107fa5760405162461bcd60e51b815260040161049590611512565b60008281526006602052604090205460ff1615156001146108545760405162461bcd60e51b815260206004820152601460248201527313985d1a5bdb8e9c9bdb194b591a5cd8589b195960621b6044820152606401610495565b61085f826000610e58565b506000908152600660205260409020805460ff19169055565b3361089069474f5645524e414e434560b01b82610958565b806108a157506108a1600082610958565b6108bd5760405162461bcd60e51b815260040161049590611512565b60008381526006602052604090205460ff16156109125760405162461bcd60e51b815260206004820152601360248201527213985d1a5bdb8e9c9bdb194b595b98589b1959606a1b6044820152606401610495565b61091c8383610e58565b50506000908152600660205260409020805460ff19166001179055565b60008281526001602052604081206109519083610ee7565b9392505050565b60008281526006602052604081205460ff1615806109e1575060055460405163f3caad0360e01b81526001600160a01b0384811660048301529091169063f3caad0390602401602060405180830381865afa1580156109bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109df919061153f565b155b156109ee575060006103b8565b6109518383610dfa565b6060600380546103cd906114d8565b33610a1f69474f5645524e414e434560b01b82610958565b80610a305750610a30600082610958565b610a4c5760405162461bcd60e51b815260040161049590611512565b60036105778385836115c5565b33610a7169474f5645524e414e434560b01b82610958565b80610a825750610a82600082610958565b610a9e5760405162461bcd60e51b815260040161049590611512565b60026105778385836115c5565b60006103b8662327aaa72222a960c91b83610958565b60008181526001602052604081206103b890610ef3565b60008281526020819052604090206001015482903390610af7906104c8565b80610b145750610b1469474f5645524e414e434560b01b82610958565b80610b255750610b25600082610958565b610b415760405162461bcd60e51b815260040161049590611512565b83610b875760405162461bcd60e51b815260206004820152601660248201527513985d1a5bdb8e9a5b9d985b1a590b5c995c5d595cdd60521b6044820152606401610495565b60008481526006602052604090205460ff16610bdc5760405162461bcd60e51b81526020600482015260146024820152734e6174696f6e3a696e6163746976652d726f6c6560601b6044820152606401610495565b6105778484610ec5565b60006103b869474f5645524e414e434560b01b83610958565b33610c1769474f5645524e414e434560b01b82610958565b80610c285750610c28600082610958565b610c445760405162461bcd60e51b815260040161049590611512565b60046105778385836115c5565b6060600480546103cd906114d8565b662327aaa72222a960c91b610c7481610efd565b60008281526006602052604090205460ff1615610cc95760405162461bcd60e51b815260206004820152601360248201527213985d1a5bdb8e9c9bdb194b595b98589b1959606a1b6044820152606401610495565b610cdd82662327aaa72222a960c91b610e58565b506000908152600660205260409020805460ff19166001179055565b33610d1169474f5645524e414e434560b01b82610958565b80610d225750610d22600082610958565b610d3e5760405162461bcd60e51b815260040161049590611512565b50600580546001600160a01b0319166001600160a01b0392909216919091179055565b610d6b8282610958565b6105f7576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055610da13390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000610951836001600160a01b038416610f0a565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b60006001600160e01b03198216637965db0b60e01b14806103b857506301ffc9a760e01b6001600160e01b03198316146103b8565b600082815260208190526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b610ead8282610d61565b60008281526001602052604090206104a89082610de5565b610ecf8282610f59565b60008281526001602052604090206104a89082610fbe565b60006109518383610fd3565b60006103b8825490565b610f078133610ffd565b50565b6000818152600183016020526040812054610f51575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556103b8565b5060006103b8565b610f638282610958565b156105f7576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000610951836001600160a01b038416611061565b6000826000018281548110610fea57610fea611686565b9060005260206000200154905092915050565b6110078282610958565b6105f75761101f816001600160a01b03166014611154565b61102a836020611154565b60405160200161103b92919061169c565b60408051601f198184030181529082905262461bcd60e51b825261049591600401611372565b6000818152600183016020526040812054801561114a576000611085600183611727565b855490915060009061109990600190611727565b90508181146110fe5760008660000182815481106110b9576110b9611686565b90600052602060002001549050808760000184815481106110dc576110dc611686565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061110f5761110f61173e565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506103b8565b60009150506103b8565b60606000611163836002611754565b61116e906002611773565b67ffffffffffffffff81111561118657611186611561565b6040519080825280601f01601f1916602001820160405280156111b0576020820181803683370190505b509050600360fc1b816000815181106111cb576111cb611686565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106111fa576111fa611686565b60200101906001600160f81b031916908160001a905350600061121e846002611754565b611229906001611773565b90505b60018111156112a1576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061125d5761125d611686565b1a60f81b82828151811061127357611273611686565b60200101906001600160f81b031916908160001a90535060049490941c9361129a8161178b565b905061122c565b5083156109515760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610495565b60006020828403121561130257600080fd5b81356001600160e01b03198116811461095157600080fd5b60005b8381101561133557818101518382015260200161131d565b838111156105775750506000910152565b6000815180845261135e81602086016020860161131a565b601f01601f19169290920160200192915050565b6020815260006109516020830184611346565b6000806040838503121561139857600080fd5b50508035926020909101359150565b6000602082840312156113b957600080fd5b5035919050565b80356001600160a01b03811681146113d757600080fd5b919050565b600080604083850312156113ef57600080fd5b823591506113ff602084016113c0565b90509250929050565b60608152600061141b6060830186611346565b828103602084015261142d8186611346565b905082810360408401526114418185611346565b9695505050505050565b6000806020838503121561145e57600080fd5b823567ffffffffffffffff8082111561147657600080fd5b818501915085601f83011261148a57600080fd5b81358181111561149957600080fd5b8660208285010111156114ab57600080fd5b60209290920196919550909350505050565b6000602082840312156114cf57600080fd5b610951826113c0565b600181811c908216806114ec57607f821691505b60208210810361150c57634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526013908201527213985d1a5bdb8e9d5b985d5d1a1bdc9a5e9959606a1b604082015260600190565b60006020828403121561155157600080fd5b8151801515811461095157600080fd5b634e487b7160e01b600052604160045260246000fd5b601f8211156104a857600081815260208120601f850160051c8101602086101561159e5750805b601f850160051c820191505b818110156115bd578281556001016115aa565b505050505050565b67ffffffffffffffff8311156115dd576115dd611561565b6115f1836115eb83546114d8565b83611577565b6000601f841160018114611625576000851561160d5750838201355b600019600387901b1c1916600186901b17835561167f565b600083815260209020601f19861690835b828110156116565786850135825560209485019460019092019101611636565b50868210156116735760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b634e487b7160e01b600052603260045260246000fd5b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516116d481601785016020880161131a565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161170581602884016020880161131a565b01602801949350505050565b634e487b7160e01b600052601160045260246000fd5b60008282101561173957611739611711565b500390565b634e487b7160e01b600052603160045260246000fd5b600081600019048311821515161561176e5761176e611711565b500290565b6000821982111561178657611786611711565b500190565b60008161179a5761179a611711565b50600019019056fea2646970667358221220a41bf02dda386a73dc764e0099e7751d03e6a1a0e44c9ee35a4f95c726f77d9764736f6c634300080f003360806040523480156200001157600080fd5b506040516200258c3803806200258c83398101604081905262000034916200043b565b82826000620000448382620005e6565b506001620000538282620005e6565b505050620000706200006a620000e760201b60201c565b620000eb565b600880546001600160a01b0319166001600160a01b03861617905560005b8151811015620000dc57620000c7828281518110620000b157620000b1620006b2565b602002602001015160006200013d60201b60201c565b80620000d381620006de565b9150506200008e565b505050505062000715565b3390565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60078054600091826200015083620006de565b909155506001600160a01b038481166000908152600c6020908152604080832080546001600160a01b03191694881694909417909355600b90522081905590506200019c8382620001ef565b816001600160a01b0316836001600160a01b03167f7533f62ec6601bf9c87f8d96bf756b4b495e2a0e26ec9284e4927926ed6b3afd83604051620001e291815260200190565b60405180910390a3505050565b6001600160a01b0382166200024b5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064015b60405180910390fd5b6000818152600260205260409020546001600160a01b031615620002b25760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640162000242565b6001600160a01b0382166000908152600360205260408120805460019290620002dd908490620006fa565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b505050565b80516001600160a01b03811681146200035857600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156200039e576200039e6200035d565b604052919050565b600082601f830112620003b857600080fd5b81516001600160401b03811115620003d457620003d46200035d565b6020620003ea601f8301601f1916820162000373565b8281528582848701011115620003ff57600080fd5b60005b838110156200041f57858101830151828201840152820162000402565b83811115620004315760008385840101525b5095945050505050565b600080600080608085870312156200045257600080fd5b6200045d8562000340565b602086810151919550906001600160401b03808211156200047d57600080fd5b6200048b89838a01620003a6565b95506040880151915080821115620004a257600080fd5b620004b089838a01620003a6565b94506060880151915080821115620004c757600080fd5b818801915088601f830112620004dc57600080fd5b815181811115620004f157620004f16200035d565b8060051b91506200050484830162000373565b818152918301840191848101908b8411156200051f57600080fd5b938501935b838510156200054857620005388562000340565b8252938501939085019062000524565b989b979a50959850505050505050565b600181811c908216806200056d57607f821691505b6020821081036200058e57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200033b57600081815260208120601f850160051c81016020861015620005bd5750805b601f850160051c820191505b81811015620005de57828155600101620005c9565b505050505050565b81516001600160401b038111156200060257620006026200035d565b6200061a8162000613845462000558565b8462000594565b602080601f831160018114620006525760008415620006395750858301515b600019600386901b1c1916600185901b178555620005de565b600085815260208120601f198616915b82811015620006835788860151825594840194600190910190840162000662565b5085821015620006a25787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201620006f357620006f3620006c8565b5060010190565b60008219821115620007105762000710620006c8565b500190565b611e6780620007256000396000f3fe608060405234801561001057600080fd5b50600436106101e55760003560e01c806374a8f1031161010f578063b88d4fde116100a2578063f2fde38b11610071578063f2fde38b1461044e578063f3caad0314610461578063f3cb838514610474578063f5be31931461048757600080fd5b8063b88d4fde146103db578063b91808b1146103ee578063c87b56dd146103ff578063e985e9c51461041257600080fd5b80639d6abe4f116100de5780639d6abe4f14610378578063a22cb465146103a4578063a394a0e6146103b7578063a9dc491d146103ca57600080fd5b806374a8f1031461033b5780637a5b4f591461034e5780638da5cb5b1461035f57806395d89b411461037057600080fd5b80634e543b261161018757806370a082311161015657806370a08231146102fa578063715018a61461030d57806371e928af1461031557806373ac86671461032857600080fd5b80634e543b26146102a05780636352211e146102b357806365f68c89146102c65780636b8ab97d146102e757600080fd5b8063095ea7b3116101c3578063095ea7b31461025257806323b872dd146102675780632d3e579a1461027a57806342842e0e1461028d57600080fd5b806301ffc9a7146101ea57806306fdde0314610212578063081812fc14610227575b600080fd5b6101fd6101f83660046118ff565b61048f565b60405190151581526020015b60405180910390f35b61021a6104a0565b6040516102099190611974565b61023a610235366004611987565b610532565b6040516001600160a01b039091168152602001610209565b6102656102603660046119bc565b610559565b005b6102656102753660046119e6565b610673565b6101fd610288366004611a22565b6106bb565b61026561029b3660046119e6565b610738565b6102656102ae366004611a5e565b610753565b61023a6102c1366004611987565b6107b0565b6102d96102d4366004611a5e565b610810565b604051908152602001610209565b6102656102f5366004611a5e565b610883565b6102d9610308366004611a5e565b6109d8565b610265610a5e565b610265610323366004611a5e565b610a72565b610265610336366004611a87565b610bb5565b610265610349366004611a5e565b610bdb565b6008546001600160a01b031661023a565b6006546001600160a01b031661023a565b61021a610cc9565b61023a610386366004611a5e565b6001600160a01b039081166000908152600c60205260409020541690565b6102656103b2366004611aa4565b610cd8565b6102656103c5366004611a5e565b610ce3565b600a546001600160a01b031661023a565b6102656103e9366004611b4a565b610d39565b6009546001600160a01b031661023a565b61021a61040d366004611987565b610db8565b6101fd610420366004611bf5565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b61026561045c366004611a5e565b610f05565b6101fd61046f366004611a5e565b610f7e565b610265610482366004611a5e565b610f9f565b6007546102d9565b600061049a82610ff5565b92915050565b6060600080546104af90611c28565b80601f01602080910402602001604051908101604052809291908181526020018280546104db90611c28565b80156105285780601f106104fd57610100808354040283529160200191610528565b820191906000526020600020905b81548152906001019060200180831161050b57829003601f168201915b5050505050905090565b600061053d82611045565b506000908152600460205260409020546001600160a01b031690565b6000610564826107b0565b9050806001600160a01b0316836001600160a01b0316036105d65760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b03821614806105f257506105f28133610420565b6106645760405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c000060648201526084016105cd565b61066e83836110a4565b505050565b60405162461bcd60e51b815260206004820152601760248201527f436974697a656e416c7068613a20536f756c626f756e6400000000000000000060448201526064016105cd565b604051632474521560e21b8152600481018390526001600160a01b038281166024830152600091908516906391d1485490604401602060405180830381865afa15801561070c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107309190611c5c565b949350505050565b61066e83838360405180602001604052806000815250610d39565b61075b611112565b600a80546001600160a01b0319166001600160a01b0383169081179091556040519081527f40bf5fe825856ca00c4ac7cef649810e96d3c7cc944ec920e80190d26d10f5af906020015b60405180910390a150565b6000818152600260205260408120546001600160a01b03168061049a5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016105cd565b600061081b82610f7e565b6108675760405162461bcd60e51b815260206004820152601f60248201527f436974697a656e416c7068613a6e6f742d6163746976652d636974697a656e0060448201526064016105cd565b506001600160a01b03166000908152600b602052604090205490565b6009546001600160a01b031663f13eed97336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156108d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108fd9190611c5c565b6109195760405162461bcd60e51b81526004016105cd90611c79565b61092281610f7e565b156109695760405162461bcd60e51b815260206004820152601760248201527621b4ba34bd32b720b63834309d34b996b1b4ba34bd32b760491b60448201526064016105cd565b6109728161116c565b6109be5760405162461bcd60e51b815260206004820152601a60248201527f436974697a656e416c7068613a6e657665722d636974697a656e00000000000060448201526064016105cd565b6001600160a01b03166000908152600b6020526040812055565b60006001600160a01b038216610a425760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b60648201526084016105cd565b506001600160a01b031660009081526003602052604090205490565b610a66611112565b610a706000611192565b565b60003360095460405163f13eed9760e01b81526001600160a01b03808416600483015292935091169063f13eed9790602401602060405180830381865afa158015610ac1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae59190611c5c565b610b015760405162461bcd60e51b81526004016105cd90611c79565b610b0a82610f7e565b15610b515760405162461bcd60e51b815260206004820152601760248201527621b4ba34bd32b720b63834309d34b996b1b4ba34bd32b760491b60448201526064016105cd565b610b5a8261116c565b15610ba75760405162461bcd60e51b815260206004820181905260248201527f436974697a656e416c7068613a7265766f6b65642d636974697a656e7368697060448201526064016105cd565b610bb182826111e4565b5050565b610bbd611112565b600a8054911515600160a01b0260ff60a01b19909216919091179055565b60003360095460405163f13eed9760e01b81526001600160a01b03808416600483015292935091169063f13eed9790602401602060405180830381865afa158015610c2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4e9190611c5c565b610c6a5760405162461bcd60e51b81526004016105cd90611c79565b610c7382610f7e565b610cbf5760405162461bcd60e51b815260206004820152601860248201527f436974697a656e416c7068613a6e6f742d636974697a656e000000000000000060448201526064016105cd565b610bb18282611291565b6060600180546104af90611c28565b610bb13383836112f8565b610ceb611112565b600980546001600160a01b0319166001600160a01b0383169081179091556040519081527fe2bea979965a228cbde9e65befc96655827ad8934c3c6b9f8b9b66e1f907ef88906020016107a5565b610d4333836113be565b610da65760405162461bcd60e51b815260206004820152602e60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201526d1c881b9bdc88185c1c1c9bdd995960921b60648201526084016105cd565b610db28484848461143c565b50505050565b600854600a546060916001600160a01b031690600160a01b900460ff16610e4e5760405163c87b56dd60e01b8152600481018490526001600160a01b0382169063c87b56dd906024015b600060405180830381865afa158015610e1f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e479190810190611cb0565b9392505050565b600a546001600160a01b03163314610ed25760405163c87b56dd60e01b8152600481018490526001600160a01b0382169063c87b56dd90602401600060405180830381865afa158015610ea5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ecd9190810190611cb0565b610e47565b604051630c5bbf5960e01b8152600481018490526001600160a01b03821690630c5bbf5990602401610e02565b50919050565b610f0d611112565b6001600160a01b038116610f725760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105cd565b610f7b81611192565b50565b6000610f89826109d8565b600114610f9757600061049a565b600192915050565b610fa7611112565b600880546001600160a01b0319166001600160a01b0383169081179091556040519081527fc3cc2ca4478213568729272d27f2d5f5a1e0ffd0155e3ad804cc7d679a94672b906020016107a5565b60006001600160e01b031982166380ac58cd60e01b148061102657506001600160e01b03198216635b5e139f60e01b145b8061049a57506301ffc9a760e01b6001600160e01b031983161461049a565b6000818152600260205260409020546001600160a01b0316610f7b5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016105cd565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906110d9826107b0565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6006546001600160a01b03163314610a705760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105cd565b6001600160a01b0381166000908152600b60205260408120548103610f9757600061049a565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60078054600091826111f583611d3d565b909155506001600160a01b038481166000908152600c6020908152604080832080546001600160a01b03191694881694909417909355600b905220819055905061123f838261146f565b816001600160a01b0316836001600160a01b03167f7533f62ec6601bf9c87f8d96bf756b4b495e2a0e26ec9284e4927926ed6b3afd8360405161128491815260200190565b60405180910390a3505050565b6001600160a01b0382166000908152600b60205260409020546112b3816115b1565b816001600160a01b0316836001600160a01b03167fa96db3edccc72000dff77fc380cfbabe1646529eadd835eb11f2f8315669ec768360405161128491815260200190565b816001600160a01b0316836001600160a01b0316036113595760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016105cd565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c319101611284565b6000806113ca836107b0565b9050806001600160a01b0316846001600160a01b0316148061141157506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b806107305750836001600160a01b031661142a84610532565b6001600160a01b031614949350505050565b61144784848461164c565b611453848484846117e8565b610db25760405162461bcd60e51b81526004016105cd90611d56565b6001600160a01b0382166114c55760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016105cd565b6000818152600260205260409020546001600160a01b03161561152a5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016105cd565b6001600160a01b0382166000908152600360205260408120805460019290611553908490611da8565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60006115bc826107b0565b90506115c96000836110a4565b6001600160a01b03811660009081526003602052604081208054600192906115f2908490611dc0565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b826001600160a01b031661165f826107b0565b6001600160a01b0316146116c35760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b60648201526084016105cd565b6001600160a01b0382166117255760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016105cd565b6117306000826110a4565b6001600160a01b0383166000908152600360205260408120805460019290611759908490611dc0565b90915550506001600160a01b0382166000908152600360205260408120805460019290611787908490611da8565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b60006001600160a01b0384163b156118de57604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061182c903390899088908890600401611dd7565b6020604051808303816000875af1925050508015611867575060408051601f3d908101601f1916820190925261186491810190611e14565b60015b6118c4573d808015611895576040519150601f19603f3d011682016040523d82523d6000602084013e61189a565b606091505b5080516000036118bc5760405162461bcd60e51b81526004016105cd90611d56565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610730565b506001949350505050565b6001600160e01b031981168114610f7b57600080fd5b60006020828403121561191157600080fd5b8135610e47816118e9565b60005b8381101561193757818101518382015260200161191f565b83811115610db25750506000910152565b6000815180845261196081602086016020860161191c565b601f01601f19169290920160200192915050565b602081526000610e476020830184611948565b60006020828403121561199957600080fd5b5035919050565b80356001600160a01b03811681146119b757600080fd5b919050565b600080604083850312156119cf57600080fd5b6119d8836119a0565b946020939093013593505050565b6000806000606084860312156119fb57600080fd5b611a04846119a0565b9250611a12602085016119a0565b9150604084013590509250925092565b600080600060608486031215611a3757600080fd5b611a40846119a0565b925060208401359150611a55604085016119a0565b90509250925092565b600060208284031215611a7057600080fd5b610e47826119a0565b8015158114610f7b57600080fd5b600060208284031215611a9957600080fd5b8135610e4781611a79565b60008060408385031215611ab757600080fd5b611ac0836119a0565b91506020830135611ad081611a79565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611b1a57611b1a611adb565b604052919050565b600067ffffffffffffffff821115611b3c57611b3c611adb565b50601f01601f191660200190565b60008060008060808587031215611b6057600080fd5b611b69856119a0565b9350611b77602086016119a0565b925060408501359150606085013567ffffffffffffffff811115611b9a57600080fd5b8501601f81018713611bab57600080fd5b8035611bbe611bb982611b22565b611af1565b818152886020838501011115611bd357600080fd5b8160208401602083013760006020838301015280935050505092959194509250565b60008060408385031215611c0857600080fd5b611c11836119a0565b9150611c1f602084016119a0565b90509250929050565b600181811c90821680611c3c57607f821691505b602082108103610eff57634e487b7160e01b600052602260045260246000fd5b600060208284031215611c6e57600080fd5b8151610e4781611a79565b60208082526017908201527f436974697a656e416c7068613a6e6f742d6e6f74617279000000000000000000604082015260600190565b600060208284031215611cc257600080fd5b815167ffffffffffffffff811115611cd957600080fd5b8201601f81018413611cea57600080fd5b8051611cf8611bb982611b22565b818152856020838501011115611d0d57600080fd5b611d1e82602083016020860161191c565b95945050505050565b634e487b7160e01b600052601160045260246000fd5b600060018201611d4f57611d4f611d27565b5060010190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60008219821115611dbb57611dbb611d27565b500190565b600082821015611dd257611dd2611d27565b500390565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611e0a90830184611948565b9695505050505050565b600060208284031215611e2657600080fd5b8151610e47816118e956fea26469706673582212203976cc954d66cf31d22d4c74c1dba03bd12588ab8abd89e2d816950687dfff6e64736f6c634300080f003360806040523480156200001157600080fd5b5060405162000eaa38038062000eaa83398101604081905262000034916200022a565b600180546001600160a01b0319166001600160a01b03841617905562000064654e4f5441525960d01b30620000fc565b60005b8151811015620000dd57620000a26000801b8383815181106200008e576200008e62000313565b6020026020010151620000fc60201b60201c565b620000c8654e4f5441525960d01b60001b8383815181106200008e576200008e62000313565b80620000d48162000329565b91505062000067565b50620000f4654e4f5441525960d01b60006200010c565b505062000351565b62000108828262000157565b5050565b600082815260208190526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1662000108576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620001b33390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b80516001600160a01b03811681146200020f57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156200023e57600080fd5b6200024983620001f7565b602084810151919350906001600160401b03808211156200026957600080fd5b818601915086601f8301126200027e57600080fd5b81518181111562000293576200029362000214565b8060051b604051601f19603f83011681018181108582111715620002bb57620002bb62000214565b604052918252848201925083810185019189831115620002da57600080fd5b938501935b828510156200030357620002f385620001f7565b84529385019392850192620002df565b8096505050505050509250929050565b634e487b7160e01b600052603260045260246000fd5b6000600182016200034a57634e487b7160e01b600052601160045260246000fd5b5060010190565b610b4980620003616000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c806374a8f1031161008c578063d389c6a211610066578063d389c6a2146101a9578063d547741f146101bc578063e6b92bbc146101cf578063f13eed97146101ea57600080fd5b806374a8f1031461017b57806391d148541461018e578063a217fddf146101a157600080fd5b806301ffc9a7146100d4578063055e3e5e146100fc578063248a9ca3146101115780632f2ff15d1461014257806336568abe1461015557806371e928af14610168575b600080fd5b6100e76100e2366004610840565b6101fd565b60405190151581526020015b60405180910390f35b61010f61010a36600461086a565b610234565b005b61013461011f3660046108df565b60009081526020819052604090206001015490565b6040519081526020016100f3565b61010f610150366004610914565b6102bd565b61010f610163366004610914565b6102e2565b61010f610176366004610940565b610360565b61010f610189366004610940565b61039b565b6100e761019c366004610914565b6103d3565b610134600081565b61010f6101b736600461086a565b6103fc565b61010f6101ca366004610914565b610477565b6001546040516001600160a01b0390911681526020016100f3565b6100e76101f8366004610940565b61049c565b60006001600160e01b03198216637965db0b60e01b148061022e57506301ffc9a760e01b6001600160e01b03198316145b92915050565b610247654e4f5441525960d01b336103d3565b61026c5760405162461bcd60e51b81526004016102639061095b565b60405180910390fd5b60005b818110156102b8576102a683838381811061028c5761028c610992565b90506020020160208101906102a19190610940565b6104b1565b806102b0816109be565b91505061026f565b505050565b6000828152602081905260409020600101546102d881610514565b6102b8838361051e565b6001600160a01b03811633146103525760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610263565b61035c82826105a2565b5050565b610373654e4f5441525960d01b336103d3565b61038f5760405162461bcd60e51b81526004016102639061095b565b61039881610607565b50565b6103ae654e4f5441525960d01b336103d3565b6103ca5760405162461bcd60e51b81526004016102639061095b565b610398816104b1565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b61040f654e4f5441525960d01b336103d3565b61042b5760405162461bcd60e51b81526004016102639061095b565b60005b818110156102b85761046583838381811061044b5761044b610992565b90506020020160208101906104609190610940565b610607565b8061046f816109be565b91505061042e565b60008281526020819052604090206001015461049281610514565b6102b883836105a2565b600061022e654e4f5441525960d01b836103d3565b6001546040516374a8f10360e01b81526001600160a01b038381166004830152909116906374a8f103906024015b600060405180830381600087803b1580156104f957600080fd5b505af115801561050d573d6000803e3d6000fd5b5050505050565b6103988133610639565b61052882826103d3565b61035c576000828152602081815260408083206001600160a01b03851684529091529020805460ff1916600117905561055e3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6105ac82826103d3565b1561035c576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6001546040516371e928af60e01b81526001600160a01b038381166004830152909116906371e928af906024016104df565b61064382826103d3565b61035c5761065b816001600160a01b0316601461069d565b61066683602061069d565b604051602001610677929190610a07565b60408051601f198184030181529082905262461bcd60e51b825261026391600401610a7c565b606060006106ac836002610aaf565b6106b7906002610ace565b67ffffffffffffffff8111156106cf576106cf610ae6565b6040519080825280601f01601f1916602001820160405280156106f9576020820181803683370190505b509050600360fc1b8160008151811061071457610714610992565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061074357610743610992565b60200101906001600160f81b031916908160001a9053506000610767846002610aaf565b610772906001610ace565b90505b60018111156107ea576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106107a6576107a6610992565b1a60f81b8282815181106107bc576107bc610992565b60200101906001600160f81b031916908160001a90535060049490941c936107e381610afc565b9050610775565b5083156108395760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610263565b9392505050565b60006020828403121561085257600080fd5b81356001600160e01b03198116811461083957600080fd5b6000806020838503121561087d57600080fd5b823567ffffffffffffffff8082111561089557600080fd5b818501915085601f8301126108a957600080fd5b8135818111156108b857600080fd5b8660208260051b85010111156108cd57600080fd5b60209290920196919550909350505050565b6000602082840312156108f157600080fd5b5035919050565b80356001600160a01b038116811461090f57600080fd5b919050565b6000806040838503121561092757600080fd5b82359150610937602084016108f8565b90509250929050565b60006020828403121561095257600080fd5b610839826108f8565b6020808252601a908201527f4e6f746172793a756e617574686f72697a65642d616363657373000000000000604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016109d0576109d06109a8565b5060010190565b60005b838110156109f25781810151838201526020016109da565b83811115610a01576000848401525b50505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351610a3f8160178501602088016109d7565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351610a708160288401602088016109d7565b01602801949350505050565b6020815260008251806020840152610a9b8160408501602087016109d7565b601f01601f19169190910160400192915050565b6000816000190483118215151615610ac957610ac96109a8565b500290565b60008219821115610ae157610ae16109a8565b500190565b634e487b7160e01b600052604160045260246000fd5b600081610b0b57610b0b6109a8565b50600019019056fea26469706673582212207c0666516835dba459122e4dea5ca25cb814a6e7770fed9f74b354c538d4f86764736f6c634300080f0033a26469706673582212206a828edaa638a2474057bb95151658b8f53e0dc3a55164ee16d269c65404cac864736f6c634300080f0033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000ab5760003560e01c80639e2122ba116200006e5780639e2122ba146200013e578063a4ac4aec1462000147578063aaf34b941462000160578063d5a2a5dd146200013e578063e0f9ba96146200016a57600080fd5b8063335fc3b414620000b0578063488558b214620000e4578063510c7b2f14620000fb57806362386c7b146200010e5780638ff190801462000125575b600080fd5b620000c7620000c13660046200064c565b62000174565b6040516001600160a01b0390911681526020015b60405180910390f35b620000c7620000f5366004620006f8565b6200020e565b6003545b604051908152602001620000db565b620000c76200011f3660046200076d565b620002a7565b6200013c62000136366004620007c6565b6200033b565b005b600254620000ff565b62000151620003e3565b604051620000db9190620008ae565b6200015162000447565b62000151620004a9565b60008086868686866040516200018a906200050b565b6200019a95949392919062000998565b604051809103906000f080158015620001b7573d6000803e3d6000fd5b50600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0319166001600160a01b038316179055979650505050505050565b6000808686868686604051620002249062000519565b62000234959493929190620009f3565b604051809103906000f08015801562000251573d6000803e3d6000fd5b506001805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b0319166001600160a01b038316179055979650505050505050565b600080848484604051620002bb9062000527565b620002c99392919062000a44565b604051809103906000f080158015620002e6573d6000803e3d6000fd5b50600380546001810182556000919091527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0180546001600160a01b0319166001600160a01b03831617905595945050505050565b6000805462000357906001600160a01b0316888886866200020e565b905062000368858583868662000174565b50600062000378828585620002a7565b6040516351ca507360e11b81526001600160a01b0380831660048301529192509083169063a394a0e690602401600060405180830381600087803b158015620003c057600080fd5b505af1158015620003d5573d6000803e3d6000fd5b505050505050505050505050565b606060018054806020026020016040519081016040528092919081815260200182805480156200043d57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116200041e575b5050505050905090565b606060038054806020026020016040519081016040528092919081815260200182805480156200043d576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116200041e575050505050905090565b606060028054806020026020016040519081016040528092919081815260200182805480156200043d576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116200041e575050505050905090565b611fc78062000a7583390190565b61258c8062002a3c83390190565b610eaa8062004fc883390190565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200055d57600080fd5b813567ffffffffffffffff808211156200057b576200057b62000535565b604051601f8301601f19908116603f01168101908282118183101715620005a657620005a662000535565b81604052838152866020858801011115620005c057600080fd5b836020870160208301376000602085830101528094505050505092915050565b80356001600160a01b0381168114620005f857600080fd5b919050565b60008083601f8401126200061057600080fd5b50813567ffffffffffffffff8111156200062957600080fd5b6020830191508360208260051b85010111156200064557600080fd5b9250929050565b6000806000806000608086880312156200066557600080fd5b853567ffffffffffffffff808211156200067e57600080fd5b6200068c89838a016200054b565b96506020880135915080821115620006a357600080fd5b620006b189838a016200054b565b9550620006c160408901620005e0565b94506060880135915080821115620006d857600080fd5b50620006e788828901620005fd565b969995985093965092949392505050565b6000806000806000608086880312156200071157600080fd5b6200071c86620005e0565b9450602086013567ffffffffffffffff808211156200073a57600080fd5b6200074889838a016200054b565b955060408801359150808211156200075f57600080fd5b620006c189838a016200054b565b6000806000604084860312156200078357600080fd5b6200078e84620005e0565b9250602084013567ffffffffffffffff811115620007ab57600080fd5b620007b986828701620005fd565b9497909650939450505050565b60008060008060008060a08789031215620007e057600080fd5b863567ffffffffffffffff80821115620007f957600080fd5b620008078a838b016200054b565b975060208901359150808211156200081e57600080fd5b6200082c8a838b016200054b565b965060408901359150808211156200084357600080fd5b620008518a838b016200054b565b955060608901359150808211156200086857600080fd5b620008768a838b016200054b565b945060808901359150808211156200088d57600080fd5b506200089c89828a01620005fd565b979a9699509497509295939492505050565b6020808252825182820181905260009190848201906040850190845b81811015620008f15783516001600160a01b031683529284019291840191600101620008ca565b50909695505050505050565b6000815180845260005b81811015620009255760208185018101518683018201520162000907565b8181111562000938576000602083870101525b50601f01601f19169290920160200192915050565b8183526000602080850194508260005b858110156200098d576001600160a01b036200097983620005e0565b16875295820195908201906001016200095d565b509495945050505050565b608081526000620009ad6080830188620008fd565b8281036020840152620009c18188620008fd565b6001600160a01b038716604085015283810360608501529050620009e78185876200094d565b98975050505050505050565b6001600160a01b038616815260806020820181905260009062000a1990830187620008fd565b828103604084015262000a2d8187620008fd565b90508281036060840152620009e78185876200094d565b6001600160a01b038416815260406020820181905260009062000a6b90830184866200094d565b9594505050505056fe60806040523480156200001157600080fd5b5060405162001fc738038062001fc7833981016040819052620000349162000505565b6002620000428582620006aa565b506003620000518482620006aa565b50600580546001600160a01b0319166001600160a01b03841617905560066020527f5beac58aad0c637879eba9673a3539c90e0177d6d0b5496bd46b465d769e6341805460ff1990811660019081179092557f609910be899f2b1215d939c765c51150bb77ff3c25e65539c171a28601363a53805482168317905560008080527f54cdd369e4e8a8515e52ca72ec816c2101831ad1f18bf44102ed171459c9b4f8805490921690921790555b8151811015620001745762000142662327aaa72222a960c91b60001b8383815181106200012e576200012e62000776565b60200260200101516200019660201b60201c565b6200015f6000801b8383815181106200012e576200012e62000776565b806200016b816200078c565b915050620000fd565b506200018c662327aaa72222a960c91b6000620001a6565b50505050620007df565b620001a28282620001f1565b5050565b600082815260208190526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b6200020882826200023460201b62000d611760201c565b60008281526001602090815260409091206200022f91839062000de5620002bc821b17901c565b505050565b620002408282620002dc565b620001a2576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620002783390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000620002d3836001600160a01b0384166200038f565b90505b92915050565b60008281526006602052604081205460ff16158062000369575060055460405163f3caad0360e01b81526001600160a01b0384811660048301529091169063f3caad0390602401602060405180830381865afa15801562000341573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003679190620007b4565b155b156200037857506000620002d6565b620002d38383620003e160201b62000dfa1760201c565b6000818152600183016020526040812054620003d857508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155620002d6565b506000620002d6565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156200044b576200044b6200040a565b604052919050565b600082601f8301126200046557600080fd5b81516001600160401b038111156200048157620004816200040a565b602062000497601f8301601f1916820162000420565b8281528582848701011115620004ac57600080fd5b60005b83811015620004cc578581018301518282018401528201620004af565b83811115620004de5760008385840101525b5095945050505050565b80516001600160a01b03811681146200050057600080fd5b919050565b600080600080608085870312156200051c57600080fd5b84516001600160401b03808211156200053457600080fd5b620005428883890162000453565b95506020915081870151818111156200055a57600080fd5b6200056889828a0162000453565b9550506200057960408801620004e8565b93506060870151818111156200058e57600080fd5b8701601f81018913620005a057600080fd5b805182811115620005b557620005b56200040a565b8060051b9250620005c884840162000420565b818152928201840192848101908b851115620005e357600080fd5b928501925b848410156200060c57620005fc84620004e8565b82529285019290850190620005e8565b989b979a50959850505050505050565b600181811c908216806200063157607f821691505b6020821081036200065257634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200022f57600081815260208120601f850160051c81016020861015620006815750805b601f850160051c820191505b81811015620006a2578281556001016200068d565b505050505050565b81516001600160401b03811115620006c657620006c66200040a565b620006de81620006d784546200061c565b8462000658565b602080601f831160018114620007165760008415620006fd5750858301515b600019600386901b1c1916600185901b178555620006a2565b600085815260208120601f198616915b82811015620007475788860151825594840194600190910190840162000726565b5085821015620007665787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052603260045260246000fd5b600060018201620007ad57634e487b7160e01b600052601160045260246000fd5b5060010190565b600060208284031215620007c757600080fd5b81518015158114620007d857600080fd5b9392505050565b6117d880620007ef6000396000f3fe608060405234801561001057600080fd5b50600436106101735760003560e01c806395d89b41116100de578063d547741f11610097578063e6b92bbc11610071578063e6b92bbc14610354578063e6fcc84b14610365578063eb7f494d1461036d578063ffa629a31461038057600080fd5b8063d547741f1461031b578063dee1f0e41461032e578063e39d127a1461034157600080fd5b806395d89b41146102bf578063a217fddf146102c7578063b84c8246146102cf578063c47f0027146102e2578063c7b57841146102f5578063ca15c8731461030857600080fd5b806336568abe1161013057806336568abe14610231578063392f37e9146102445780637c4a13b11461025b578063870725221461026e5780639010d07c1461028157806391d14854146102ac57600080fd5b806301ffc9a71461017857806306fdde03146101a05780631e4e0091146101b5578063248a9ca3146101ca5780632da74d8c146101fb5780632f2ff15d1461021e575b600080fd5b61018b6101863660046112f0565b610393565b60405190151581526020015b60405180910390f35b6101a86103be565b6040516101979190611372565b6101c86101c3366004611385565b610450565b005b6101ed6101d83660046113a7565b60009081526020819052604090206001015490565b604051908152602001610197565b61018b6102093660046113a7565b60009081526006602052604090205460ff1690565b6101c861022c3660046113dc565b6104ad565b6101c861023f3660046113dc565b61057d565b61024c6105fb565b60405161019793929190611408565b6101c86102693660046113a7565b6107b5565b6101c861027c366004611385565b610878565b61029461028f366004611385565b610939565b6040516001600160a01b039091168152602001610197565b61018b6102ba3660046113dc565b610958565b6101a86109f8565b6101ed600081565b6101c86102dd36600461144b565b610a07565b6101c86102f036600461144b565b610a59565b61018b6103033660046114bd565b610aab565b6101ed6103163660046113a7565b610ac1565b6101c86103293660046113dc565b610ad8565b61018b61033c3660046114bd565b610be6565b6101c861034f36600461144b565b610bff565b6005546001600160a01b0316610294565b6101a8610c51565b6101c861037b3660046113a7565b610c60565b6101c861038e3660046114bd565b610cf9565b60006001600160e01b03198216635a05180f60e01b14806103b857506103b882610e23565b92915050565b6060600280546103cd906114d8565b80601f01602080910402602001604051908101604052809291908181526020018280546103f9906114d8565b80156104465780601f1061041b57610100808354040283529160200191610446565b820191906000526020600020905b81548152906001019060200180831161042957829003601f168201915b5050505050905090565b3361046869474f5645524e414e434560b01b82610958565b806104795750610479600082610958565b61049e5760405162461bcd60e51b815260040161049590611512565b60405180910390fd5b6104a88383610e58565b505050565b600082815260208190526040902060010154829033906104ce905b82610958565b806104eb57506104eb69474f5645524e414e434560b01b82610958565b806104fc57506104fc600082610958565b6105185760405162461bcd60e51b815260040161049590611512565b60008481526006602052604090205460ff1661056d5760405162461bcd60e51b81526020600482015260146024820152734e6174696f6e3a696e6163746976652d726f6c6560601b6044820152606401610495565b6105778484610ea3565b50505050565b6001600160a01b03811633146105ed5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610495565b6105f78282610ec5565b5050565b6060806060600260036004828054610612906114d8565b80601f016020809104026020016040519081016040528092919081815260200182805461063e906114d8565b801561068b5780601f106106605761010080835404028352916020019161068b565b820191906000526020600020905b81548152906001019060200180831161066e57829003601f168201915b5050505050925081805461069e906114d8565b80601f01602080910402602001604051908101604052809291908181526020018280546106ca906114d8565b80156107175780601f106106ec57610100808354040283529160200191610717565b820191906000526020600020905b8154815290600101906020018083116106fa57829003601f168201915b5050505050915080805461072a906114d8565b80601f0160208091040260200160405190810160405280929190818152602001828054610756906114d8565b80156107a35780601f10610778576101008083540402835291602001916107a3565b820191906000526020600020905b81548152906001019060200180831161078657829003601f168201915b50505050509050925092509250909192565b336107cd69474f5645524e414e434560b01b82610958565b806107de57506107de600082610958565b6107fa5760405162461bcd60e51b815260040161049590611512565b60008281526006602052604090205460ff1615156001146108545760405162461bcd60e51b815260206004820152601460248201527313985d1a5bdb8e9c9bdb194b591a5cd8589b195960621b6044820152606401610495565b61085f826000610e58565b506000908152600660205260409020805460ff19169055565b3361089069474f5645524e414e434560b01b82610958565b806108a157506108a1600082610958565b6108bd5760405162461bcd60e51b815260040161049590611512565b60008381526006602052604090205460ff16156109125760405162461bcd60e51b815260206004820152601360248201527213985d1a5bdb8e9c9bdb194b595b98589b1959606a1b6044820152606401610495565b61091c8383610e58565b50506000908152600660205260409020805460ff19166001179055565b60008281526001602052604081206109519083610ee7565b9392505050565b60008281526006602052604081205460ff1615806109e1575060055460405163f3caad0360e01b81526001600160a01b0384811660048301529091169063f3caad0390602401602060405180830381865afa1580156109bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109df919061153f565b155b156109ee575060006103b8565b6109518383610dfa565b6060600380546103cd906114d8565b33610a1f69474f5645524e414e434560b01b82610958565b80610a305750610a30600082610958565b610a4c5760405162461bcd60e51b815260040161049590611512565b60036105778385836115c5565b33610a7169474f5645524e414e434560b01b82610958565b80610a825750610a82600082610958565b610a9e5760405162461bcd60e51b815260040161049590611512565b60026105778385836115c5565b60006103b8662327aaa72222a960c91b83610958565b60008181526001602052604081206103b890610ef3565b60008281526020819052604090206001015482903390610af7906104c8565b80610b145750610b1469474f5645524e414e434560b01b82610958565b80610b255750610b25600082610958565b610b415760405162461bcd60e51b815260040161049590611512565b83610b875760405162461bcd60e51b815260206004820152601660248201527513985d1a5bdb8e9a5b9d985b1a590b5c995c5d595cdd60521b6044820152606401610495565b60008481526006602052604090205460ff16610bdc5760405162461bcd60e51b81526020600482015260146024820152734e6174696f6e3a696e6163746976652d726f6c6560601b6044820152606401610495565b6105778484610ec5565b60006103b869474f5645524e414e434560b01b83610958565b33610c1769474f5645524e414e434560b01b82610958565b80610c285750610c28600082610958565b610c445760405162461bcd60e51b815260040161049590611512565b60046105778385836115c5565b6060600480546103cd906114d8565b662327aaa72222a960c91b610c7481610efd565b60008281526006602052604090205460ff1615610cc95760405162461bcd60e51b815260206004820152601360248201527213985d1a5bdb8e9c9bdb194b595b98589b1959606a1b6044820152606401610495565b610cdd82662327aaa72222a960c91b610e58565b506000908152600660205260409020805460ff19166001179055565b33610d1169474f5645524e414e434560b01b82610958565b80610d225750610d22600082610958565b610d3e5760405162461bcd60e51b815260040161049590611512565b50600580546001600160a01b0319166001600160a01b0392909216919091179055565b610d6b8282610958565b6105f7576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055610da13390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000610951836001600160a01b038416610f0a565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b60006001600160e01b03198216637965db0b60e01b14806103b857506301ffc9a760e01b6001600160e01b03198316146103b8565b600082815260208190526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b610ead8282610d61565b60008281526001602052604090206104a89082610de5565b610ecf8282610f59565b60008281526001602052604090206104a89082610fbe565b60006109518383610fd3565b60006103b8825490565b610f078133610ffd565b50565b6000818152600183016020526040812054610f51575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556103b8565b5060006103b8565b610f638282610958565b156105f7576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000610951836001600160a01b038416611061565b6000826000018281548110610fea57610fea611686565b9060005260206000200154905092915050565b6110078282610958565b6105f75761101f816001600160a01b03166014611154565b61102a836020611154565b60405160200161103b92919061169c565b60408051601f198184030181529082905262461bcd60e51b825261049591600401611372565b6000818152600183016020526040812054801561114a576000611085600183611727565b855490915060009061109990600190611727565b90508181146110fe5760008660000182815481106110b9576110b9611686565b90600052602060002001549050808760000184815481106110dc576110dc611686565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061110f5761110f61173e565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506103b8565b60009150506103b8565b60606000611163836002611754565b61116e906002611773565b67ffffffffffffffff81111561118657611186611561565b6040519080825280601f01601f1916602001820160405280156111b0576020820181803683370190505b509050600360fc1b816000815181106111cb576111cb611686565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106111fa576111fa611686565b60200101906001600160f81b031916908160001a905350600061121e846002611754565b611229906001611773565b90505b60018111156112a1576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061125d5761125d611686565b1a60f81b82828151811061127357611273611686565b60200101906001600160f81b031916908160001a90535060049490941c9361129a8161178b565b905061122c565b5083156109515760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610495565b60006020828403121561130257600080fd5b81356001600160e01b03198116811461095157600080fd5b60005b8381101561133557818101518382015260200161131d565b838111156105775750506000910152565b6000815180845261135e81602086016020860161131a565b601f01601f19169290920160200192915050565b6020815260006109516020830184611346565b6000806040838503121561139857600080fd5b50508035926020909101359150565b6000602082840312156113b957600080fd5b5035919050565b80356001600160a01b03811681146113d757600080fd5b919050565b600080604083850312156113ef57600080fd5b823591506113ff602084016113c0565b90509250929050565b60608152600061141b6060830186611346565b828103602084015261142d8186611346565b905082810360408401526114418185611346565b9695505050505050565b6000806020838503121561145e57600080fd5b823567ffffffffffffffff8082111561147657600080fd5b818501915085601f83011261148a57600080fd5b81358181111561149957600080fd5b8660208285010111156114ab57600080fd5b60209290920196919550909350505050565b6000602082840312156114cf57600080fd5b610951826113c0565b600181811c908216806114ec57607f821691505b60208210810361150c57634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526013908201527213985d1a5bdb8e9d5b985d5d1a1bdc9a5e9959606a1b604082015260600190565b60006020828403121561155157600080fd5b8151801515811461095157600080fd5b634e487b7160e01b600052604160045260246000fd5b601f8211156104a857600081815260208120601f850160051c8101602086101561159e5750805b601f850160051c820191505b818110156115bd578281556001016115aa565b505050505050565b67ffffffffffffffff8311156115dd576115dd611561565b6115f1836115eb83546114d8565b83611577565b6000601f841160018114611625576000851561160d5750838201355b600019600387901b1c1916600186901b17835561167f565b600083815260209020601f19861690835b828110156116565786850135825560209485019460019092019101611636565b50868210156116735760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b634e487b7160e01b600052603260045260246000fd5b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516116d481601785016020880161131a565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161170581602884016020880161131a565b01602801949350505050565b634e487b7160e01b600052601160045260246000fd5b60008282101561173957611739611711565b500390565b634e487b7160e01b600052603160045260246000fd5b600081600019048311821515161561176e5761176e611711565b500290565b6000821982111561178657611786611711565b500190565b60008161179a5761179a611711565b50600019019056fea2646970667358221220a41bf02dda386a73dc764e0099e7751d03e6a1a0e44c9ee35a4f95c726f77d9764736f6c634300080f003360806040523480156200001157600080fd5b506040516200258c3803806200258c83398101604081905262000034916200043b565b82826000620000448382620005e6565b506001620000538282620005e6565b505050620000706200006a620000e760201b60201c565b620000eb565b600880546001600160a01b0319166001600160a01b03861617905560005b8151811015620000dc57620000c7828281518110620000b157620000b1620006b2565b602002602001015160006200013d60201b60201c565b80620000d381620006de565b9150506200008e565b505050505062000715565b3390565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60078054600091826200015083620006de565b909155506001600160a01b038481166000908152600c6020908152604080832080546001600160a01b03191694881694909417909355600b90522081905590506200019c8382620001ef565b816001600160a01b0316836001600160a01b03167f7533f62ec6601bf9c87f8d96bf756b4b495e2a0e26ec9284e4927926ed6b3afd83604051620001e291815260200190565b60405180910390a3505050565b6001600160a01b0382166200024b5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064015b60405180910390fd5b6000818152600260205260409020546001600160a01b031615620002b25760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640162000242565b6001600160a01b0382166000908152600360205260408120805460019290620002dd908490620006fa565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b505050565b80516001600160a01b03811681146200035857600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156200039e576200039e6200035d565b604052919050565b600082601f830112620003b857600080fd5b81516001600160401b03811115620003d457620003d46200035d565b6020620003ea601f8301601f1916820162000373565b8281528582848701011115620003ff57600080fd5b60005b838110156200041f57858101830151828201840152820162000402565b83811115620004315760008385840101525b5095945050505050565b600080600080608085870312156200045257600080fd5b6200045d8562000340565b602086810151919550906001600160401b03808211156200047d57600080fd5b6200048b89838a01620003a6565b95506040880151915080821115620004a257600080fd5b620004b089838a01620003a6565b94506060880151915080821115620004c757600080fd5b818801915088601f830112620004dc57600080fd5b815181811115620004f157620004f16200035d565b8060051b91506200050484830162000373565b818152918301840191848101908b8411156200051f57600080fd5b938501935b838510156200054857620005388562000340565b8252938501939085019062000524565b989b979a50959850505050505050565b600181811c908216806200056d57607f821691505b6020821081036200058e57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200033b57600081815260208120601f850160051c81016020861015620005bd5750805b601f850160051c820191505b81811015620005de57828155600101620005c9565b505050505050565b81516001600160401b038111156200060257620006026200035d565b6200061a8162000613845462000558565b8462000594565b602080601f831160018114620006525760008415620006395750858301515b600019600386901b1c1916600185901b178555620005de565b600085815260208120601f198616915b82811015620006835788860151825594840194600190910190840162000662565b5085821015620006a25787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201620006f357620006f3620006c8565b5060010190565b60008219821115620007105762000710620006c8565b500190565b611e6780620007256000396000f3fe608060405234801561001057600080fd5b50600436106101e55760003560e01c806374a8f1031161010f578063b88d4fde116100a2578063f2fde38b11610071578063f2fde38b1461044e578063f3caad0314610461578063f3cb838514610474578063f5be31931461048757600080fd5b8063b88d4fde146103db578063b91808b1146103ee578063c87b56dd146103ff578063e985e9c51461041257600080fd5b80639d6abe4f116100de5780639d6abe4f14610378578063a22cb465146103a4578063a394a0e6146103b7578063a9dc491d146103ca57600080fd5b806374a8f1031461033b5780637a5b4f591461034e5780638da5cb5b1461035f57806395d89b411461037057600080fd5b80634e543b261161018757806370a082311161015657806370a08231146102fa578063715018a61461030d57806371e928af1461031557806373ac86671461032857600080fd5b80634e543b26146102a05780636352211e146102b357806365f68c89146102c65780636b8ab97d146102e757600080fd5b8063095ea7b3116101c3578063095ea7b31461025257806323b872dd146102675780632d3e579a1461027a57806342842e0e1461028d57600080fd5b806301ffc9a7146101ea57806306fdde0314610212578063081812fc14610227575b600080fd5b6101fd6101f83660046118ff565b61048f565b60405190151581526020015b60405180910390f35b61021a6104a0565b6040516102099190611974565b61023a610235366004611987565b610532565b6040516001600160a01b039091168152602001610209565b6102656102603660046119bc565b610559565b005b6102656102753660046119e6565b610673565b6101fd610288366004611a22565b6106bb565b61026561029b3660046119e6565b610738565b6102656102ae366004611a5e565b610753565b61023a6102c1366004611987565b6107b0565b6102d96102d4366004611a5e565b610810565b604051908152602001610209565b6102656102f5366004611a5e565b610883565b6102d9610308366004611a5e565b6109d8565b610265610a5e565b610265610323366004611a5e565b610a72565b610265610336366004611a87565b610bb5565b610265610349366004611a5e565b610bdb565b6008546001600160a01b031661023a565b6006546001600160a01b031661023a565b61021a610cc9565b61023a610386366004611a5e565b6001600160a01b039081166000908152600c60205260409020541690565b6102656103b2366004611aa4565b610cd8565b6102656103c5366004611a5e565b610ce3565b600a546001600160a01b031661023a565b6102656103e9366004611b4a565b610d39565b6009546001600160a01b031661023a565b61021a61040d366004611987565b610db8565b6101fd610420366004611bf5565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b61026561045c366004611a5e565b610f05565b6101fd61046f366004611a5e565b610f7e565b610265610482366004611a5e565b610f9f565b6007546102d9565b600061049a82610ff5565b92915050565b6060600080546104af90611c28565b80601f01602080910402602001604051908101604052809291908181526020018280546104db90611c28565b80156105285780601f106104fd57610100808354040283529160200191610528565b820191906000526020600020905b81548152906001019060200180831161050b57829003601f168201915b5050505050905090565b600061053d82611045565b506000908152600460205260409020546001600160a01b031690565b6000610564826107b0565b9050806001600160a01b0316836001600160a01b0316036105d65760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b03821614806105f257506105f28133610420565b6106645760405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c000060648201526084016105cd565b61066e83836110a4565b505050565b60405162461bcd60e51b815260206004820152601760248201527f436974697a656e416c7068613a20536f756c626f756e6400000000000000000060448201526064016105cd565b604051632474521560e21b8152600481018390526001600160a01b038281166024830152600091908516906391d1485490604401602060405180830381865afa15801561070c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107309190611c5c565b949350505050565b61066e83838360405180602001604052806000815250610d39565b61075b611112565b600a80546001600160a01b0319166001600160a01b0383169081179091556040519081527f40bf5fe825856ca00c4ac7cef649810e96d3c7cc944ec920e80190d26d10f5af906020015b60405180910390a150565b6000818152600260205260408120546001600160a01b03168061049a5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016105cd565b600061081b82610f7e565b6108675760405162461bcd60e51b815260206004820152601f60248201527f436974697a656e416c7068613a6e6f742d6163746976652d636974697a656e0060448201526064016105cd565b506001600160a01b03166000908152600b602052604090205490565b6009546001600160a01b031663f13eed97336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156108d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108fd9190611c5c565b6109195760405162461bcd60e51b81526004016105cd90611c79565b61092281610f7e565b156109695760405162461bcd60e51b815260206004820152601760248201527621b4ba34bd32b720b63834309d34b996b1b4ba34bd32b760491b60448201526064016105cd565b6109728161116c565b6109be5760405162461bcd60e51b815260206004820152601a60248201527f436974697a656e416c7068613a6e657665722d636974697a656e00000000000060448201526064016105cd565b6001600160a01b03166000908152600b6020526040812055565b60006001600160a01b038216610a425760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b60648201526084016105cd565b506001600160a01b031660009081526003602052604090205490565b610a66611112565b610a706000611192565b565b60003360095460405163f13eed9760e01b81526001600160a01b03808416600483015292935091169063f13eed9790602401602060405180830381865afa158015610ac1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae59190611c5c565b610b015760405162461bcd60e51b81526004016105cd90611c79565b610b0a82610f7e565b15610b515760405162461bcd60e51b815260206004820152601760248201527621b4ba34bd32b720b63834309d34b996b1b4ba34bd32b760491b60448201526064016105cd565b610b5a8261116c565b15610ba75760405162461bcd60e51b815260206004820181905260248201527f436974697a656e416c7068613a7265766f6b65642d636974697a656e7368697060448201526064016105cd565b610bb182826111e4565b5050565b610bbd611112565b600a8054911515600160a01b0260ff60a01b19909216919091179055565b60003360095460405163f13eed9760e01b81526001600160a01b03808416600483015292935091169063f13eed9790602401602060405180830381865afa158015610c2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4e9190611c5c565b610c6a5760405162461bcd60e51b81526004016105cd90611c79565b610c7382610f7e565b610cbf5760405162461bcd60e51b815260206004820152601860248201527f436974697a656e416c7068613a6e6f742d636974697a656e000000000000000060448201526064016105cd565b610bb18282611291565b6060600180546104af90611c28565b610bb13383836112f8565b610ceb611112565b600980546001600160a01b0319166001600160a01b0383169081179091556040519081527fe2bea979965a228cbde9e65befc96655827ad8934c3c6b9f8b9b66e1f907ef88906020016107a5565b610d4333836113be565b610da65760405162461bcd60e51b815260206004820152602e60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201526d1c881b9bdc88185c1c1c9bdd995960921b60648201526084016105cd565b610db28484848461143c565b50505050565b600854600a546060916001600160a01b031690600160a01b900460ff16610e4e5760405163c87b56dd60e01b8152600481018490526001600160a01b0382169063c87b56dd906024015b600060405180830381865afa158015610e1f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e479190810190611cb0565b9392505050565b600a546001600160a01b03163314610ed25760405163c87b56dd60e01b8152600481018490526001600160a01b0382169063c87b56dd90602401600060405180830381865afa158015610ea5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ecd9190810190611cb0565b610e47565b604051630c5bbf5960e01b8152600481018490526001600160a01b03821690630c5bbf5990602401610e02565b50919050565b610f0d611112565b6001600160a01b038116610f725760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105cd565b610f7b81611192565b50565b6000610f89826109d8565b600114610f9757600061049a565b600192915050565b610fa7611112565b600880546001600160a01b0319166001600160a01b0383169081179091556040519081527fc3cc2ca4478213568729272d27f2d5f5a1e0ffd0155e3ad804cc7d679a94672b906020016107a5565b60006001600160e01b031982166380ac58cd60e01b148061102657506001600160e01b03198216635b5e139f60e01b145b8061049a57506301ffc9a760e01b6001600160e01b031983161461049a565b6000818152600260205260409020546001600160a01b0316610f7b5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016105cd565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906110d9826107b0565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6006546001600160a01b03163314610a705760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105cd565b6001600160a01b0381166000908152600b60205260408120548103610f9757600061049a565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60078054600091826111f583611d3d565b909155506001600160a01b038481166000908152600c6020908152604080832080546001600160a01b03191694881694909417909355600b905220819055905061123f838261146f565b816001600160a01b0316836001600160a01b03167f7533f62ec6601bf9c87f8d96bf756b4b495e2a0e26ec9284e4927926ed6b3afd8360405161128491815260200190565b60405180910390a3505050565b6001600160a01b0382166000908152600b60205260409020546112b3816115b1565b816001600160a01b0316836001600160a01b03167fa96db3edccc72000dff77fc380cfbabe1646529eadd835eb11f2f8315669ec768360405161128491815260200190565b816001600160a01b0316836001600160a01b0316036113595760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016105cd565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c319101611284565b6000806113ca836107b0565b9050806001600160a01b0316846001600160a01b0316148061141157506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b806107305750836001600160a01b031661142a84610532565b6001600160a01b031614949350505050565b61144784848461164c565b611453848484846117e8565b610db25760405162461bcd60e51b81526004016105cd90611d56565b6001600160a01b0382166114c55760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016105cd565b6000818152600260205260409020546001600160a01b03161561152a5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016105cd565b6001600160a01b0382166000908152600360205260408120805460019290611553908490611da8565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60006115bc826107b0565b90506115c96000836110a4565b6001600160a01b03811660009081526003602052604081208054600192906115f2908490611dc0565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b826001600160a01b031661165f826107b0565b6001600160a01b0316146116c35760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b60648201526084016105cd565b6001600160a01b0382166117255760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016105cd565b6117306000826110a4565b6001600160a01b0383166000908152600360205260408120805460019290611759908490611dc0565b90915550506001600160a01b0382166000908152600360205260408120805460019290611787908490611da8565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b60006001600160a01b0384163b156118de57604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061182c903390899088908890600401611dd7565b6020604051808303816000875af1925050508015611867575060408051601f3d908101601f1916820190925261186491810190611e14565b60015b6118c4573d808015611895576040519150601f19603f3d011682016040523d82523d6000602084013e61189a565b606091505b5080516000036118bc5760405162461bcd60e51b81526004016105cd90611d56565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610730565b506001949350505050565b6001600160e01b031981168114610f7b57600080fd5b60006020828403121561191157600080fd5b8135610e47816118e9565b60005b8381101561193757818101518382015260200161191f565b83811115610db25750506000910152565b6000815180845261196081602086016020860161191c565b601f01601f19169290920160200192915050565b602081526000610e476020830184611948565b60006020828403121561199957600080fd5b5035919050565b80356001600160a01b03811681146119b757600080fd5b919050565b600080604083850312156119cf57600080fd5b6119d8836119a0565b946020939093013593505050565b6000806000606084860312156119fb57600080fd5b611a04846119a0565b9250611a12602085016119a0565b9150604084013590509250925092565b600080600060608486031215611a3757600080fd5b611a40846119a0565b925060208401359150611a55604085016119a0565b90509250925092565b600060208284031215611a7057600080fd5b610e47826119a0565b8015158114610f7b57600080fd5b600060208284031215611a9957600080fd5b8135610e4781611a79565b60008060408385031215611ab757600080fd5b611ac0836119a0565b91506020830135611ad081611a79565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611b1a57611b1a611adb565b604052919050565b600067ffffffffffffffff821115611b3c57611b3c611adb565b50601f01601f191660200190565b60008060008060808587031215611b6057600080fd5b611b69856119a0565b9350611b77602086016119a0565b925060408501359150606085013567ffffffffffffffff811115611b9a57600080fd5b8501601f81018713611bab57600080fd5b8035611bbe611bb982611b22565b611af1565b818152886020838501011115611bd357600080fd5b8160208401602083013760006020838301015280935050505092959194509250565b60008060408385031215611c0857600080fd5b611c11836119a0565b9150611c1f602084016119a0565b90509250929050565b600181811c90821680611c3c57607f821691505b602082108103610eff57634e487b7160e01b600052602260045260246000fd5b600060208284031215611c6e57600080fd5b8151610e4781611a79565b60208082526017908201527f436974697a656e416c7068613a6e6f742d6e6f74617279000000000000000000604082015260600190565b600060208284031215611cc257600080fd5b815167ffffffffffffffff811115611cd957600080fd5b8201601f81018413611cea57600080fd5b8051611cf8611bb982611b22565b818152856020838501011115611d0d57600080fd5b611d1e82602083016020860161191c565b95945050505050565b634e487b7160e01b600052601160045260246000fd5b600060018201611d4f57611d4f611d27565b5060010190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60008219821115611dbb57611dbb611d27565b500190565b600082821015611dd257611dd2611d27565b500390565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611e0a90830184611948565b9695505050505050565b600060208284031215611e2657600080fd5b8151610e47816118e956fea26469706673582212203976cc954d66cf31d22d4c74c1dba03bd12588ab8abd89e2d816950687dfff6e64736f6c634300080f003360806040523480156200001157600080fd5b5060405162000eaa38038062000eaa83398101604081905262000034916200022a565b600180546001600160a01b0319166001600160a01b03841617905562000064654e4f5441525960d01b30620000fc565b60005b8151811015620000dd57620000a26000801b8383815181106200008e576200008e62000313565b6020026020010151620000fc60201b60201c565b620000c8654e4f5441525960d01b60001b8383815181106200008e576200008e62000313565b80620000d48162000329565b91505062000067565b50620000f4654e4f5441525960d01b60006200010c565b505062000351565b62000108828262000157565b5050565b600082815260208190526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1662000108576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620001b33390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b80516001600160a01b03811681146200020f57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156200023e57600080fd5b6200024983620001f7565b602084810151919350906001600160401b03808211156200026957600080fd5b818601915086601f8301126200027e57600080fd5b81518181111562000293576200029362000214565b8060051b604051601f19603f83011681018181108582111715620002bb57620002bb62000214565b604052918252848201925083810185019189831115620002da57600080fd5b938501935b828510156200030357620002f385620001f7565b84529385019392850192620002df565b8096505050505050509250929050565b634e487b7160e01b600052603260045260246000fd5b6000600182016200034a57634e487b7160e01b600052601160045260246000fd5b5060010190565b610b4980620003616000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c806374a8f1031161008c578063d389c6a211610066578063d389c6a2146101a9578063d547741f146101bc578063e6b92bbc146101cf578063f13eed97146101ea57600080fd5b806374a8f1031461017b57806391d148541461018e578063a217fddf146101a157600080fd5b806301ffc9a7146100d4578063055e3e5e146100fc578063248a9ca3146101115780632f2ff15d1461014257806336568abe1461015557806371e928af14610168575b600080fd5b6100e76100e2366004610840565b6101fd565b60405190151581526020015b60405180910390f35b61010f61010a36600461086a565b610234565b005b61013461011f3660046108df565b60009081526020819052604090206001015490565b6040519081526020016100f3565b61010f610150366004610914565b6102bd565b61010f610163366004610914565b6102e2565b61010f610176366004610940565b610360565b61010f610189366004610940565b61039b565b6100e761019c366004610914565b6103d3565b610134600081565b61010f6101b736600461086a565b6103fc565b61010f6101ca366004610914565b610477565b6001546040516001600160a01b0390911681526020016100f3565b6100e76101f8366004610940565b61049c565b60006001600160e01b03198216637965db0b60e01b148061022e57506301ffc9a760e01b6001600160e01b03198316145b92915050565b610247654e4f5441525960d01b336103d3565b61026c5760405162461bcd60e51b81526004016102639061095b565b60405180910390fd5b60005b818110156102b8576102a683838381811061028c5761028c610992565b90506020020160208101906102a19190610940565b6104b1565b806102b0816109be565b91505061026f565b505050565b6000828152602081905260409020600101546102d881610514565b6102b8838361051e565b6001600160a01b03811633146103525760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610263565b61035c82826105a2565b5050565b610373654e4f5441525960d01b336103d3565b61038f5760405162461bcd60e51b81526004016102639061095b565b61039881610607565b50565b6103ae654e4f5441525960d01b336103d3565b6103ca5760405162461bcd60e51b81526004016102639061095b565b610398816104b1565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b61040f654e4f5441525960d01b336103d3565b61042b5760405162461bcd60e51b81526004016102639061095b565b60005b818110156102b85761046583838381811061044b5761044b610992565b90506020020160208101906104609190610940565b610607565b8061046f816109be565b91505061042e565b60008281526020819052604090206001015461049281610514565b6102b883836105a2565b600061022e654e4f5441525960d01b836103d3565b6001546040516374a8f10360e01b81526001600160a01b038381166004830152909116906374a8f103906024015b600060405180830381600087803b1580156104f957600080fd5b505af115801561050d573d6000803e3d6000fd5b5050505050565b6103988133610639565b61052882826103d3565b61035c576000828152602081815260408083206001600160a01b03851684529091529020805460ff1916600117905561055e3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6105ac82826103d3565b1561035c576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6001546040516371e928af60e01b81526001600160a01b038381166004830152909116906371e928af906024016104df565b61064382826103d3565b61035c5761065b816001600160a01b0316601461069d565b61066683602061069d565b604051602001610677929190610a07565b60408051601f198184030181529082905262461bcd60e51b825261026391600401610a7c565b606060006106ac836002610aaf565b6106b7906002610ace565b67ffffffffffffffff8111156106cf576106cf610ae6565b6040519080825280601f01601f1916602001820160405280156106f9576020820181803683370190505b509050600360fc1b8160008151811061071457610714610992565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061074357610743610992565b60200101906001600160f81b031916908160001a9053506000610767846002610aaf565b610772906001610ace565b90505b60018111156107ea576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106107a6576107a6610992565b1a60f81b8282815181106107bc576107bc610992565b60200101906001600160f81b031916908160001a90535060049490941c936107e381610afc565b9050610775565b5083156108395760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610263565b9392505050565b60006020828403121561085257600080fd5b81356001600160e01b03198116811461083957600080fd5b6000806020838503121561087d57600080fd5b823567ffffffffffffffff8082111561089557600080fd5b818501915085601f8301126108a957600080fd5b8135818111156108b857600080fd5b8660208260051b85010111156108cd57600080fd5b60209290920196919550909350505050565b6000602082840312156108f157600080fd5b5035919050565b80356001600160a01b038116811461090f57600080fd5b919050565b6000806040838503121561092757600080fd5b82359150610937602084016108f8565b90509250929050565b60006020828403121561095257600080fd5b610839826108f8565b6020808252601a908201527f4e6f746172793a756e617574686f72697a65642d616363657373000000000000604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016109d0576109d06109a8565b5060010190565b60005b838110156109f25781810151838201526020016109da565b83811115610a01576000848401525b50505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351610a3f8160178501602088016109d7565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351610a708160288401602088016109d7565b01602801949350505050565b6020815260008251806020840152610a9b8160408501602087016109d7565b601f01601f19169190910160400192915050565b6000816000190483118215151615610ac957610ac96109a8565b500290565b60008219821115610ae157610ae16109a8565b500190565b634e487b7160e01b600052604160045260246000fd5b600081610b0b57610b0b6109a8565b50600019019056fea26469706673582212207c0666516835dba459122e4dea5ca25cb814a6e7770fed9f74b354c538d4f86764736f6c634300080f0033a26469706673582212206a828edaa638a2474057bb95151658b8f53e0dc3a55164ee16d269c65404cac864736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8077,
        "contract": "contracts/Deployer.sol:Deployer",
        "label": "_metadata",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 8080,
        "contract": "contracts/Deployer.sol:Deployer",
        "label": "_citizenships",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 8083,
        "contract": "contracts/Deployer.sol:Deployer",
        "label": "_nations",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 8086,
        "contract": "contracts/Deployer.sol:Deployer",
        "label": "_notaries",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      }
    }
  }
}