{
  "language": "Solidity",
  "sources": {
    "contracts/Deployer.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.15;\n\nimport \"@web3-citizen/core-sol/contracts/CitizenAlpha.sol\";\nimport \"@web3-citizen/core-sol/contracts/Nation/Nation.sol\";\nimport \"@web3-citizen/core-sol/contracts/Notary/Notary.sol\";\n\ncontract Deployer {\n  address private _metadata;\n  address[] private _citizenships;\n  address[] private _nations;\n  address[] private _notaries;\n\n  // event CitizenshipStarted(address indexed citizenship, address indexed founder);\n  // event NationStarted(address indexed nation, address indexed founder);\n  // event NotaryStarted(address indexed notary, address indexed founder);\n\n  constructor(address _metadata_) {\n    _metadata = _metadata_;\n  }\n\n  function setupDemocracy(\n    string memory name,\n    string memory symbol,\n    string memory nationName,\n    string memory nationSymbol,\n    address[] calldata founders\n  ) public {\n    CitizenAlpha citizenAlpha_ = deployCitizenship(_metadata, name, symbol, founders);\n    deployNation(nationName, nationSymbol, address(citizenAlpha_), founders);\n    address notary_ = deployNotary(address(citizenAlpha_), founders);\n    citizenAlpha_.setNotary(notary_);\n  }\n\n  function deployCitizenship(\n    address metadata_,\n    string memory name_,\n    string memory symbol_,\n    address[] calldata founders\n  ) public returns (CitizenAlpha) {\n    CitizenAlpha citizenship_ = new CitizenAlpha(metadata_, name_, symbol_, founders);\n    _citizenships.push(address(citizenship_));\n    // emit CitizenshipStarted(address(citizenship_), msg.sender);\n    return citizenship_;\n  }\n\n  function deployNation(\n    string memory name,\n    string memory symbol,\n    address citizenAlpha,\n    address[] calldata founders\n  ) public returns (address) {\n    Nation nation_ = new Nation(name, symbol, citizenAlpha, founders);\n    _nations.push(address(nation_));\n    // emit NationStarted(address(nation_), msg.sender);\n    return address(nation_);\n  }\n\n  function deployNotary(address _citizenAlpha_, address[] calldata notaries)\n    public\n    returns (address)\n  {\n    Notary notary_ = new Notary(_citizenAlpha_, notaries);\n    _notaries.push(address(notary_));\n    // emit NotaryStarted(address(notary_), msg.sender);\n    return address(notary_);\n  }\n\n  function getCitizenships() public view returns (address[] memory citizenships) {\n    return _citizenships;\n  }\n\n  function getCitizenshipCount() public view returns (uint256 count) {\n    return _nations.length;\n  }\n\n  function getNations() public view returns (address[] memory nations) {\n    return _nations;\n  }\n\n  function getNationCount() public view returns (uint256 count) {\n    return _nations.length;\n  }\n\n  function getNotaries() public view returns (address[] memory notaries) {\n    return _notaries;\n  }\n\n  function getNotaryCount() public view returns (uint256 count) {\n    return _notaries.length;\n  }\n}\n"
    },
    "@web3-citizen/core-sol/contracts/CitizenAlpha.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { ERC721 } from \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport { Metadata } from \"./Metadata.sol\";\nimport { Nation } from \"./Nation/Nation.sol\";\nimport { Notary } from \"./Notary/Notary.sol\";\n\n/**\n * @title CitizenAlpha\n * @author Kames Geraghty\n */\ncontract CitizenAlpha is ERC721, Ownable {\n  /// @notice Total tokens issued\n  uint256 private _idCounter;\n\n  /// @notice Metadata instance\n  address private _metadata;\n\n  /// @notice Notary instance\n  address private _notary;\n\n  /// @notice TrustResolver instance\n  address private _resolver;\n\n  /// @notice tokenURISplit logic operator\n  bool private _tokenURISplit;\n\n  /// @notice Reverse lookup of a tokenId using the owner address\n  mapping(address => uint256) private _tokenIds;\n\n  /// @notice Lookup address of Citizenship trust link\n  mapping(address => address) private _links;\n\n  /**\n   * @notice Emit when Metadata instnace is updated.\n   * @param metadata Address of new Metadata instance\n   */\n  event NewMetadata(address metadata);\n\n  /**\n   * @notice Emit when Nation instnace is updated.\n   * @param nation Address of new Nation instance\n   */\n  event NewNation(address nation);\n\n  /**\n   * @notice Emit when Notary instnace is updated.\n   * @param notary Address of new Notary instance\n   */\n  event NewNotary(address notary);\n\n  /**\n   * @notice Emit when Resolver instnace is updated.\n   * @param resolver Address of new Resolver instance\n   */\n  event NewResolver(address resolver);\n\n  /**\n   * @notice Emit when Citizenship is issued.\n   * @param id Citizen ID\n   * @param citizen Address of new Citizen\n   * @param link Address of  Citizen issuing new Citizenship\n   */\n  event Issued(uint256 id, address indexed citizen, address indexed link);\n\n  /**\n   * @notice Emit when Citizenship is revoked.\n   * @param id Citizen ID\n   * @param citizen Address of new Citizen\n   * @param link Address of Founder revoking Citizenship\n   */\n  event Revoked(uint256 id, address indexed citizen, address indexed link);\n\n  /**\n   * @notice CitizenAlpha Construction\n   * @param metadata_ address - Metadata instance\n   * @param name_ string - Name of ERC721 token\n   * @param symbol_ string - Symbol of ERC721 token\n   */\n  constructor(\n    address metadata_,\n    string memory name_,\n    string memory symbol_,\n    address[] memory founders_\n  ) ERC721(name_, symbol_) {\n    _metadata = metadata_;\n    for (uint256 i = 0; i < founders_.length; i++) {\n      _issue(founders_[i], address(0));\n    }\n  }\n\n  /* ===================================================================================== */\n  /* External Functions                                                                    */\n  /* ===================================================================================== */\n\n  /**\n   * @notice Get Metadata instance\n   * @return metadata Metadata\n   */\n  function getMetadata() external view returns (address metadata) {\n    return _metadata;\n  }\n\n  /**\n   * @notice Get Notary instance\n   * @return notary Notary\n   */\n  function getNotary() external view returns (address notary) {\n    return _notary;\n  }\n\n  /**\n   * @notice Get Resolver instance\n   * @return resolver Resolver\n   */\n  function getResolver() external view returns (address resolver) {\n    return _resolver;\n  }\n\n  /**\n   * @notice Read totalIssued (_idCounter)\n   * @return totalIssued uint256\n   */\n  function totalIssued() external view returns (uint256) {\n    return _idCounter;\n  }\n\n  /**\n   * @notice Check Citizenship ID\n   * @param citizen address\n   * @return id uint256\n   */\n  function getId(address citizen) external view returns (uint256) {\n    require(_isCitizen(citizen), \"CitizenAlpha:not-active-citizen\");\n    return _tokenIds[citizen];\n  }\n\n  /**\n   * @notice Lookup Citizenship link\n   * @param citizen address\n   * @return link address\n   */\n  function getLink(address citizen) external view returns (address link) {\n    return _links[citizen];\n  }\n\n  /**\n   * @notice Check Role status of Citizen via Nation\n   * @param citizen Address of Citizen\n   * @return status bool\n   */\n  function hasRole(\n    address nation,\n    bytes32 role,\n    address citizen\n  ) external view returns (bool) {\n    return Nation(nation).hasRole(role, citizen);\n  }\n\n  /**\n   * @notice Check Citizenship status\n   * @param citizen Address of potential Citizen\n   * @return status bool\n   */\n  function isCitizen(address citizen) external view returns (bool status) {\n    return balanceOf(citizen) == 1 ? true : false;\n  }\n\n  /**\n   * @notice Generate token URI\n   * @param tokenId uint256\n   * @return metadata string\n   */\n  function tokenURI(uint256 tokenId) public view override returns (string memory) {\n    Metadata metadata_ = Metadata(_metadata);\n    if (!_tokenURISplit) {\n      return metadata_.tokenURI(tokenId);\n    } else {\n      return\n        _resolver == _msgSender()\n          ? metadata_.tokenURIResolver(tokenId)\n          : metadata_.tokenURI(tokenId);\n    }\n  }\n\n  /**\n   * @notice Issue a new Citizenship\n   * @param to address\n   */\n  function issue(address to) external {\n    address _sender = _msgSender();\n    require(Notary(_notary).isNotary(_sender), \"CitizenAlpha:not-notary\");\n    require(!_isCitizen(to), \"CitizenAlpha:is-citizen\");\n    require(!_isPreviouslyIssued(to), \"CitizenAlpha:revoked-citizenship\");\n    _issue(to, _sender);\n  }\n\n  /**\n   * @notice Revoke an existing Citizenship\n   * @param from address\n   */\n  function revoke(address from) external {\n    address _sender = _msgSender();\n    require(Notary(_notary).isNotary(_sender), \"CitizenAlpha:not-notary\");\n    require(_isCitizen(from), \"CitizenAlpha:not-citizen\");\n    _revoke(from, _sender);\n  }\n\n  /**\n   * @notice Reset Citizenship status\n   * @param citizen address\n   */\n  function reset(address citizen) external {\n    require(Notary(_notary).isNotary(_msgSender()), \"CitizenAlpha:not-notary\");\n    require(!_isCitizen(citizen), \"CitizenAlpha:is-citizen\");\n    require(_isPreviouslyIssued(citizen), \"CitizenAlpha:never-citizen\");\n    _tokenIds[citizen] = 0;\n  }\n\n  /**\n   * @notice Set URI Splitter status\n   * @param status bool\n   */\n  function setURISplitter(bool status) external onlyOwner {\n    _tokenURISplit = status;\n  }\n\n  /**\n   * @notice Set Metadata instance\n   * @param metadata address\n   */\n  function setMetadata(address metadata) external onlyOwner {\n    _metadata = metadata;\n    emit NewMetadata(metadata);\n  }\n\n  /**\n   * @notice Set Notary instance\n   * @param notary address\n   */\n  function setNotary(address notary) external onlyOwner {\n    _notary = notary;\n    emit NewNotary(notary);\n  }\n\n  /**\n   * @notice Set Resolver instance\n   * @param resolver address\n   */\n  function setResolver(address resolver) external onlyOwner {\n    _resolver = resolver;\n    emit NewResolver(resolver);\n  }\n\n  /**\n   * @notice Override transferFrom to make non-transferable\n   */\n  function transferFrom(\n    address,\n    address,\n    uint256\n  ) public virtual override {\n    revert(\"CitizenAlpha: Soulbound\");\n  }\n\n  function supportsInterface(bytes4 interfaceId)\n    public\n    view\n    virtual\n    override(ERC721)\n    returns (bool)\n  {\n    return super.supportsInterface(interfaceId);\n  }\n\n  /* ===================================================================================== */\n  /* Internal Functions                                                                    */\n  /* ===================================================================================== */\n\n  function _isCitizen(address citizen) internal view returns (bool) {\n    return balanceOf(citizen) == 1 ? true : false;\n  }\n\n  /**\n   * @dev First Founder can be issued<>revoked<>issued.\n   *      All other address can only be issued<>revoked.\n   *      Unless the account is reset.\n   */\n  function _isPreviouslyIssued(address citizen) internal view returns (bool) {\n    return _tokenIds[citizen] != 0 ? true : false;\n  }\n\n  function _issue(address to, address link) internal {\n    uint256 __idCounter = _idCounter++;\n    _links[to] = link;\n    _tokenIds[to] = __idCounter;\n    _mint(to, __idCounter);\n    emit Issued(__idCounter, to, link);\n  }\n\n  function _revoke(address from, address link) internal {\n    uint256 tokenId = _tokenIds[from];\n    _burn(tokenId);\n    emit Revoked(tokenId, from, link);\n  }\n}\n"
    },
    "@web3-citizen/core-sol/contracts/Nation/Nation.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.15;\n\nimport { AccessControlEnumerable, AccessControl, IAccessControl } from \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\";\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { CitizenAlpha } from \"../CitizenAlpha.sol\";\nimport { Notary } from \"../Notary/Notary.sol\";\n\n/**\n * @title Nation\n * @author Kames Geraghty\n * @notice Nation is an AccessControl layer for CitizenAlpha.\n * @dev Extends Citizen on-chain permissions using nested Roles.\n           \n */\ncontract Nation is AccessControlEnumerable {\n  // Nation name\n  string private _name;\n\n  // Nation symbol\n  string private _symbol;\n\n  // Nation DID (Decentralized Identifier)\n  string private _did;\n\n  /// @notice CitizenAlpha instance\n  address private _citizenAlpha;\n\n  /// @notice Founder Role\n  bytes32 private constant FOUNDER = keccak256(\"FOUNDER\");\n\n  /// @notice Governance Role\n  bytes32 private constant GOVERNANCE = keccak256(\"GOVERNANCE\");\n\n  /// @notice Global Role AccessControl\n  mapping(bytes32 => bool) private _roleActive;\n\n  /**\n   * @notice Nation Constructor\n   * @param name string - Name of Nation\n   * @param symbol string - Symbol of Nation\n   * @param citizenAlpha address - Address of CitizenAlpha\n   * @param founders array(address) - Array of Founders\n   */\n  constructor(\n    string memory name,\n    string memory symbol,\n    address citizenAlpha,\n    address[] memory founders\n  ) {\n    _name = name;\n    _symbol = symbol;\n    _citizenAlpha = citizenAlpha;\n    _roleActive[FOUNDER] = true;\n    _roleActive[GOVERNANCE] = true;\n    _roleActive[DEFAULT_ADMIN_ROLE] = true;\n    for (uint256 i = 0; i < founders.length; i++) {\n      _setupRole(FOUNDER, founders[i]);\n      _setupRole(DEFAULT_ADMIN_ROLE, founders[i]);\n    }\n    _setRoleAdmin(FOUNDER, DEFAULT_ADMIN_ROLE);\n  }\n\n  /**\n   * @notice Admin modifier\n   * @param role bytes32\n   */\n  modifier _onlyAdmin(bytes32 role) {\n    address sender_ = _msgSender();\n    require(\n      hasRole(getRoleAdmin(role), sender_) ||\n        hasRole(GOVERNANCE, sender_) ||\n        hasRole(DEFAULT_ADMIN_ROLE, sender_),\n      \"Nation:unauthorized\"\n    );\n    _;\n  }\n\n  /**\n   * @notice Governance modifier\n   */\n  modifier _onlyGovernance() {\n    address sender_ = _msgSender();\n    require(\n      (hasRole(GOVERNANCE, sender_) || hasRole(DEFAULT_ADMIN_ROLE, sender_)),\n      \"Nation:unauthorized\"\n    );\n    _;\n  }\n\n  /* ===================================================================================== */\n  /* External Functions                                                                    */\n  /* ===================================================================================== */\n\n  function name() external view virtual returns (string memory) {\n    return _name;\n  }\n\n  function symbol() external view virtual returns (string memory) {\n    return _symbol;\n  }\n\n  function did() external view virtual returns (string memory) {\n    return _did;\n  }\n\n  function metadata()\n    external\n    view\n    virtual\n    returns (\n      string memory name,\n      string memory symbol,\n      string memory did\n    )\n  {\n    return (_name, _symbol, _did);\n  }\n\n  /**\n   * @notice Get CitizenAlpha instance\n   * @return citizenAlpha address of CitizenAlpha instance\n   */\n  function getCitizenAlpha() external view returns (address) {\n    return _citizenAlpha;\n  }\n\n  /**\n   * @notice Check if Account has Role\n   * @dev Include check for Role activication is Citizenship\n   * @return active bool\n   */\n  function hasRole(bytes32 role, address account)\n    public\n    view\n    virtual\n    override(AccessControl, IAccessControl)\n    returns (bool)\n  {\n    if (!_roleActive[role] || !CitizenAlpha(_citizenAlpha).isCitizen(account)) {\n      return false;\n    }\n    return super.hasRole(role, account);\n  }\n\n  /**\n   * @notice Check Founder status\n   * @param citizen address\n   * @return status bool\n   */\n  function isFounder(address citizen) external view returns (bool status) {\n    return hasRole(FOUNDER, citizen);\n  }\n\n  /**\n   * @notice Check Governance status\n   * @param module address\n   * @return status bool\n   */\n  function isGovernance(address module) external view returns (bool status) {\n    return hasRole(GOVERNANCE, module);\n  }\n\n  /**\n   * @notice Get status of Role global settings\n   * @return status bool\n   */\n  function roleStatus(bytes32 role) external view returns (bool status) {\n    return _roleActive[role];\n  }\n\n  /**\n   * @notice Grant Role to Citizen\n   * @param role bytes32\n   * @param citizen address\n   */\n  function grantRole(bytes32 role, address citizen)\n    public\n    virtual\n    override(AccessControl, IAccessControl)\n    _onlyAdmin(role)\n  {\n    require(_roleActive[role], \"Nation:inactive-role\");\n    _grantRole(role, citizen);\n  }\n\n  /**\n   * @notice Revoke Role from Citizen\n   * @param role bytes32\n   * @param citizen address\n   */\n  function revokeRole(bytes32 role, address citizen)\n    public\n    virtual\n    override(AccessControl, IAccessControl)\n    _onlyAdmin(role)\n  {\n    require(role != DEFAULT_ADMIN_ROLE, \"Nation:invalid-request\");\n    require(_roleActive[role], \"Nation:inactive-role\");\n    _revokeRole(role, citizen);\n  }\n\n  /**\n   * @notice Enable Role status\n   * @param role bytes32\n   */\n  function enableRole(bytes32 role) external onlyRole(FOUNDER) {\n    require(_roleActive[role] == false, \"Nation:role-enabled\");\n    _setRoleAdmin(role, FOUNDER);\n    _roleActive[role] = true;\n  }\n\n  /**\n   * @notice Enable Role status\n   * @param role bytes32\n   * @param adminRole bytes32\n   */\n  function enableRoleWithAdmin(bytes32 role, bytes32 adminRole) external _onlyGovernance {\n    require(_roleActive[role] == false, \"Nation:role-enabled\");\n    _setRoleAdmin(role, adminRole);\n    _roleActive[role] = true;\n  }\n\n  /**\n   * @notice Disable Role status\n   * @param role bytes32\n   */\n  function disableRole(bytes32 role) external _onlyGovernance {\n    require(_roleActive[role] == true, \"Nation:role-disabled\");\n    _setRoleAdmin(role, DEFAULT_ADMIN_ROLE);\n    _roleActive[role] = false;\n  }\n\n  /**\n   * @notice Set Role admin\n   * @param role bytes32\n   * @param adminRole bytes32\n   */\n  function setRoleAdmin(bytes32 role, bytes32 adminRole) external _onlyGovernance {\n    _setRoleAdmin(role, adminRole);\n  }\n\n  function setCitizenAlpha(address citizenAlpha) external _onlyGovernance {\n    _citizenAlpha = citizenAlpha;\n  }\n\n  function setDid(string calldata did) external _onlyGovernance {\n    _did = did;\n  }\n\n  function setName(string calldata name) external _onlyGovernance {\n    _name = name;\n  }\n\n  function setSymbol(string calldata symbol) external _onlyGovernance {\n    _symbol = symbol;\n  }\n}\n"
    },
    "@web3-citizen/core-sol/contracts/Notary/Notary.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport { AccessControl } from \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport { ICitizenAlpha } from \"../interfaces/ICitizenAlpha.sol\";\n\n/**\n * @title Notary\n * @author Kames Geraghty\n * @notice Notary is a minimal AccessControl layer for Citizen issuance.\n */\ncontract Notary is AccessControl {\n  /// @notice CitizenAlpha instance\n  address private _citizenAlpha;\n\n  /// @notice Notary Role\n  bytes32 private constant NOTARY = keccak256(\"NOTARY\");\n\n  /**\n   * @notice Notary Constructor\n   * @dev Set CitizenAlpha instance and set start Notaries.\n   * @param _citizenAlpha_ CitizenAlpha instance\n   * @param _notaries Array of Notaries\n   */\n  constructor(address _citizenAlpha_, address[] memory _notaries) {\n    _citizenAlpha = _citizenAlpha_;\n    _setupRole(NOTARY, address(this));\n    for (uint256 i = 0; i < _notaries.length; i++) {\n      _setupRole(DEFAULT_ADMIN_ROLE, _notaries[i]);\n      _setupRole(NOTARY, _notaries[i]);\n    }\n    _setRoleAdmin(NOTARY, DEFAULT_ADMIN_ROLE);\n  }\n\n  /* ===================================================================================== */\n  /* External Functions                                                                    */\n  /* ===================================================================================== */\n\n  function getCitizenAlpha() external view returns (address) {\n    return _citizenAlpha;\n  }\n\n  /**\n   * @notice Check Notary status\n   * @param citizen address\n   * @return status bool\n   */\n  function isNotary(address citizen) external view returns (bool status) {\n    return hasRole(NOTARY, citizen);\n  }\n\n  /**\n   * @notice Issue Citizenship\n   * @param to address\n   */\n  function issue(address to) external {\n    require(hasRole(NOTARY, _msgSender()), \"Notary:unauthorized-access\");\n    _issue(to);\n  }\n\n  /**\n   * @notice Batch issue Citizenships\n   * @param to address\n   */\n  function issueBatch(address[] calldata to) external {\n    require(hasRole(NOTARY, _msgSender()), \"Notary:unauthorized-access\");\n    for (uint256 i = 0; i < to.length; i++) {\n      _issue(to[i]);\n    }\n  }\n\n  /**\n   * @notice Revoke Citizenship\n   * @param from address\n   */\n  function revoke(address from) external {\n    require(hasRole(NOTARY, _msgSender()), \"Notary:unauthorized-access\");\n    _revoke(from);\n  }\n\n  /**\n   * @notice Batch Revoke Citizenships\n   * @param from address\n   */\n  function revokeBatch(address[] calldata from) external {\n    require(hasRole(NOTARY, _msgSender()), \"Notary:unauthorized-access\");\n    for (uint256 i = 0; i < from.length; i++) {\n      _revoke(from[i]);\n    }\n  }\n\n  /* ===================================================================================== */\n  /* Internal Functions                                                                    */\n  /* ===================================================================================== */\n\n  function _issue(address _to) internal {\n    ICitizenAlpha(_citizenAlpha).issue(_to);\n  }\n\n  function _revoke(address _from) internal {\n    ICitizenAlpha(_citizenAlpha).revoke(_from);\n  }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "@web3-citizen/core-sol/contracts/Metadata.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.15;\n\nimport { Base64 } from \"base64-sol/base64.sol\";\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { Strings } from \"@openzeppelin/contracts/utils/Strings.sol\";\nimport { svg } from \"./libraries/SVG.sol\";\nimport { svgUtils } from \"./libraries/SVGUtils.sol\";\nimport { SVGColor } from \"./libraries/SVGColor.sol\";\nimport { ISource } from \"./interfaces/ISource.sol\";\nimport { ICitizenAlpha } from \"./interfaces/ICitizenAlpha.sol\";\nimport { SourceENS } from \"./Sources/SourceENS.sol\";\nimport { CitizenAlpha } from \"./CitizenAlpha.sol\";\nimport { SVGRender } from \"./SVGRender.sol\";\n\n/**\n * @title Metadata\n * @author Kames Geraghty\n * @notice CitizenAlpha metadata resolver.\n */\ncontract Metadata is Ownable {\n  using Strings for uint256;\n\n  /// @notice Token instance\n  address private _token;\n\n  /// @notice SVGRender instance\n  address private _svgRender;\n\n  /// @notice ISources[] list\n  address[] private _sources;\n\n  struct Metadata {\n    string name;\n    string description;\n    string avatar;\n    string did;\n    string ensAlias;\n    string ensNode;\n    string ensResolver;\n    string traits;\n  }\n\n  struct ExternalMetadata {\n    string avatar;\n    string did;\n    string ensNode;\n    string ensAlias;\n    string ensResolver;\n    string traits;\n  }\n\n  constructor(address _svgRender_) {\n    _svgRender = _svgRender_;\n  }\n\n  /* ===================================================================================== */\n  /* External Functions                                                                    */\n  /* ===================================================================================== */\n\n  /**\n   * @notice Get Token instance\n   * @return token Token\n   */\n  function getToken() external view returns (address token) {\n    return _token;\n  }\n\n  /**\n   * @notice Get Token instance\n   * @return token Token\n   */\n  function getSVGRender() external view returns (address token) {\n    return _svgRender;\n  }\n\n  function getSourceData(uint256 idx, address user)\n    external\n    view\n    returns (string[] memory, string[] memory)\n  {\n    return _getSourceData(idx, user);\n  }\n\n  function getSourcesData(address user) external view returns (string[] memory, string[] memory) {\n    return _getSourcesData(user);\n  }\n\n  /**\n   * @notice Construct tokenURI\n   * @param tokenId address\n   * @return uri string - Uniform Resource Identifier (URI) for `tokenId` token.\n   */\n  function tokenURI(uint256 tokenId) external view returns (string memory) {\n    return _constructTokenURI(tokenId);\n  }\n\n  /**\n   * @notice Construct resolver tokenURI\n   * @param tokenId address\n   * @return uri string - Uniform Resource Identifier (URI) for `tokenId` token.\n   */\n  function tokenURIResolver(uint256 tokenId) external view returns (string memory) {\n    return _constructTokenURIResolver(tokenId);\n  }\n\n  /**\n   * @notice Get User Metadata\n   * @param user address\n   * @return metadata Metadata\n   */\n  function getMetadata(address user) external view returns (Metadata memory) {\n    return _constructMetadata(user, CitizenAlpha(_token).getId(user));\n  }\n\n  /**\n   * @notice Get User Avatar\n   * @param user address\n   * @return avatar string\n   */\n  function getAvatar(address user) external view returns (string memory) {\n    uint256 _tokenId = ICitizenAlpha(_token).getId(user);\n    SourceENS _resolverEns = SourceENS(_sources[0]);\n    (, string memory alias_, ) = _resolverEns.getMetadata(user);\n    string memory avatar_ = _resolverEns.getValue(user, \"avatar\");\n    return _generateAvatar(avatar_, _tokenId, alias_);\n  }\n\n  /**\n   * @notice Get User Image\n   * @param user address\n   * @return avatar string\n   */\n  function getImage(address user) external view returns (string memory) {\n    uint256 _tokenId = ICitizenAlpha(_token).getId(user);\n    SourceENS _resolverEns = SourceENS(_sources[0]);\n    (, string memory alias_, ) = _resolverEns.getMetadata(user);\n    return _generateImage(_tokenId, alias_);\n  }\n\n  /**\n   * @notice Append Source instance\n   * @param source address\n   */\n  function appendSource(address source) external onlyOwner {\n    _sources.push(source);\n  }\n\n  /**\n   * @notice Set Source instance\n   * @param idx uint256\n   * @param source address\n   */\n  function updateSource(uint256 idx, address source) external onlyOwner {\n    require(idx < _sources.length - 1, \"Metadata:invalid-index\");\n    _sources[idx] = source;\n  }\n\n  /**\n   * @notice Set Token instance\n   * @param token_ address\n   */\n  function setToken(address token_) external onlyOwner {\n    _token = token_;\n  }\n\n  /**\n   * @notice Set SVGRender instance\n   * @param svgRender_ address\n   */\n  function setSVGRender(address svgRender_) external onlyOwner {\n    _svgRender = svgRender_;\n  }\n\n  /* ===================================================================================== */\n  /* Internal Functions                                                                    */\n  /* ===================================================================================== */\n\n  function _constructTokenURI(uint256 _tokenId) internal view returns (string memory) {\n    ICitizenAlpha token_ = ICitizenAlpha(_token);\n    Metadata memory _meta = _constructMetadata(token_.ownerOf(_tokenId), _tokenId);\n\n    return\n      string(\n        abi.encodePacked(\n          \"data:application/json;base64,\",\n          Base64.encode(\n            bytes(\n              string.concat(\n                '{\"name\":',\n                '\"',\n                _meta.name,\n                '\",',\n                '\"description\":',\n                '\"',\n                _meta.description,\n                '\",',\n                '\"image\":',\n                '\"',\n                _meta.avatar,\n                '\",',\n                '\"attributes\": [',\n                _meta.traits,\n                \"]\",\n                \"}\"\n              )\n            )\n          )\n        )\n      );\n  }\n\n  function _constructTokenURIResolver(uint256 _tokenId) internal view returns (string memory) {\n    ICitizenAlpha token_ = ICitizenAlpha(_token);\n    address owner_ = token_.ownerOf(_tokenId);\n    ExternalMetadata memory externalMetadata_ = _getExternalMetadata(owner_, _tokenId);\n    string memory name_ = string(abi.encodePacked(\"Citizen #\", _tokenId.toString()));\n    string memory description_ = bytes(externalMetadata_.ensAlias).length > 0\n      ? externalMetadata_.ensAlias\n      : Strings.toHexString(uint256(uint160(owner_)), 20);\n    string memory avatar_ = _generateImage(_tokenId, externalMetadata_.ensAlias);\n    address link_ = ICitizenAlpha(_token).getLink(owner_);\n    return\n      string(\n        abi.encodePacked(\n          \"data:application/json;base64,\",\n          Base64.encode(\n            bytes(\n              string.concat(\n                '{\"name\":',\n                '\"',\n                name_,\n                '\",',\n                '\"description\":',\n                '\"',\n                description_,\n                '\",',\n                '\"image\":',\n                '\"',\n                avatar_,\n                '\",',\n                '\"attributes\": [',\n                _generateTrait(\"link\", Strings.toHexString(uint256(uint160(link_)), 20)),\n                \"]\",\n                \"}\"\n              )\n            )\n          )\n        )\n      );\n  }\n\n  function _constructMetadata(address user, uint256 tokenId)\n    internal\n    view\n    returns (Metadata memory)\n  {\n    ExternalMetadata memory externalMetadata_ = _getExternalMetadata(user, tokenId);\n    string memory name_ = string(abi.encodePacked(\"Citizen #\", tokenId.toString()));\n    string memory description_ = bytes(externalMetadata_.ensAlias).length > 0\n      ? externalMetadata_.ensAlias\n      : Strings.toHexString(uint256(uint160(user)), 20);\n    address link_ = ICitizenAlpha(_token).getLink(user);\n\n    Metadata memory _meta = Metadata({\n      name: name_,\n      description: description_,\n      avatar: externalMetadata_.avatar,\n      did: externalMetadata_.did,\n      ensNode: externalMetadata_.ensNode,\n      ensAlias: externalMetadata_.ensAlias,\n      ensResolver: externalMetadata_.ensResolver,\n      traits: string.concat(\n        externalMetadata_.traits,\n        _generateTrait(\"link\", Strings.toHexString(uint256(uint160(link_)), 20))\n      )\n    });\n\n    return _meta;\n  }\n\n  function _getExternalMetadata(address user, uint256 _tokenId)\n    internal\n    view\n    returns (ExternalMetadata memory)\n  {\n    /// @dev ENS resolver must always be in the first slot. TODO: make better\n    SourceENS _resolverEns = SourceENS(_sources[0]);\n    string memory did_ = _resolverEns.getValue(user, \"did\");\n    string memory avatar_ = _resolverEns.getValue(user, \"avatar\");\n    (bytes32 node, string memory alias_, address resolver_) = _resolverEns.getMetadata(user);\n    string memory traits_ = _getUnwrappedTraits(user);\n    return\n      ExternalMetadata({\n        avatar: _generateAvatar(avatar_, _tokenId, alias_),\n        did: did_,\n        ensNode: string(abi.encodePacked(node)),\n        ensAlias: string(alias_),\n        ensResolver: resolver_ != 0x0000000000000000000000000000000000000000\n          ? Strings.toHexString(uint256(uint160(resolver_)), 20)\n          : \"\",\n        traits: traits_\n      });\n  }\n\n  function _getExternalAvatar(address user, uint256 _tokenId)\n    internal\n    view\n    returns (string memory)\n  {\n    /// @dev ENS PublicResolver must be in first slot. TODO: make better in V2\n    SourceENS _resolverEns = SourceENS(_sources[0]);\n    string memory avatar_ = _resolverEns.getValue(user, \"avatar\");\n    (, string memory alias_, ) = _resolverEns.getMetadata(user);\n    return _generateAvatar(avatar_, _tokenId, alias_);\n  }\n\n  function _getUnwrappedTraits(address user) internal view returns (string memory) {\n    (string[] memory keys_, string[] memory values_) = _getSourcesData(user);\n    return _generateTraits(keys_, values_);\n  }\n\n  function _getSourceData(uint256 _sourceIndex, address _user)\n    internal\n    view\n    returns (string[] memory, string[] memory)\n  {\n    ISource _source = ISource(_sources[_sourceIndex]);\n    uint256 count = _source.count(_user);\n\n    string[] memory keys_ = new string[](count);\n    string[] memory values_ = new string[](count);\n\n    (string[] memory keys__, string[] memory values__) = _source.getData(_user);\n\n    for (uint256 k = 0; k < count; k++) {\n      keys_[k] = (keys__[k]);\n      values_[k] = values__[k];\n    }\n\n    return (keys_, values_);\n  }\n\n  function _getSourcesData(address _user) internal view returns (string[] memory, string[] memory) {\n    uint256 count = 0;\n    address[] memory __sources = _sources;\n    for (uint256 i = 0; i < __sources.length; i++) {\n      ISource _source = ISource(__sources[i]);\n      count = count + _source.count(_user);\n    }\n\n    string[] memory keys_ = new string[](count);\n    string[] memory values_ = new string[](count);\n\n    uint256 __start;\n    for (uint256 i = 0; i < __sources.length; i++) {\n      ISource _source = ISource(__sources[i]);\n      (string[] memory keys__, string[] memory values__) = _source.getData(_user);\n      for (uint256 k = __start; k < count; k++) {\n        keys_[k] = (keys__[k]);\n        values_[k] = values__[k];\n      }\n    }\n\n    return (keys_, values_);\n  }\n\n  /* ===================================================================================== */\n  /* Traits Functions                                                                      */\n  /* ===================================================================================== */\n\n  function _appendTrait(string memory _traits, string memory _traitAppending)\n    internal\n    pure\n    returns (string memory)\n  {\n    return string.concat(_traits, bytes(_traits).length > 0 ? \",\" : \"\", _traitAppending);\n  }\n\n  function _generateTrait(string memory _key, string memory _value)\n    internal\n    pure\n    returns (string memory __traits)\n  {\n    return string.concat('{\"trait_type\":' '\"', _key, '\",', '\"value\":', '\"', _value, '\"}');\n  }\n\n  function _generateTraits(string[] memory _keys, string[] memory _values)\n    internal\n    pure\n    returns (string memory __traits)\n  {\n    string memory _traits = \"\";\n    for (uint256 i = 0; i < _keys.length; i++) {\n      if (bytes(_values[i]).length > 0) {\n        _traits = string.concat(_traits, _generateTrait(_keys[i], _values[i]), \",\");\n      }\n    }\n    return _traits;\n  }\n\n  function _generateAvatar(\n    string memory _avatar,\n    uint256 tokenId,\n    string memory alias_\n  ) internal view returns (string memory) {\n    if (bytes(_avatar).length == 0) {\n      return\n        string(\n          abi.encodePacked(\n            \"data:image/svg+xml;base64,\",\n            Base64.encode(bytes(SVGRender(_svgRender).generate(tokenId, alias_)))\n          )\n        );\n    }\n    return _avatar;\n  }\n\n  function _generateImage(uint256 tokenId, string memory alias_)\n    internal\n    view\n    returns (string memory)\n  {\n    return\n      string(\n        abi.encodePacked(\n          \"data:image/svg+xml;base64,\",\n          Base64.encode(bytes(SVGRender(_svgRender).generate(tokenId, alias_)))\n        )\n      );\n  }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "base64-sol/base64.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\n/// @title Base64\n/// @author Brecht Devos - <brecht@loopring.org>\n/// @notice Provides functions for encoding/decoding base64\nlibrary Base64 {\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n    bytes  internal constant TABLE_DECODE = hex\"0000000000000000000000000000000000000000000000000000000000000000\"\n                                            hex\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\"\n                                            hex\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\"\n                                            hex\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\";\n\n    function encode(bytes memory data) internal pure returns (string memory) {\n        if (data.length == 0) return '';\n\n        // load the table into memory\n        string memory table = TABLE_ENCODE;\n\n        // multiply by 4/3 rounded up\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\n\n        // add some extra buffer at the end required for the writing\n        string memory result = new string(encodedLen + 32);\n\n        assembly {\n            // set the actual output length\n            mstore(result, encodedLen)\n\n            // prepare the lookup table\n            let tablePtr := add(table, 1)\n\n            // input ptr\n            let dataPtr := data\n            let endPtr := add(dataPtr, mload(data))\n\n            // result ptr, jump over length\n            let resultPtr := add(result, 32)\n\n            // run over the input, 3 bytes at a time\n            for {} lt(dataPtr, endPtr) {}\n            {\n                // read 3 bytes\n                dataPtr := add(dataPtr, 3)\n                let input := mload(dataPtr)\n\n                // write 4 characters\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\n                resultPtr := add(resultPtr, 1)\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\n                resultPtr := add(resultPtr, 1)\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\n                resultPtr := add(resultPtr, 1)\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\n                resultPtr := add(resultPtr, 1)\n            }\n\n            // padding with '='\n            switch mod(mload(data), 3)\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\n        }\n\n        return result;\n    }\n\n    function decode(string memory _data) internal pure returns (bytes memory) {\n        bytes memory data = bytes(_data);\n\n        if (data.length == 0) return new bytes(0);\n        require(data.length % 4 == 0, \"invalid base64 decoder input\");\n\n        // load the table into memory\n        bytes memory table = TABLE_DECODE;\n\n        // every 4 characters represent 3 bytes\n        uint256 decodedLen = (data.length / 4) * 3;\n\n        // add some extra buffer at the end required for the writing\n        bytes memory result = new bytes(decodedLen + 32);\n\n        assembly {\n            // padding with '='\n            let lastBytes := mload(add(data, mload(data)))\n            if eq(and(lastBytes, 0xFF), 0x3d) {\n                decodedLen := sub(decodedLen, 1)\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\n                    decodedLen := sub(decodedLen, 1)\n                }\n            }\n\n            // set the actual output length\n            mstore(result, decodedLen)\n\n            // prepare the lookup table\n            let tablePtr := add(table, 1)\n\n            // input ptr\n            let dataPtr := data\n            let endPtr := add(dataPtr, mload(data))\n\n            // result ptr, jump over length\n            let resultPtr := add(result, 32)\n\n            // run over the input, 4 characters at a time\n            for {} lt(dataPtr, endPtr) {}\n            {\n               // read 4 characters\n               dataPtr := add(dataPtr, 4)\n               let input := mload(dataPtr)\n\n               // write 3 bytes\n               let output := add(\n                   add(\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\n                   add(\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\n                    )\n                )\n                mstore(resultPtr, shl(232, output))\n                resultPtr := add(resultPtr, 3)\n            }\n        }\n\n        return result;\n    }\n}\n"
    },
    "@web3-citizen/core-sol/contracts/libraries/SVG.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"./SVGUtils.sol\";\n\n/**\n * @title svg\n * @author Kames Geraghty\n * @notice SVG construction library using web-like API.\n * @dev Original code from w1nt3r-eth/hot-chain-svg (https://github.com/w1nt3r-eth/hot-chain-svg)\n */\nlibrary svg {\n  using Strings for uint256;\n  using Strings for uint8;\n\n  function g(string memory _props, string memory _children) internal pure returns (string memory) {\n    return el(\"g\", _props, _children);\n  }\n\n  function path(string memory _props, string memory _children)\n    internal\n    pure\n    returns (string memory)\n  {\n    return el(\"path\", _props, _children);\n  }\n\n  function text(string memory _props, string memory _children)\n    internal\n    pure\n    returns (string memory)\n  {\n    return el(\"text\", _props, _children);\n  }\n\n  function line(string memory _props, string memory _children)\n    internal\n    pure\n    returns (string memory)\n  {\n    return el(\"line\", _props, _children);\n  }\n\n  function circle(string memory _props, string memory _children)\n    internal\n    pure\n    returns (string memory)\n  {\n    return el(\"circle\", _props, _children);\n  }\n\n  function circle(string memory _props) internal pure returns (string memory) {\n    return el(\"circle\", _props);\n  }\n\n  function rect(string memory _props, string memory _children)\n    internal\n    pure\n    returns (string memory)\n  {\n    return el(\"rect\", _props, _children);\n  }\n\n  function rect(string memory _props) internal pure returns (string memory) {\n    return el(\"rect\", _props);\n  }\n\n  function stop(string memory _props) internal pure returns (string memory) {\n    return el(\"stop\", _props);\n  }\n\n  function filter(string memory _props, string memory _children)\n    internal\n    pure\n    returns (string memory)\n  {\n    return el(\"filter\", _props, _children);\n  }\n\n  function defs(string memory _children) internal pure returns (string memory) {\n    return el(\"defs\", \"\", _children);\n  }\n\n  function cdata(string memory _content) internal pure returns (string memory) {\n    return string.concat(\"<![CDATA[\", _content, \"]]>\");\n  }\n\n  /* GRADIENTS */\n  function radialGradient(string memory _props, string memory _children)\n    internal\n    pure\n    returns (string memory)\n  {\n    return el(\"radialGradient\", _props, _children);\n  }\n\n  function linearGradient(string memory _props, string memory _children)\n    internal\n    pure\n    returns (string memory)\n  {\n    return el(\"linearGradient\", _props, _children);\n  }\n\n  function gradientStop(\n    uint256 offset,\n    string memory stopColor,\n    string memory _props\n  ) internal pure returns (string memory) {\n    return\n      el(\n        \"stop\",\n        string.concat(\n          prop(\"stop-color\", stopColor),\n          \" \",\n          prop(\"offset\", string.concat(svgUtils.uint2str(offset), \"%\")),\n          \" \",\n          _props\n        )\n      );\n  }\n\n  function animateTransform(string memory _props) internal pure returns (string memory) {\n    return el(\"animateTransform\", _props);\n  }\n\n  function image(string memory _href, string memory _props) internal pure returns (string memory) {\n    return el(\"image\", string.concat(prop(\"href\", _href), \" \", _props));\n  }\n\n  function start() internal pure returns (string memory) {\n    return\n      string.concat(\n        '<svg width=\"400\" height=\"400\" style=\"background:#541563\" ',\n        'viewBox=\"0 0 400 400\" ',\n        'xmlns=\"http://www.w3.org/2000/svg\" ',\n        \">\"\n      );\n  }\n\n  function end() internal pure returns (bytes memory) {\n    return (\"</svg>\");\n  }\n\n  /* COMMON */\n  // A generic element, can be used to construct any SVG (or HTML) element\n  function el(\n    string memory _tag,\n    string memory _props,\n    string memory _children\n  ) internal pure returns (string memory) {\n    return string.concat(\"<\", _tag, \" \", _props, \">\", _children, \"</\", _tag, \">\");\n  }\n\n  // A generic element, can be used to construct any SVG (or HTML) element without children\n  function el(string memory _tag, string memory _props) internal pure returns (string memory) {\n    return string.concat(\"<\", _tag, \" \", _props, \"/>\");\n  }\n\n  // an SVG attribute\n  function prop(string memory _key, string memory _val) internal pure returns (string memory) {\n    return string.concat(_key, \"=\", '\"', _val, '\" ');\n  }\n\n  function stringifyIntSet(\n    bytes memory _data,\n    uint256 _offset,\n    uint256 _len\n  ) public pure returns (bytes memory) {\n    bytes memory res;\n    require(_data.length >= _offset + _len, \"Out of range\");\n    for (uint256 i = _offset; i < _offset + _len; i++) {\n      res = abi.encodePacked(res, byte2uint8(_data, i).toString(), \" \");\n    }\n    return res;\n  }\n\n  function byte2uint8(bytes memory _data, uint256 _offset) public pure returns (uint8) {\n    require(_data.length > _offset, \"Out of range\");\n    return uint8(_data[_offset]);\n  }\n}\n"
    },
    "@web3-citizen/core-sol/contracts/libraries/SVGUtils.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\n/**\n  * @title  SVG Utilities\n  * @author Kames Geraghty\n  * @notice The SVG Utilities Library provides functions for constructing SVG; format CSS and numbers.\n  * @dev Original code from w1nt3r-eth/hot-chain-svg (https://github.com/w1nt3r-eth/hot-chain-svg)\n*/\nlibrary svgUtils {\n    using Strings for uint256;\n    using Strings for uint8;\n    \n    /// @notice Empty SVG element\n    string internal constant NULL = \"\";\n\n    /**\n     * @notice Formats a CSS variable line. Includes a semicolon for formatting.\n     * @param _key User for which to calculate prize amount.\n     * @param _val User for which to calculate prize amount.\n     * @return string Generated CSS variable.\n    */\n    function setCssVar(string memory _key, string memory _val)\n        internal\n        pure\n        returns (string memory)\n    {\n        return string.concat(\"--\", _key, \":\", _val, \";\");\n    }\n\n    /**\n     * @notice Formats getting a css variable\n     * @param _key User for which to calculate prize amount.\n     * @return string Generated CSS variable.\n    */\n    function getCssVar(string memory _key)\n        internal\n        pure\n        returns (string memory)\n    {\n        return string.concat(\"var(--\", _key, \")\");\n    }\n\n    // formats getting a def URL\n    function getDefURL(string memory _id)\n        internal\n        pure\n        returns (string memory)\n    {\n        return string.concat(\"url(#\", _id, \")\");\n    }\n\n    // checks if two strings are equal\n    function stringsEqual(string memory _a, string memory _b)\n        internal\n        pure\n        returns (bool)\n    {\n        return\n            keccak256(abi.encodePacked(_a)) == keccak256(abi.encodePacked(_b));\n    }\n\n    // returns the length of a string in characters\n    function utfStringLength(string memory _str)\n        internal\n        pure\n        returns (uint256 length)\n    {\n        uint256 i = 0;\n        bytes memory string_rep = bytes(_str);\n\n        while (i < string_rep.length) {\n            if (string_rep[i] >> 7 == 0) i += 1;\n            else if (string_rep[i] >> 5 == bytes1(uint8(0x6))) i += 2;\n            else if (string_rep[i] >> 4 == bytes1(uint8(0xE))) i += 3;\n            else if (string_rep[i] >> 3 == bytes1(uint8(0x1E)))\n                i += 4;\n                //For safety\n            else i += 1;\n\n            length++;\n        }\n    }\n\n    function round2Txt(\n        uint256 _value,\n        uint8 _decimals,\n        uint8 _prec\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(\n            (_value / 10 ** _decimals).toString(), \n            \".\",\n            ( _value / 10 ** (_decimals - _prec) -\n                _value / 10 ** (_decimals ) * 10 ** _prec\n            ).toString()\n        );\n    }\n\n     // converts an unsigned integer to a string\n     function uint2str(uint256 _i)\n     internal\n     pure\n     returns (string memory _uintAsString)\n {\n     if (_i == 0) {\n         return \"0\";\n     }\n     uint256 j = _i;\n     uint256 len;\n     while (j != 0) {\n         len++;\n         j /= 10;\n     }\n     bytes memory bstr = new bytes(len);\n     uint256 k = len;\n     while (_i != 0) {\n         k = k - 1;\n         uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\n         bytes1 b1 = bytes1(temp);\n         bstr[k] = b1;\n         _i /= 10;\n     }\n     return string(bstr);\n }\n}\n"
    },
    "@web3-citizen/core-sol/contracts/libraries/SVGColor.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\n\ncontract SVGColor {\n  using Strings for uint256;\n  using Strings for uint8;\n\n  mapping(string => bytes) public colors;\n\n  constructor() {\n    colors[\"Black\"] = hex\"000000\";\n    colors[\"White\"] = hex\"FFFFFF\";\n    colors[\"Dark1\"] = hex\"232323\";\n    colors[\"Dark2\"] = hex\"464646\";\n  }\n\n  function getColor(string memory _colorName) public view returns (bytes memory) {\n    require(colors[_colorName].length == 3, \"Unknown color\");\n    return abi.encodePacked(colors[_colorName], hex\"64\");\n  }\n\n  function getColor(string memory _colorName, uint8 _alpha) public view returns (bytes memory) {\n    require(colors[_colorName].length == 3, \"Unknown color\");\n    return abi.encodePacked(colors[_colorName], _alpha);\n  }\n\n  function getRgba(string memory _colorName) public view returns (string memory) {\n    return string(toRgba(getColor(_colorName), 0));\n  }\n\n  // Input: array of colors (without alpha)\n  // Ouputs a linearGradient\n  function autoLinearGradient(\n    bytes memory _colors,\n    bytes memory _id,\n    bytes memory _customAttributes\n  ) public view returns (bytes memory) {\n    return this.autoLinearGradient(\"\", _colors, _id, _customAttributes);\n  }\n\n  function autoLinearGradient(\n    bytes memory _coordinates,\n    bytes memory _colors,\n    bytes memory _id,\n    bytes memory _customAttributes\n  ) external view returns (bytes memory) {\n    bytes memory _b;\n    if (_coordinates.length > 3) {\n      _b = abi.encodePacked(uint8(128), _coordinates);\n    } else {\n      _b = hex\"00\";\n    }\n    // Count the number of colors passed, each on 4 byte\n    uint256 colorCount = _colors.length / 4;\n    uint8 i = 0;\n    while (i < colorCount) {\n      _b = abi.encodePacked(\n        _b,\n        uint8(i * (100 / (colorCount - 1))), // grad. stop %\n        uint8(_colors[i * 4]),\n        uint8(_colors[i * 4 + 1]),\n        uint8(_colors[i * 4 + 2]),\n        uint8(_colors[i * 4 + 3])\n      );\n      i++;\n    }\n    return linearGradient(_b, _id, _customAttributes);\n  }\n\n  function linearGradient(\n    bytes memory _lg,\n    bytes memory _id,\n    bytes memory _customAttributes\n  ) public pure returns (bytes memory) {\n    bytes memory grdata;\n    uint8 offset = 1;\n\n    if (uint8(_lg[0]) & 128 == 128) {\n      grdata = abi.encodePacked(\n        'x1=\"',\n        byte2uint8(_lg, 1).toString(),\n        '%\" x2=\"',\n        byte2uint8(_lg, 2).toString(),\n        '%\" y1=\"',\n        byte2uint8(_lg, 3).toString(),\n        '%\" y2=\"',\n        byte2uint8(_lg, 4).toString(),\n        '%\"'\n      );\n      offset = 5;\n    }\n    grdata = abi.encodePacked('<linearGradient id=\"', _id, '\" ', _customAttributes, grdata, \">\");\n    for (uint256 i = offset; i < _lg.length; i += 5) {\n      grdata = abi.encodePacked(\n        grdata,\n        '<stop offset=\"',\n        byte2uint8(_lg, i).toString(),\n        '%\" stop-color=\"',\n        toRgba(_lg, i + 1),\n        '\" id=\"',\n        _id,\n        byte2uint8(_lg, i).toString(),\n        '\"/>'\n      );\n    }\n    return abi.encodePacked(grdata, \"</linearGradient>\");\n  }\n\n  function toRgba(bytes memory _rgba, uint256 offset) public pure returns (bytes memory) {\n    return\n      abi.encodePacked(\n        \"rgba(\",\n        byte2uint8(_rgba, offset).toString(),\n        \",\",\n        byte2uint8(_rgba, offset + 1).toString(),\n        \",\",\n        byte2uint8(_rgba, offset + 2).toString(),\n        \",\",\n        byte2uint8(_rgba, offset + 3).toString(),\n        \"%)\"\n      );\n  }\n\n  function byte2uint8(bytes memory _data, uint256 _offset) public pure returns (uint8) {\n    require(_data.length > _offset, \"Out of range\");\n    return uint8(_data[_offset]);\n  }\n\n  // formats rgba white with a specified opacity / alpha\n  function white_a(uint256 _a) internal pure returns (string memory) {\n    return rgba(255, 255, 255, _a);\n  }\n\n  // formats rgba black with a specified opacity / alpha\n  function black_a(uint256 _a) internal pure returns (string memory) {\n    return rgba(0, 0, 0, _a);\n  }\n\n  // formats generic rgba color in css\n  function rgba(\n    uint256 _r,\n    uint256 _g,\n    uint256 _b,\n    uint256 _a\n  ) internal pure returns (string memory) {\n    string memory formattedA = _a < 100 ? string.concat(\"0.\", uint2str(_a)) : \"1\";\n    return\n      string.concat(\n        \"rgba(\",\n        uint2str(_r),\n        \",\",\n        uint2str(_g),\n        \",\",\n        uint2str(_b),\n        \",\",\n        formattedA,\n        \")\"\n      );\n  }\n\n  function uint2str(uint256 _i) internal pure returns (string memory _uintAsString) {\n    if (_i == 0) {\n      return \"0\";\n    }\n    uint256 j = _i;\n    uint256 len;\n    while (j != 0) {\n      len++;\n      j /= 10;\n    }\n    bytes memory bstr = new bytes(len);\n    uint256 k = len;\n    while (_i != 0) {\n      k = k - 1;\n      uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\n      bytes1 b1 = bytes1(temp);\n      bstr[k] = b1;\n      _i /= 10;\n    }\n    return string(bstr);\n  }\n}\n"
    },
    "@web3-citizen/core-sol/contracts/interfaces/ISource.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\ninterface ISource {\n  function count(address _address) external view returns (uint256);\n\n  function getData(address _address)\n    external\n    view\n    returns (string[] memory keys, string[] memory values);\n\n  function getValue(address _address, string memory _key) external view returns (string memory);\n}\n"
    },
    "@web3-citizen/core-sol/contracts/interfaces/ICitizenAlpha.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\ninterface ICitizenAlpha {\n  function ownerOf(uint256 _id) external view returns (address owner);\n\n  function issue(address _citizen) external;\n\n  function revoke(address _citizen) external;\n\n  function getId(address citizen) external view returns (uint256);\n\n  function getLink(address citizen) external view returns (address issuer);\n\n  function hasRole(bytes32 role, address citizen) external view returns (bool);\n}\n"
    },
    "@web3-citizen/core-sol/contracts/Sources/SourceENS.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.15;\n\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { NameEncoder } from \"../libraries/NameEncoder.sol\";\nimport { ISource } from \"../interfaces/ISource.sol\";\nimport { IReverseRegistrar } from \"../interfaces/ENS/IReverseRegistrar.sol\";\nimport { ITextResolver } from \"../interfaces/ENS/ITextResolver.sol\";\nimport { IDefaultReverseResolver } from \"../interfaces/ENS/IDefaultReverseResolver.sol\";\n\ncontract SourceENS is ISource, Ownable {\n  using NameEncoder for string;\n\n  string[] private _keys;\n  address private constant RESOLVER = 0x4976fb03C32e5B8cfe2b6cCB31c09Ba78EBaBa41;\n  address private constant REVERSE_REGISTRAR = 0x084b1c3C81545d370f3634392De611CaaBFf8148;\n  address private constant DEFAULT_REVERSE_RESOLVER = 0xA2C122BE93b0074270ebeE7f6b7292C7deB45047;\n\n  constructor() {\n    _keys.push(\"avatar\");\n    _keys.push(\"url\");\n    _keys.push(\"description\");\n    _keys.push(\"com.github\");\n    _keys.push(\"com.twitter\");\n    _keys.push(\"org.telegram\");\n    _keys.push(\"did\");\n  }\n\n  /* ===================================================================================== */\n  /* External Functions                                                                    */\n  /* ===================================================================================== */\n\n  /**\n   * @notice Get Keys\n   * @return keys string[]\n   */\n  function getKeys() external view returns (string[] memory keys) {\n    return _keys;\n  }\n\n  /**\n   * @notice Get data fields count for user\n   * @return count uint256\n   */\n  function count(address user) external view returns (uint256 count) {\n    (, bytes32 node_, ITextResolver res_) = _resolveOwner(user);\n    (string[] memory keys_, ) = _fetchNodeTextFields(_keys, node_, res_);\n    return keys_.length;\n  }\n\n  /**\n   * @notice Get all available data for user\n   * @param user address\n   * @return keys string[]\n   * @return values string[]\n   */\n  function getData(address user)\n    external\n    view\n    returns (string[] memory keys, string[] memory values)\n  {\n    (, bytes32 node_, ITextResolver res_) = _resolveOwner(user);\n    (string[] memory keys_, string[] memory values_) = _fetchNodeTextFields(_keys, node_, res_);\n    return (keys_, values_);\n  }\n\n  function getMetadata(address _address)\n    external\n    view\n    returns (\n      bytes32 node,\n      string memory name,\n      address resolver\n    )\n  {\n    (string memory name, bytes32 node, ITextResolver resolver) = _resolveOwner(_address);\n    return (node, name, address(resolver));\n  }\n\n  /**\n   * @notice Get data value for user\n   * @param user address\n   * @param key string\n   * @return value string\n   */\n  function getValue(address user, string memory key) external view returns (string memory) {\n    (, bytes32 node_, ITextResolver res_) = _resolveOwner(user);\n    return res_.text(node_, key);\n  }\n\n  /**\n   * @notice Append Key\n   * @param key string\n   */\n  function appendKey(string calldata key) external onlyOwner {\n    _keys.push(key);\n  }\n\n  /**\n   * @notice Set Key\n   * @param idx uint256\n   * @param key string\n   */\n  function updateKey(uint256 idx, string calldata key) external onlyOwner {\n    _keys[idx] = key;\n  }\n\n  /* ===================================================================================== */\n  /* Internal Functions                                                                    */\n  /* ===================================================================================== */\n\n  function _resolveOwner(address owner_)\n    internal\n    view\n    returns (\n      string memory,\n      bytes32,\n      ITextResolver\n    )\n  {\n    bytes32 node_ = IReverseRegistrar(REVERSE_REGISTRAR).node(owner_);\n    string memory _name = IDefaultReverseResolver(DEFAULT_REVERSE_RESOLVER).name(node_);\n    (, bytes32 _node) = _name.dnsEncodeName();\n    ITextResolver _resolver = ITextResolver(RESOLVER);\n    return (_name, _node, _resolver);\n  }\n\n  function _fetchNodeTextFields(\n    string[] memory _traits,\n    bytes32 _node,\n    ITextResolver _resolver\n  ) internal view returns (string[] memory keys_, string[] memory values_) {\n    string[] memory __keys = new string[](_traits.length);\n    string[] memory __values = new string[](_traits.length);\n    for (uint256 i = 0; i < _traits.length; i++) {\n      __keys[i] = _traits[i];\n      __values[i] = _resolver.text(_node, _traits[i]);\n    }\n    return (__keys, __values);\n  }\n}\n"
    },
    "@web3-citizen/core-sol/contracts/SVGRender.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.15;\n\nimport { Base64 } from \"base64-sol/base64.sol\";\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { Strings } from \"@openzeppelin/contracts/utils/Strings.sol\";\nimport { svg } from \"./libraries/SVG.sol\";\nimport { svgUtils } from \"./libraries/SVGUtils.sol\";\nimport { SVGColor } from \"./libraries/SVGColor.sol\";\n\ncontract SVGRender is Ownable {\n  using Strings for uint256;\n  address public svgColor;\n\n  constructor(address _svgColor) {\n    svgColor = _svgColor;\n  }\n\n  function generate(uint256 _tokenId, string memory _alias) public view returns (string memory) {\n    string memory _bgDef = svgUtils.getDefURL(\"charcoal\");\n\n    return\n      string(\n        abi.encodePacked(\n          svg.start(),\n          _getDefs(),\n          svg.rect(\n            string.concat(\n              svg.prop(\"fill\", _bgDef),\n              svg.prop(\"x\", \"0\"),\n              svg.prop(\"y\", \"0\"),\n              svg.prop(\"width\", \"100%\"),\n              svg.prop(\"height\", \"100%\")\n            ),\n            svgUtils.NULL\n          ),\n          svg.text(\n            string.concat(\n              svg.prop(\"x\", \"50%\"),\n              svg.prop(\"y\", \"50%\"),\n              svg.prop(\"dominant-baseline\", \"middle\"),\n              svg.prop(\"text-anchor\", \"middle\"),\n              svg.prop(\"font-size\", \"48px\"),\n              svg.prop(\"fill\", \"white\")\n            ),\n            string.concat(\"CIV #\", _tokenId.toString())\n          ),\n          svg.text(\n            string.concat(\n              svg.prop(\"x\", \"50%\"),\n              svg.prop(\"y\", \"60%\"),\n              svg.prop(\"dominant-baseline\", \"middle\"),\n              svg.prop(\"text-anchor\", \"middle\"),\n              svg.prop(\"font-size\", \"22px\"),\n              svg.prop(\"fill\", \"white\")\n            ),\n            _alias\n          ),\n          svg.end()\n        )\n      );\n  }\n\n  function _getDefs() internal view returns (string memory) {\n    return\n      svg.defs(\n        string.concat(\n          svg.linearGradient(\n            string.concat(svg.prop(\"id\", \"charcoal\"), svg.prop(\"gradientTransform\", \"rotate(140)\")),\n            string.concat(\n              svg.stop(\n                string.concat(\n                  svg.prop(\"offset\", \"0%\"),\n                  svg.prop(\"stop-color\", SVGColor(svgColor).getRgba(\"Dark1\"))\n                )\n              ),\n              svg.stop(\n                string.concat(\n                  svg.prop(\"offset\", \"70%\"),\n                  svg.prop(\"stop-color\", SVGColor(svgColor).getRgba(\"Dark2\"))\n                )\n              )\n            )\n          )\n        )\n      );\n  }\n}\n"
    },
    "@web3-citizen/core-sol/contracts/libraries/NameEncoder.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport \"./BytesUtils.sol\";\n\nlibrary NameEncoder {\n  using BytesUtils for bytes;\n\n  function dnsEncodeName(string memory name)\n    internal\n    pure\n    returns (bytes memory dnsName, bytes32 node)\n  {\n    uint8 labelLength = 0;\n    bytes memory bytesName = bytes(name);\n    uint256 length = bytesName.length;\n    dnsName = new bytes(length + 2);\n    node = 0;\n    if (length == 0) {\n      dnsName[0] = 0;\n      return (dnsName, node);\n    }\n\n    // use unchecked to save gas since we check for an underflow\n    // and we check for the length before the loop\n    unchecked {\n      for (uint256 i = length - 1; i >= 0; i--) {\n        if (bytesName[i] == \".\") {\n          dnsName[i + 1] = bytes1(labelLength);\n          node = keccak256(abi.encodePacked(node, bytesName.keccak(i + 1, labelLength)));\n          labelLength = 0;\n        } else {\n          labelLength += 1;\n          dnsName[i + 1] = bytesName[i];\n        }\n        if (i == 0) {\n          break;\n        }\n      }\n    }\n\n    node = keccak256(abi.encodePacked(node, bytesName.keccak(0, labelLength)));\n\n    dnsName[0] = bytes1(labelLength);\n    return (dnsName, node);\n  }\n}\n"
    },
    "@web3-citizen/core-sol/contracts/interfaces/ENS/IReverseRegistrar.sol": {
      "content": "pragma solidity >=0.8.4;\n\ninterface IReverseRegistrar {\n  function setDefaultResolver(address resolver) external;\n\n  function claim(address owner) external returns (bytes32);\n\n  function claimForAddr(\n    address addr,\n    address owner,\n    address resolver\n  ) external returns (bytes32);\n\n  function claimWithResolver(address owner, address resolver) external returns (bytes32);\n\n  function setName(string memory name) external returns (bytes32);\n\n  function setNameForAddr(\n    address addr,\n    address owner,\n    address resolver,\n    string memory name\n  ) external returns (bytes32);\n\n  function node(address addr) external pure returns (bytes32);\n}\n"
    },
    "@web3-citizen/core-sol/contracts/interfaces/ENS/ITextResolver.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\ninterface ITextResolver {\n  event TextChanged(bytes32 indexed node, string indexed indexedKey, string key);\n\n  /**\n   * Returns the text data associated with an ENS node and key.\n   * @param node The ENS node to query.\n   * @param key The text data key to query.\n   * @return The associated text data.\n   */\n  function text(bytes32 node, string calldata key) external view returns (string memory);\n}\n"
    },
    "@web3-citizen/core-sol/contracts/interfaces/ENS/IDefaultReverseResolver.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\ninterface IDefaultReverseResolver {\n  function name(bytes32 input) external view returns (string calldata);\n}\n"
    },
    "@web3-citizen/core-sol/contracts/libraries/BytesUtils.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\nlibrary BytesUtils {\n  /*\n   * @dev Returns the keccak-256 hash of a byte range.\n   * @param self The byte string to hash.\n   * @param offset The position to start hashing at.\n   * @param len The number of bytes to hash.\n   * @return The hash of the byte range.\n   */\n  function keccak(\n    bytes memory self,\n    uint256 offset,\n    uint256 len\n  ) internal pure returns (bytes32 ret) {\n    require(offset + len <= self.length);\n    assembly {\n      ret := keccak256(add(add(self, 32), offset), len)\n    }\n  }\n\n  /**\n   * @dev Returns the ENS namehash of a DNS-encoded name.\n   * @param self The DNS-encoded name to hash.\n   * @param offset The offset at which to start hashing.\n   * @return The namehash of the name.\n   */\n  function namehash(bytes memory self, uint256 offset) internal pure returns (bytes32) {\n    (bytes32 labelhash, uint256 newOffset) = readLabel(self, offset);\n    if (labelhash == bytes32(0)) {\n      require(offset == self.length - 1, \"namehash: Junk at end of name\");\n      return bytes32(0);\n    }\n    return keccak256(abi.encodePacked(namehash(self, newOffset), labelhash));\n  }\n\n  /**\n   * @dev Returns the keccak-256 hash of a DNS-encoded label, and the offset to the start of the next label.\n   * @param self The byte string to read a label from.\n   * @param idx The index to read a label at.\n   * @return labelhash The hash of the label at the specified index, or 0 if it is the last label.\n   * @return newIdx The index of the start of the next label.\n   */\n  function readLabel(bytes memory self, uint256 idx)\n    internal\n    pure\n    returns (bytes32 labelhash, uint256 newIdx)\n  {\n    require(idx < self.length, \"readLabel: Index out of bounds\");\n    uint256 len = uint256(uint8(self[idx]));\n    if (len > 0) {\n      labelhash = keccak(self, idx + 1, len);\n    } else {\n      labelhash = bytes32(0);\n    }\n    newIdx = idx + len + 1;\n  }\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControlEnumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlEnumerable.sol\";\nimport \"./AccessControl.sol\";\nimport \"../utils/structs/EnumerableSet.sol\";\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\n        return _roleMembers[role].at(index);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\n        return _roleMembers[role].length();\n    }\n\n    /**\n     * @dev Overload {_grantRole} to track enumerable memberships\n     */\n    function _grantRole(bytes32 role, address account) internal virtual override {\n        super._grantRole(role, account);\n        _roleMembers[role].add(account);\n    }\n\n    /**\n     * @dev Overload {_revokeRole} to track enumerable memberships\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual override {\n        super._revokeRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControlEnumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerable is IAccessControl {\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "contracts/NationStarter.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.15;\n\nimport \"@web3-citizen/core-sol/contracts/Nation/Nation.sol\";\n\ncontract NationStarter {\n  address[] private _nations;\n\n  event NationStarted(address indexed M, address indexed _summoner);\n\n  function startNation(\n    string memory name,\n    string memory symbol,\n    address _citizenAlpha_,\n    address[] memory _founders\n  ) public {\n    Nation nation_ = new Nation(name, symbol, _citizenAlpha_, _founders);\n\n    _nations.push(address(nation_));\n\n    emit NationStarted(address(nation_), msg.sender);\n  }\n\n  function getNations() public view returns (address[] memory nations) {\n    return _nations;\n  }\n\n  function getNationCount() public view returns (uint256 count) {\n    return _nations.length;\n  }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "istanbul",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}